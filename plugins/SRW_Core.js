/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./js/SRW Core/Audio.js":
/*!******************************!*\
  !*** ./js/SRW Core/Audio.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n\t/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n\t\tpatches: patches,\r\n\t}); \r\n\t\r\n\tfunction patches(){};\r\n\t\r\n\tpatches.apply = function(){\r\n\t\tAudioManager.staticSeStates = {};\r\n\t\tAudioManager.playStaticSe = function(se) {\r\n\t\t\tif (se.name) {\r\n\t\t\t\tthis.loadStaticSe(se);\r\n\t\t\t\tfor (var i = 0; i < this._staticBuffers.length; i++) {\r\n\t\t\t\t\tvar buffer = this._staticBuffers[i];\r\n\t\t\t\t\tif (buffer._reservedSeName === se.name) {\r\n\t\t\t\t\t\tAudioManager.staticSeStates[se.name] = false;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tbuffer._stopListeners.push(function(){\r\n\t\t\t\t\t\t\tAudioManager.staticSeStates[se.name] = true;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tbuffer.stop();\r\n\t\t\t\t\t\tthis.updateSeParameters(buffer, se);\r\n\t\t\t\t\t\tbuffer.play(false);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tAudioManager.seStates = {};\t\t\r\n\t\tAudioManager.playSe = function(se) {\r\n\t\t\tif (se.name && !$gameTemp.isSkippingEvents) {\r\n\t\t\t\tthis._seBuffers = this._seBuffers.filter(function(audio) {\r\n\t\t\t\t\treturn audio._isStarting || audio.isPlaying();\r\n\t\t\t\t});\r\n\t\t\t\tvar buffer;\r\n\t\t\t\tif(this._sePreloads){\r\n\t\t\t\t\tlet ctr = 0;\r\n\t\t\t\t\twhile(ctr < this._sePreloads.length && !buffer){\r\n\t\t\t\t\t\tif(this._sePreloads[ctr][\"_reservedSeName\"] == se.name && !this._sePreloads[ctr].used){\r\n\t\t\t\t\t\t\tbuffer = this._sePreloads[ctr];\r\n\t\t\t\t\t\t\tbuffer.used = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tctr++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(!buffer){\r\n\t\t\t\t\tbuffer = this.createBuffer('se', se.name);\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t\tthis.updateSeParameters(buffer, se);\r\n\t\t\t\tbuffer._seName = se.name;\r\n\t\t\t\tbuffer._isStarting = true;\r\n\t\t\t\tAudioManager.seStates[se.name] = false;\r\n\t\t\t\tbuffer.play(false);\r\n\t\t\t\tbuffer._stopListeners.push(function(){\r\n\t\t\t\t\tAudioManager.seStates[se.name] = true;\r\n\t\t\t\t});\r\n\t\t\t\tthis._seBuffers.push(buffer);\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tAudioManager.clearPreloads = function(se) {\r\n\t\t\tthis._sePreloads = [];\r\n\t\t}\t\t\r\n\t\t\r\n\t\tAudioManager.isPlayingSE = function(){\r\n\t\t\tlet result = false;\r\n\t\t\tfor(var seName in this.seStates){\r\n\t\t\t\tif(!this.seStates[seName]){\r\n\t\t\t\t\tresult = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\tAudioManager.loadBgm = function(bgm) {\r\n\t\t\tif (bgm.name && !this.isStaticSe(bgm)) {\r\n\t\t\t\tvar buffer = this.createBuffer('bgm', bgm.name);\r\n\t\t\t\tbuffer._reservedSeName = bgm.name;\r\n\t\t\t\tthis._staticBuffers.push(buffer);\r\n\t\t\t\tif (this.shouldUseHtml5Audio()) {\r\n\t\t\t\t\tHtml5Audio.setStaticSe(buffer._url);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tAudioManager.fadeOutSe = function(seName, duration) {\r\n\t\t\tthis._seBuffers.forEach(function(buffer) {\r\n\t\t\t\tif(buffer._seName == seName){\r\n\t\t\t\t\tbuffer.fadeOut(duration);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\t\t\r\n\t\tAudioManager.stopSe = function(seName) {\r\n\t\t\tlet tmp = [];\r\n\t\t\tthis._seBuffers.forEach(function(buffer) {\r\n\t\t\t\tif(seName == null || buffer._seName == seName){\r\n\t\t\t\t\tbuffer.stop();\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttmp.push(buffer);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tthis._seBuffers = tmp;\r\n\t\t};\r\n\t\t\r\n\t\tAudioManager.preloadSe = async function(se) {\r\n\t\t\tif (se.name) {\r\n\t\t\t\tvar buffer = await this.createBufferAsync('se', se.name);\r\n\t\t\t\tbuffer._reservedSeName = se.name;\r\n\t\t\t\tif(!this._sePreloads){\r\n\t\t\t\t\tthis._sePreloads = [];\r\n\t\t\t\t}\r\n\t\t\t\tthis._sePreloads.push(buffer);\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tAudioManager.createBufferAsync = function(folder, name) {\r\n\t\t\tconst _this = this;\r\n\t\t\treturn new Promise(function(resolve, reject){\r\n\t\t\t\tvar ext = _this.audioFileExt();\r\n\t\t\t\tvar url = _this._path + folder + '/' + encodeURIComponent(name) + ext;\t\t\t\r\n\t\t\t\tconst wAudio = new WebAudio(url);\t\r\n\t\t\t\twAudio.addLoadListener(function() {\r\n\t\t\t\t\tresolve(wAudio);\r\n\t\t\t\t});\t\t\t\t\r\n\t\t\t});\t\t\t\t\t\r\n\t\t};\r\n\t\t\r\n\t\tWebAudio.prototype.play = function(loop, offset) {\r\n\t\t\tif (this.isReady()) {\r\n\t\t\t\toffset = offset || 0;\r\n\t\t\t\tthis._isStarting = false;\r\n\t\t\t\tthis._startPlaying(loop, offset);\r\n\t\t\t} else if (WebAudio._context) {\r\n\t\t\t\tthis._autoPlay = true;\r\n\t\t\t\tthis.addLoadListener(function() {\r\n\t\t\t\t\tif (this._autoPlay) {\r\n\t\t\t\t\t\tthis.play(loop, offset);\r\n\t\t\t\t\t}\r\n\t\t\t\t}.bind(this));\r\n\t\t\t}\r\n\t\t};\r\n\t}\n\n//# sourceURL=webpack://src/./js/SRW_Core/Audio.js?");

/***/ }),

/***/ "./js/SRW Core/DataManagement.js":
/*!***************************************!*\
  !*** ./js/SRW Core/DataManagement.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n\tconst {Parser} = __webpack_require__(/*! acorn */ \"./node_modules/acorn/dist/acorn.js\")\r\n\t\r\n\t/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n\t\tpatches: patches,\r\n\t\tScriptCharactersLoader,\r\n\t\tDeployActionsLoader\r\n\t}); \r\n\t\r\n\tfunction patches(){};\r\n\t\r\n\tpatches.apply = function(){\r\n\t\t//====================================================================\r\n\t\t// Save Management\r\n\t\t//====================================================================\t\r\n\t\t\r\n\r\n\t\t\r\n\t\tScene_Boot.prototype.create = function() {\r\n\t\t\tScene_Base.prototype.create.call(this);\r\n\t\t\tDataManager.checkSRWKit().then(async function(){\r\n\t\t\t\tDataManager.loadDatabase();\r\n\t\t\t\tawait DataManager.loadSRWConfig();\r\n\t\t\t\tConfigManager.load();\t\r\n\t\t\t\tif(ENGINE_SETTINGS.PRELOADER){\r\n\t\t\t\t\tENGINE_SETTINGS.PRELOADER();\r\n\t\t\t\t}\t\t\r\n\t\t\t});\t\t\t\r\n\t\t\tthis.loadSystemWindowImage();\r\n\t\t};\r\n\t\t\r\n\t\tScene_Boot.prototype.isReady = function() {\r\n\t\t\tif(!DataManager.isSRWKitChecked()){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(!$scriptCharactersLoader || !$scriptCharactersLoader._isLoaded){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(!$deployActionsLoader || !$deployActionsLoader._isLoaded){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(!$mapAttackManager || !$mapAttackManager._isLoaded){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif (Scene_Base.prototype.isReady.call(this)) {\r\n\t\t\t\treturn DataManager.isDatabaseLoaded() && this.isGameFontLoaded() && DataManager.isConfigLoaded();\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tDataManager.maxSavefiles = function() {\r\n\t\t\treturn 100;\r\n\t\t};\r\n\t\t\r\n\t\tDataManager.isConfigLoaded = function() {\r\n\t\t\treturn this._configLoaded;\r\n\t\t}\r\n\t\t\r\n\t\tDataManager.isSRWKitChecked = function() {\r\n\t\t\treturn this._SRWKitChecked;\r\n\t\t}\r\n\t\t\r\n\t\tDataManager.isThisGameFile = function(savefileId) {\r\n\t\t\tvar globalInfo = this.loadGlobalInfo();\r\n\t\t\tif (globalInfo && globalInfo[savefileId]) {\r\n\t\t\t\tif (StorageManager.isLocalMode()) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar savefile = globalInfo[savefileId];\r\n\t\t\t\t\treturn (savefile.globalId === ENGINE_SETTINGS.GAMEID || 'SRWMV');\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tDataManager.checkSRWKit = async function(){\r\n\t\t\tvar _this = this;\r\n\t\t\tif (Utils.isNwjs() && process.versions[\"nw-flavor\"] === \"sdk\") {\r\n\t\t\t\tconst fs = __webpack_require__(/*! fs */ \"fs\");\r\n\t\t\t\tvar path = __webpack_require__(/*! path */ \"path\");\r\n\t\t\t\tvar base = getBase();\r\n\t\t\t\tlet filesToCheck = [\"AllyPilots\", \"Mechs\", \"MechWeapons\", \"EnemyPilots\", \"DeployActions\", \"MapAttacks\", \"ScriptCharacters\", \"Patterns\", \"BattleAnimations\", \"BattleEnvironments\", \"BattleText\"];\r\n\t\t\t\tlet missingFiles = [];\t\r\n\t\t\t\tfilesToCheck.forEach(function(file){\r\n\t\t\t\t\tif (!fs.existsSync(\"data/\"+file+\".json\")) {\r\n\t\t\t\t\t\tmissingFiles.push(file);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tif(missingFiles.length){\r\n\t\t\t\t\tvar c = confirm(\"Some required data files are not present, this may be due to upgrading to a new engine version. Perform auto upgrade?\");\t\r\n\t\t\t\t\tif(c){\r\n\t\t\t\t\t\tawait this.upgradeSRWKit(missingFiles);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\r\n\t\t\t}\r\n\t\t\tthis._SRWKitChecked = true;\t\r\n\t\t}\r\n\t\t\r\n\t\tDataManager.upgradeSRWKit = async function(missingFiles){\r\n\t\t\tconst fs = __webpack_require__(/*! fs */ \"fs\");\r\n\t\t\tvar path = __webpack_require__(/*! path */ \"path\");\r\n\t\t\tvar base = getBase();\r\n\t\t\tmissingFiles.forEach(async function(file){\r\n\t\t\t\tif(file == \"AllyPilots\"){\r\n\t\t\t\t\tfs.copyFileSync(\"data/Actors.json\", \"data/AllyPilots.json\", fs.constants.COPYFILE_EXCL);\r\n\t\t\t\t}\r\n\t\t\t\tif(file == \"Mechs\"){\r\n\t\t\t\t\tfs.copyFileSync(\"data/Classes.json\", \"data/Mechs.json\", fs.constants.COPYFILE_EXCL);\r\n\t\t\t\t}\r\n\t\t\t\tif(file == \"MechWeapons\"){\r\n\t\t\t\t\tfs.copyFileSync(\"data/Weapons.json\", \"data/MechWeapons.json\", fs.constants.COPYFILE_EXCL);\r\n\t\t\t\t}\r\n\t\t\t\tif(file == \"EnemyPilots\"){\r\n\t\t\t\t\tfs.copyFileSync(\"data/Enemies.json\", \"data/EnemyPilots.json\", fs.constants.COPYFILE_EXCL);\r\n\t\t\t\t}\r\n\t\t\t\tif(file == \"DeployActions\"){\t\t\t\t\r\n\t\t\t\t\tfs.writeFileSync(\"data/DeployActions.json\", JSON.stringify({}));\r\n\t\t\t\t}\r\n\t\t\t\tif(file == \"Patterns\"){\t\t\t\t\r\n\t\t\t\t\tfs.writeFileSync(\"data/Patterns.json\", JSON.stringify([]));\r\n\t\t\t\t}\r\n\t\t\t\tif(file == \"MapAttacks\"){\r\n\t\t\t\t\tvar sourceFile = \"js/plugins/config/active/MapAttacks.conf.js\";\r\n\t\t\t\t\tif(!fs.existsSync(sourceFile)){\r\n\t\t\t\t\t\tsourceFile = \"js/plugins/config/default/MapAttacks.conf.js\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar s = document.createElement(\"script\");\r\n\t\t\t\t\ts.type = \"text/javascript\";\r\n\t\t\t\t\ts.src = sourceFile;\r\n\t\t\t\t\twindow.document.body.append(s);\r\n\t\t\t\t\tawait new Promise(function(resolve, reject){\r\n\t\t\t\t\t\t s.addEventListener('load', function() {\r\n\t\t\t\t\t\t\t$mapAttackManager.initLegacyFormat();\r\n\t\t\t\t\t\t\tfs.writeFileSync(\"data/MapAttacks.json\", JSON.stringify($mapAttackManager._definitions));\r\n\t\t\t\t\t\t });\r\n\t\t\t\t\t});\t\t\r\n\t\t\t\t}\r\n\t\t\t\tif(file == \"ScriptCharacters\"){\r\n\t\t\t\t\tvar sourceFile = \"js/plugins/config/active/ScriptCharacters.json\";\r\n\t\t\t\t\tif(!fs.existsSync(sourceFile)){\r\n\t\t\t\t\t\tsourceFile = \"js/plugins/config/default/ScriptCharacters.json\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfs.copyFileSync(sourceFile, \"data/ScriptCharacters.json\", fs.constants.COPYFILE_EXCL);\t\r\n\t\t\t\t}\r\n\t\t\t\tif(file == \"BattleAnimations\"){\r\n\t\t\t\t\tvar sourceFile = \"js/plugins/config/active/BattleAnimations.json\";\r\n\t\t\t\t\tif(!fs.existsSync(sourceFile)){\r\n\t\t\t\t\t\tsourceFile = \"js/plugins/config/default/BattleAnimations.json\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfs.copyFileSync(sourceFile, \"data/BattleAnimations.json\", fs.constants.COPYFILE_EXCL);\t\r\n\t\t\t\t}\r\n\t\t\t\tif(file == \"BattleEnvironments\"){\r\n\t\t\t\t\tvar sourceFile = \"js/plugins/config/active/BattleEnvironments.json\";\r\n\t\t\t\t\tif(!fs.existsSync(sourceFile)){\r\n\t\t\t\t\t\tsourceFile = \"js/plugins/config/default/BattleEnvironments.json\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfs.copyFileSync(sourceFile, \"data/BattleEnvironments.json\", fs.constants.COPYFILE_EXCL);\t\r\n\t\t\t\t}\r\n\t\t\t\tif(file == \"BattleText\"){\r\n\t\t\t\t\tvar sourceFile = \"js/plugins/config/active/BattleText.json\";\r\n\t\t\t\t\tif(!fs.existsSync(sourceFile)){\r\n\t\t\t\t\t\tsourceFile = \"js/plugins/config/default/BattleText.json\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfs.copyFileSync(sourceFile, \"data/BattleText.json\", fs.constants.COPYFILE_EXCL);\t\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tDataManager.loadSRWConfig = async function() {\t\t\r\n\t\t\tvar _this = this;\r\n\t\t\t//const fs = require('fs');\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tfunction loadConfigFromFile(url){\r\n\t\t\t\treturn new Promise(function(resolve, reject){\r\n\t\t\t\t\tvar xhr = new XMLHttpRequest();\r\n\t\t\t\t\txhr.open('GET', url);\r\n\t\t\t\t\t//xhr.overrideMimeType('application/json');\r\n\t\t\t\t\txhr.onload = function() {\r\n\t\t\t\t\t\tif (xhr.status < 400) {\r\n\t\t\t\t\t\t\tresolve(xhr.responseText);\t\t\t\t\t\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tresolve(-1);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\txhr.onerror = function(){\r\n\t\t\t\t\t\tresolve(-1);\r\n\t\t\t\t\t}\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\twindow[name] = null;\r\n\t\t\t\t\txhr.send();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\r\n\t\t\tvar configResults = [];\r\n\t\t\t\r\n\t\t\tasync function loadConfigFile(path){\t\t\t\t\t\r\n\t\t\t\tvar result;\r\n\t\t\t\tvar content = await loadConfigFromFile(path);\r\n\t\t\t\t\r\n\t\t\t\ttry {\r\n\t\t\t\t\tif(content == -1){\r\n\t\t\t\t\t\tresult = {status: \"NOK\", data: \"Config '\"+path+\"' not found or empty!\", path: path};\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar parseError = false;\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tParser.parse(content);\r\n\t\t\t\t\t\t} catch(e){\r\n\t\t\t\t\t\t\tparseError = true;\r\n\t\t\t\t\t\t\tvar msg = e.message;\t\t\r\n\t\t\t\t\t\t\tif(e.loc){\r\n\t\t\t\t\t\t\t\tvar lines = content.split(\"\\n\");\r\n\t\t\t\t\t\t\t\tvar line = lines[e.loc.line-1];\r\n\t\t\t\t\t\t\t\tif(line && line.length > e.loc.column){\r\n\t\t\t\t\t\t\t\t\tvar badChar = line.charAt(e.loc.column);\r\n\t\t\t\t\t\t\t\t\tmsg+=\"<br>(line: \"+e.loc.line+\", column: \"+e.loc.column+\", token: '\"+badChar+\"')\";\r\n\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\t\tresult = {status: \"NOK\", data: msg, path: path};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(!parseError){\t\t\t\t\t\r\n\t\t\t\t\t\t\t//eval.call(window, content);\r\n\t\t\t\t\t\t\tawait (new Promise(function(resolve, reject){\r\n\t\t\t\t\t\t\t\tvar el = document.createElement('script');\r\n\t\t\t\t\t\t\t\twindow.document.body.append(el);\r\n\t\t\t\t\t\t\t\tel.onload = resolve;\r\n\t\t\t\t\t\t\t\tel.src = path;\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\tresult = {status: \"OK\", data: \"\", path: path};\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t} catch(e){\r\n\t\t\t\t\tresult = {status: \"NOK\", data: e.message, path: path};\r\n\t\t\t\t}\r\n\t\t\t\tconfigResults[path] = result;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tasync function loadActiveConfig(type){\t\t\t\r\n\t\t\t\t/*var path_lib = require('path');\r\n\t\t\t\tvar base = path_lib.dirname(process.mainModule.filename);\r\n\t\t\t\tvar path = '/js/plugins/config/active/'+type+'.conf.js';\r\n\t\t\t\tif (!fs.existsSync(path)) {\t\t\t\t\t\r\n\t\t\t\t\tpath = '/js/plugins/config/default/'+type+'.conf.js'\r\n\t\t\t\t}*/\r\n\t\t\t\t\r\n\t\t\t\tvar base = getBase();\r\n\t\t\t\t\r\n\t\t\t\tvar path = 'js/plugins/config/active/'+type+'.conf.js';\r\n\t\t\t\tawait loadConfigFile(path);\t\t\r\n\t\t\t\tif(configResults[path].status == \"NOK\"){\r\n\t\t\t\t\tdelete configResults[path];\r\n\t\t\t\t\tpath = 'js/plugins/config/default/'+type+'.conf.js'\r\n\t\t\t\t\tawait loadConfigFile(path);\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar configs = [\r\n\t\t\t\t//\"Appstrings\",\r\n\t\t\t\t\"Input\",\r\n\t\t\t\t//\"Engine\",\r\n\t\t\t\t\"Spirits\",\r\n\t\t\t\t\"PilotAbilities\",\r\n\t\t\t\t\"MechAbilities\",\r\n\t\t\t\t\"ItemEffects\",\r\n\t\t\t\t\"WeaponEffects\",\r\n\t\t\t\t\"AbilityCommands\",\r\n\t\t\t\t\"StageInfo\",\r\n\t\t\t\t\"BattleSongs\",\r\n\t\t\t\t//\"MapAttacks\",\r\n\t\t\t\t\"BattleText\",\r\n\t\t\t\t//\"DeployActions\",\r\n\t\t\t\t\"RelationshipBonuses\",\r\n\t\t\t\t\"Constants\",\r\n\t\t\t\t\"AbilityZones\",\r\n\t\t\t\t\"TerrainTypes\",\r\n\t\t\t\t\"BasicBattleBGs\"\r\n\t\t\t];\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tvar defs = [];\r\n\t\t\tconfigs.forEach(function(config){\r\n\t\t\t\tdefs.push(loadActiveConfig(config));\r\n\t\t\t});\r\n\t\t\tawait Promise.all(defs).then(async function(){\r\n\t\t\t\tvar base = getBase();\r\n\t\t\t\t//Engine\r\n\t\t\t\tawait loadConfigFile('js/plugins/config/default/Engine.conf.js');\r\n\t\t\t\t\r\n\t\t\t\tvar ENGINE_SETTINGS_DEFAULT = window.ENGINE_SETTINGS;\r\n\t\t\t\t\r\n\t\t\t\t//if (fs.existsSync('/js/plugins/config/active/Engine.conf.js')) {\r\n\t\t\t\t\tawait loadConfigFile('js/plugins/config/active/Engine.conf.js');\t\t\t\t\t\t\r\n\t\t\t\t//}\t\t\t\r\n\t\t\t\tif(configResults['js/plugins/config/default/Engine.conf.js'].status == \"OK\") {\r\n\t\t\t\t\tdelete configResults['js/plugins/config/active/Engine.conf.js'];\r\n\t\t\t\t}\t\t\r\n\t\t\t\t\r\n\t\t\t\t//Appstrings\r\n\t\t\t\tawait loadConfigFile('js/plugins/config/default/Appstrings.conf.js');\r\n\t\t\t\t\r\n\t\t\t\tvar APPSTRINGS_DEFAULT = window.APPSTRINGS;\r\n\t\t\t\tvar EDITORSTRINGS_DEFAULT = window.EDITORSTRINGS;\r\n\t\t\t\t\r\n\t\t\t\tawait loadConfigFile('js/plugins/config/active/Appstrings.conf.js');\t\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\tif(configResults['js/plugins/config/default/Appstrings.conf.js'].status == \"OK\") {\r\n\t\t\t\t\tdelete configResults['js/plugins/config/active/Appstrings.conf.js'];\r\n\t\t\t\t}\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tvar errors = [];\r\n\t\t\t\tObject.keys(configResults).forEach(function(type){\r\n\t\t\t\t\tif(configResults[type].status == \"NOK\"){\r\n\t\t\t\t\t\terrors.push(\"An error occurred while loading config file '\"+configResults[type].path+\"': \"+configResults[type].data+\". Current work dir: \" + process.cwd());\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tif(errors.length){\r\n\t\t\t\t\tSceneManager.catchException(errors.join(\"<br><br>\"));\r\n\t\t\t\t} else {\t\r\n\r\n\t\t\t\t\tfunction updateFromDefault(defaultConf, activeConf){\r\n\t\t\t\t\t\tObject.keys(defaultConf).forEach(function(key){\r\n\t\t\t\t\t\t\tif(activeConf[key] == null){\r\n\t\t\t\t\t\t\t\tactiveConf[key] = defaultConf[key];\r\n\t\t\t\t\t\t\t} else if(typeof defaultConf[key] == \"object\" && typeof activeConf[key] == \"object\"){\r\n\t\t\t\t\t\t\t\tupdateFromDefault(defaultConf[key], activeConf[key]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\t\t\t\t\r\n\r\n\t\t\t\t\tif(typeof window.ENGINE_SETTINGS == \"undefined\"){\r\n\t\t\t\t\t\twindow.ENGINE_SETTINGS = {};\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\tupdateFromDefault(ENGINE_SETTINGS_DEFAULT, window.ENGINE_SETTINGS);\t\t\t\t\t\r\n\t\t\t\t\tupdateFromDefault(APPSTRINGS_DEFAULT, window.APPSTRINGS);\r\n\t\t\t\t\tupdateFromDefault(EDITORSTRINGS_DEFAULT, window.EDITORSTRINGS);\r\n\t\t\t\t\r\n\t\t\t\t\t$spiritManager.initDefinitions();\r\n\t\t\t\t\t$pilotAbilityManager.initDefinitions();\r\n\t\t\t\t\t$mechAbilityManager.initDefinitions();\r\n\t\t\t\t\t$itemEffectManager.initDefinitions();\r\n\t\t\t\t\t$abilityCommandManger.initDefinitions();\r\n\t\t\t\t\t$weaponEffectManager.initDefinitions();\r\n\t\t\t\t\t$relationshipBonusManager.initDefinitions();\r\n\t\t\t\t\t$songManager.initDefinitions();\r\n\t\t\t\t\t//$mapAttackManager.initDefinitions();\r\n\t\t\t\t\t$SRWStageInfoManager.initDefinitions();\r\n\t\t\t\t\t$abilityZoneManager.initDefinitions();\r\n\t\t\t\t\t$terrainTypeManager.initDefinitions();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(ENGINE_SETTINGS.CUSTOM_TITLE_SCREEN){\r\n\t\t\t\t\t\t await loadConfigFile('js/plugins/'+ENGINE_SETTINGS.CUSTOM_TITLE_SCREEN+\".js\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t_this._configLoaded = true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\t\t\r\n\r\n\t\tDataManager.loadGameWithoutRescue = function(savefileId) {\r\n\t\t\tif (this.isThisGameFile(savefileId)) {\r\n\t\t\t\tvar json = StorageManager.load(savefileId);\r\n\t\t\t\tthis.createGameObjects();\r\n\t\t\t\tthis.extractSaveContents(JsonEx.parse(json));\r\n\t\t\t\tthis._lastAccessedId = savefileId;\r\n\t\t\t\t//$gameSystem.setSrpgActors();\r\n\t\t\t\t//$gameSystem.setSrpgEnemys();\r\n\t\t\t\t\r\n\t\t\t\t//patches for old save files\r\n\t\t\t\tif(!$gameSystem.untargetableAllies){\r\n\t\t\t\t\t$gameSystem.untargetableAllies = {};\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(ENGINE_SETTINGS.SAVE_UPDATE_FUNCTION){\r\n\t\t\t\t\tENGINE_SETTINGS.SAVE_UPDATE_FUNCTION();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif($gameSystem.isIntermission()){\r\n\t\t\t\t\t$gameSystem.startIntermission();\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$statCalc.invalidateAbilityCache();\r\n\t\t\t\t\t$statCalc.invalidateZoneCache();\r\n\t\t\t\t\t$statCalc.softRefreshUnits();\r\n\t\t\t\t\t\r\n\t\t\t\t\t$SRWGameState.requestNewState(\"normal\");\r\n\t\t\t\t}\t\t\t\r\n\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tDataManager.saveGameWithoutRescue = function(savefileId) {\r\n\t\t\t$gameSystem._saveRevision = ENGINE_SETTINGS.SAVE_REVISION || 0;\r\n\t\t\tvar json = JsonEx.stringify(this.makeSaveContents());\r\n\r\n\t\t\tStorageManager.save(savefileId, json);\r\n\t\t\tthis._lastAccessedId = savefileId;\r\n\t\t\tvar globalInfo = this.loadGlobalInfo() || [];\r\n\t\t\tglobalInfo[savefileId] = this.makeSavefileInfo();\r\n\t\t\tthis.saveGlobalInfo(globalInfo);\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\tDataManager.makeSavefileInfo = function() {\r\n\t\t\tvar info = {};\r\n\t\t\tinfo.globalId   = ENGINE_SETTINGS.GAMEID || 'SRWMV';\r\n\t\t\t\r\n\t\t\tlet title = \"\";\r\n\t\t\tlet stageId;\r\n\t\t\tif($gameSystem.isIntermission()){\r\n\t\t\t\tstageId = $gameVariables.value(_lastStageIdVariable);\r\n\t\t\t} else if($gameMap){\r\n\t\t\t\tstageId = $gameMap.mapId()\r\n\t\t\t}\r\n\t\t\tif(stageId != null){\r\n\t\t\t\tvar stageInfo = $SRWStageInfoManager.getStageInfo(stageId);\r\n\t\t\t\tif(stageInfo){\r\n\t\t\t\t\ttitle = APPSTRINGS.INTERMISSION.stage_label+\" \"+stageInfo.displayId+\" - \";\r\n\t\t\t\t}\r\n\t\t\t}\t\t\t\r\n\t\t\ttitle+=$gameSystem.saveDisplayName || $dataSystem.gameTitle;\r\n\t\t\tinfo.title      = title;\r\n\t\t\tinfo.characters = $gameParty.charactersForSavefile();\r\n\t\t\tinfo.faces      = $gameParty.facesForSavefile();\r\n\t\t\tinfo.playtime   = $gameSystem.playtimeText();\r\n\t\t\tinfo.timestamp  = Date.now();\r\n\t\t\tinfo.funds = $gameParty.gold();\r\n\t\t\tinfo.SRCount = $SRWSaveManager.getSRCount();\r\n\t\t\tinfo.turnCount =  $gameVariables.value(_turnCountVariable)\r\n\t\t\treturn info;\r\n\t\t};\r\n\t\t\r\n\t\tDataManager.saveContinueSlot = function() {\r\n\t\t\tvar savefileId = \"continue\";\r\n\t\t\t$gameSystem.onBeforeSave();\r\n\t\t\tvar json = JsonEx.stringify({date: Date.now(), content: this.makeSaveContents()});\t\t\r\n\t\t\tStorageManager.save(savefileId, json);\r\n\t\t\treturn true;\r\n\t\t};\r\n\t\t\r\n\t\tDataManager.loadContinueSlot = function() {\r\n\t\t\ttry{\r\n\t\t\t\tvar savefileId = \"continue\";\r\n\t\t\t\tvar globalInfo = this.loadGlobalInfo();\t\t\r\n\t\t\t\tvar json = StorageManager.load(savefileId);\r\n\t\t\t\tthis.createGameObjects();\r\n\t\t\t\tthis.extractSaveContents(JsonEx.parse(json).content);\r\n\t\t\t\tif(ENGINE_SETTINGS.SAVE_UPDATE_FUNCTION){\r\n\t\t\t\t\tENGINE_SETTINGS.SAVE_UPDATE_FUNCTION();\r\n\t\t\t\t}\r\n\t\t\t\t$statCalc.invalidateAbilityCache();\r\n\t\t\t\t$statCalc.invalidateZoneCache();\r\n\t\t\t\t$statCalc.softRefreshUnits();\r\n\r\n\t\t\t\t$SRWGameState.requestNewState(\"normal\");\r\n\t\t\t\t\r\n\t\t\t\tSceneManager._scene.fadeOutAll()\r\n\t\t\t\tSceneManager.goto(Scene_Map);\r\n\t\t\t\tif($gameSystem._bgmOnSave){\r\n\t\t\t\t\t$gameTemp.continueLoaded = true;\r\n\t\t\t\t}\t\t\t\r\n\t\t\t} catch(e){\r\n\t\t\t\tconsole.log(\"Failed to load continue save\");\r\n\t\t\t\tconsole.trace();\r\n\t\t\t}\t\t\r\n\t\t\treturn true;\t\t\r\n\t\t};\r\n\t\t\r\n\t\tDataManager.latestSavefileDate = function() {\r\n\t\t\tvar globalInfo = this.loadGlobalInfo();\r\n\t\t\tvar savefileId = 1;\r\n\t\t\tvar timestamp = 0;\r\n\t\t\tif (globalInfo) {\r\n\t\t\t\tfor (var i = 1; i < globalInfo.length; i++) {\r\n\t\t\t\t\tif (this.isThisGameFile(i) && globalInfo[i].timestamp > timestamp) {\r\n\t\t\t\t\t\ttimestamp = globalInfo[i].timestamp;\r\n\t\t\t\t\t\tsavefileId = i;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn timestamp;\r\n\t\t};\t\r\n\t\t\r\n\t\tDataManager._databaseFiles = [\r\n\t\t\t{ name: '$dataActors',       src: 'AllyPilots.json'       },\r\n\t\t\t{ name: '$dataClasses',      src: 'Mechs.json'      },\r\n\t\t\t{ name: '$dataSkills',       src: 'Skills.json'       },\r\n\t\t\t{ name: '$dataItems',        src: 'Items.json'        },\r\n\t\t\t{ name: '$dataWeapons',      src: 'MechWeapons.json'      },\r\n\t\t\t{ name: '$dataArmors',       src: 'Armors.json'       },\r\n\t\t\t{ name: '$dataEnemies',      src: 'EnemyPilots.json'      },\r\n\t\t\t{ name: '$dataTroops',       src: 'Troops.json'       },\r\n\t\t\t{ name: '$dataStates',       src: 'States.json'       },\r\n\t\t\t{ name: '$dataAnimations',   src: 'Animations.json'   },\r\n\t\t\t{ name: '$dataTilesets',     src: 'Tilesets.json'     },\r\n\t\t\t{ name: '$dataCommonEvents', src: 'CommonEvents.json' },\r\n\t\t\t{ name: '$dataSystem',       src: 'System.json'       },\r\n\t\t\t{ name: '$dataMapInfos',     src: 'MapInfos.json'     },\r\n\t\t];\r\n\t\t\r\n\t\tDataManager.textScriptCache = {};\r\n\t\t\r\n\t\tDataManager.resetTextScriptCache = function(){\r\n\t\t\tDataManager.textScriptCache = {};\r\n\t\t}\r\n\t\t\r\n\t\tDataManager.loadTextScript = function(id) {\r\n\t\t\treturn new Promise(function(resolve, reject){\r\n\t\t\t\tif(!DataManager.textScriptCache[id]){\r\n\t\t\t\t\tvar xhr = new XMLHttpRequest();\r\n\t\t\t\t\tvar url = 'text_scripts/' + id + \".mvs\";\r\n\t\t\t\t\txhr.open('GET', url);\r\n\t\t\t\t\txhr.onload = function() {\r\n\t\t\t\t\t\tif (xhr.status < 400) {\r\n\t\t\t\t\t\t\tDataManager.textScriptCache[id] = xhr.responseText;\r\n\t\t\t\t\t\t\tresolve(xhr.responseText);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\txhr.onerror = reject;\r\n\t\t\t\t\txhr.send();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresolve(DataManager.textScriptCache[id]);\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t});\t\t\t\r\n\t\t};\r\n\t\tStorageManager.localFileDirectoryPath = function() {\r\n\t\t\tvar path = __webpack_require__(/*! path */ \"path\");\r\n\r\n\t\t\r\n\t\t\tif(process.versions[\"nw-flavor\"] === \"sdk\"){\r\n\t\t\treturn getBase()+\"save/\";\r\n\t\t\t} else {\r\n\t\t\t\tvar base = path.dirname(process.execPath);\r\n\t\t\t\treturn path.join(base, '/../save/');\r\n\t\t\t\t\r\n\t\t\t}\t\t\t\r\n\t\t};\r\n\t\t\r\n\t\tDataManager.interpretTextScript = function(scriptId) {\r\n\t\t\tvar _this = this;\r\n\t\t\tvar functionDefs = {};\r\n\t\t\tvar defineDefs = {};\r\n\t\t\tvar currentTxtLayout = {\r\n\t\t\t\tbg: 0,\r\n\t\t\t\tpos: 2\r\n\t\t\t};\t\t\t\r\n\t\t\t\r\n\t\t\tfunction handleUpgradedPluginCommand(command, eventList, indent, params){\r\n\t\t\t\teventList.push({\r\n\t\t\t\t\tcode: 356,\r\n\t\t\t\t\tindent: indent,\r\n\t\t\t\t\tparameters: [command+\" \"+params.join(\" \")]\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar pluginCommandNames = {\r\n\t\t\t\tSRPGBattle: true,\r\n\t\t\t\tIntermission: true,\r\n\t\t\t\tUnlockUnit: true,\r\n\t\t\t\tunlockUnit: true,\r\n\t\t\t\tassignUnit: true,\r\n\t\t\t\tunbindMechPilots: true,\r\n\t\t\t\tlockUnit: true,\r\n\t\t\t\tSetLevel: true,\r\n\t\t\t\tsetLevel: true,\r\n\t\t\t\taddKills: true,\r\n\t\t\t\taddPP: true,\r\n\t\t\t\taddExp: true,\r\n\t\t\t\tsetStageSong: true,\r\n\t\t\t\tsetSpecialTheme: true,\r\n\t\t\t\tclearSpecialTheme: true,\r\n\t\t\t\taddItem: true,\r\n\t\t\t\taddAllItems: true,\r\n\t\t\t\tremoveItem: true,\r\n\t\t\t\taddItemToHolder: true,\r\n\t\t\t\tremoveItemFromHolder: true,\r\n\t\t\t\taddEquipable: true,\r\n\t\t\t\taddEquipableToHolder: true,\r\n\t\t\t\tremoveEquipableFromHolder: true,\r\n\t\t\t\tfocusActor: true,\r\n\t\t\t\tfocusEvent: true,\r\n\t\t\t\tclearDeployInfo: true,\r\n\t\t\t\tpopulateDeployList: true,\r\n\t\t\t\tsetDeployCount: true,\r\n\t\t\t\tsetMinDeployCount: true,\r\n\t\t\t\tsetShipDeployCount: true,\r\n\t\t\t\tassignSlot: true,\r\n\t\t\t\tassignSlotFromMech: true,\r\n\t\t\t\tassignSlotSub: true,\r\n\t\t\t\tassignShipSlot: true,\r\n\t\t\t\tlockDeploySlot: true,\r\n\t\t\t\tunlockDeploySlot: true,\r\n\t\t\t\tdisableDeploySlot: true, \r\n\t\t\t\tenableDeploySlot: true,\r\n\t\t\t\tlockShipDeploySlot: true,\r\n\t\t\t\tunlockShipDeploySlot: true,\r\n\t\t\t\tsetSRWBattleBg: true,\r\n\t\t\t\tsetSRWBattleParallax1: true,\r\n\t\t\t\tsetSRWBattleParallax2: true,\r\n\t\t\t\tsetSRWBattleParallax3: true,\r\n\t\t\t\tsetSRWBattleParallax3: true,\r\n\t\t\t\tsetSRWBattleFloor: true,\r\n\t\t\t\tsetSRWBattleSkybox: true,\r\n\t\t\t\tsetSRWSkyBattleBg: true,\r\n\t\t\t\tsetSRWSkyBattleParallax1: true,\r\n\t\t\t\tsetSRWDefaultBattleEnv: true,\r\n\t\t\t\tsetDefaultBattleEnv: true,\r\n\t\t\t\tsetSkyBattleEnv: true,\r\n\t\t\t\tsetSuperStateBattleEnv: true,\r\n\t\t\t\tsetRegionBattleEnv: true,\r\n\t\t\t\tsetRegionSkyBattleEnv: true,\r\n\t\t\t\tsetRegionSuperStateBattleEnv: true,\r\n\t\t\t\tresetRegionAttributes: true,\r\n\t\t\t\taddRegionAttributes: true,\r\n\t\t\t\taddMapHighlight: true,\r\n\t\t\t\tremoveMapHighlight: true,\r\n\t\t\t\taddMapRegionHighlight: true,\r\n\t\t\t\tremoveMapRegionHighlight: true,\r\n\t\t\t\tsetEnemyUpgradeLevel: true,\r\n\t\t\t\tsetMechUpgradeLevel: true,\r\n\t\t\t\tsetPilotRelationship: true,\r\n\t\t\t\taddPersuadeOption: true,\r\n\t\t\t\tremovePersuadeOption: true,\r\n\t\t\t\tdeployShips: true,\r\n\t\t\t\tdeployAll: true,\r\n\t\t\t\tdeployAllLocked: true,\r\n\t\t\t\tdeployAllUnLocked: true,\r\n\t\t\t\tdeployActor: true,\r\n\t\t\t\tdeploySlot: true,\r\n\t\t\t\tredeployActor: true,\r\n\t\t\t\tmoveEventToPoint: true,\r\n\t\t\t\tstoreEventPoint: true,\r\n\t\t\t\tmoveEventToStoredPoint: true,\r\n\t\t\t\tmoveActorToPoint: true,\r\n\t\t\t\tmoveEventToEvent: true,\r\n\t\t\t\tmoveActorToEvent: true,\r\n\t\t\t\tmoveEventToActor: true,\r\n\t\t\t\tmoveActorToActor: true,\r\n\t\t\t\tsetEventFlying: true,\r\n\t\t\t\tsetEventLanded: true,\r\n\t\t\t\tenableFaction: true,\r\n\t\t\t\tdisableFaction: true,\r\n\t\t\t\tsetFactionAggro: true,\r\n\t\t\t\tclearFactionAggro: true,\r\n\t\t\t\ttransformEvent: true,\r\n\t\t\t\tcombineEvent: true,\r\n\t\t\t\tsplitEvent: true,\r\n\t\t\t\ttransformActor: true,\r\n\t\t\t\ttransformActorDirect: true,\r\n\t\t\t\tcombineActor: true,\r\n\t\t\t\tsplitActor: true,\r\n\t\t\t\tseparateActor: true,\r\n\t\t\t\tmakeActorMainTwin: true,\r\n\t\t\t\tpreventActorDeathQuote: true,\r\n\t\t\t\tsetSaveDisplayName: true,\r\n\t\t\t\tsetStageTextId: true,\r\n\t\t\t\tsetEventWill: true,\r\n\t\t\t\tsetEventWillOverflow: true,\r\n\t\t\t\tsetEventUntargetable: true,\r\n\t\t\t\tsetEventTargetable: true,\r\n\t\t\t\tsetActorWill: true,\r\n\t\t\t\tmakeActorAI: true,\r\n\t\t\t\tmakeActorControllable: true,\r\n\t\t\t\tsetActorEssential: true,\r\n\t\t\t\tsetActorNonEssential: true,\r\n\t\t\t\tsetEventMapCooldown: true,\r\n\t\t\t\tunlockMechWeapon: true,\r\n\t\t\t\tlockMechWeapon: true,\r\n\t\t\t\tsetUnlockedUpgradeLevel: true,\r\n\t\t\t\tsetRequiredFUBLevel: true,\r\n\t\t\t\tsetEventCounterAction: true,\r\n\t\t\t\tsetEventAttackAction: true,\r\n\t\t\t\tsetEventBattleMode: true,\r\n\t\t\t\thidePilotAbility: true,\r\n\t\t\t\tlockPilotAbility: true,\r\n\t\t\t\tunlockPilotAbility: true,\r\n\t\t\t\thideMechAbility: true,\r\n\t\t\t\tlockMechAbility: true,\r\n\t\t\t\tunlockMechAbility: true,\r\n\t\t\t\tlockTransformation: true,\r\n\t\t\t\tlockAllTransformations: true,\r\n\t\t\t\tunlockTransformation: true,\r\n\t\t\t\tunlockAllTransformations: true,\r\n\t\t\t\tsetFaceAlias: true,\r\n\t\t\t\tsetCharacterIndexAlias: true,\r\n\t\t\t\tsetPilotAbilityUpgrade: true,\r\n\t\t\t\tsetMechAbilityUpgrade: true,\r\n\t\t\t\tclearTile: true,\r\n\t\t\t\tclearAdjacentToTile: true,\r\n\t\t\t\tclearAdjacentToEvent: true,\r\n\t\t\t\tclearAdjacentToActor: true,\r\n\t\t\t\tstopSkipping: true,\r\n\t\t\t\tsetEventAIFlags: true,\r\n\t\t\t\tshowTargetingReticule: true,\r\n\t\t\t\tsetFreeEventCam: true,\r\n\t\t\t\tclearFreeEventCam: true,\r\n\t\t\t\tsetTerrainMoveCosts: true,\r\n\t\t\t\tsetCloudScrollImage: true,\r\n\t\t\t\tsetCloudScrollFrequency: true,\r\n\t\t\t\tsetCloudScrollXSpeed: true,\r\n\t\t\t\tsetCloudScrollYSpeed: true,\r\n\t\t\t\tsetDefaultFocusEvent: true,\r\n\t\t\t\tsetDefaultFocusActor: true,\r\n\t\t\t\tlockCameraToCursor: true,\r\n\t\t\t\tunlockCameraFromCursor: true,\r\n\t\t\t\tsetAllyWillCap: true,\r\n\t\t\t\tclearAllyWillCap: true,\r\n\t\t\t\tsetEnemyWillCap: true,\r\n\t\t\t\tclearEnemyWillCap: true,\r\n\t\t\t\tsetTerrainSolidForEnemy: true,\r\n\t\t\t\tsetTerrainPassableForEnemy: true,\r\n\t\t\t\tdisableVariablePortraits: true,\r\n\t\t\t\tenableVariablePortraits: true,\r\n\t\t\t\tlockCombine: true,\r\n\t\t\t\tlockAllCombines: true,\r\n\t\t\t\tunlockCombine: true,\r\n\t\t\t\tunlockAllCombines: true,\r\n\t\t\t\tsetActorSong: true, \r\n\t\t\t\tsetActorWeaponSong: true,\r\n\t\t\t\trefundMechUpgrades: true,\r\n\t\t\t\trefundPilotPP: true,\r\n\t\t\t\taddFunds: true,\r\n\t\t\t\tsetEventHP: true,\r\n\t\t\t\tsetEventHPPercent: true,\r\n\t\t\t\tsetEventEN: true,\r\n\t\t\t\tsetEventENPercent: true,\r\n\t\t\t\taddSubPilot: true,\r\n\t\t\t\tremoveSubPilot: true,\r\n\t\t\t\tsetPortraitOverlay: true,\r\n\t\t\t\thidePortraitOverlay: true,\r\n\t\t\t\thideAllPortraitOverlays: true,\r\n\t\t\t\tsetLocationHeader: true,\r\n\t\t\t\tclearLocationHeader: true,\r\n\t\t\t\tdeployMech: true,\r\n\t\t\t\tsetCustomSpirit: true, \r\n\t\t\t\tclearCustomSpirit: true,\r\n\t\t\t\tawardFavPoints: true,\r\n\t\t\t\tdeployItemBox: true,\r\n\t\t\t\tcollectItemsBoxes: true\r\n\t\t\t}\r\n\t\t\tvar scriptCommands = {\r\n\t\t\t\tfadeIn: function(eventList, indent, params){\r\n\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\tcode: 222,\r\n\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\tparameters: []\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\tfadeOut: function(eventList, indent, params){\r\n\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\tcode: 221,\r\n\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\tparameters: []\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\twait: function(eventList, indent, params){\r\n\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\tcode: 230,\r\n\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\tparameters: [params[0]]\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\tshowBackground: function(eventList, indent, params){\r\n\t\t\t\t\tlet x = 0;\r\n\t\t\t\t\tlet y = 0;\r\n\t\t\t\t\tif(ENGINE_SETTINGS.VN_BG_OFFSET){\r\n\t\t\t\t\t\tx = ENGINE_SETTINGS.VN_BG_OFFSET.x || 0;\r\n\t\t\t\t\t\ty = ENGINE_SETTINGS.VN_BG_OFFSET.y || 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\tcode: 231,\r\n\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\tparameters: [params[0], params[1], 0, 0, x, y, 100, 100, 255, 0]\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\tshowPicture: function(eventList, indent, params){\r\n\t\t\t\t\tlet blendMode = {\r\n\t\t\t\t\t\t\"Normal\": 0,\r\n\t\t\t\t\t\t\"Additive\": 1,\r\n\t\t\t\t\t\t\"Multiply\": 2,\r\n\t\t\t\t\t\t\"Screen\": 3\r\n\t\t\t\t\t}[params[9]] || 0;\r\n\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\tcode: 231,\r\n\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\tparameters: [\r\n\t\t\t\t\t\t\tparams[0] * 1,//pictureID\r\n\t\t\t\t\t\t\tparams[1],//name\r\n\t\t\t\t\t\t\tparams[2] == \"Center\" ? 1 : 0,//0, origin\r\n\t\t\t\t\t\t\tparams[3] == \"Direct\" ? 0 : 1,//0, direct designation\r\n\t\t\t\t\t\t\tparams[4] * 1,//0, x\r\n\t\t\t\t\t\t\tparams[5] * 1,//0, y\r\n\t\t\t\t\t\t\tparams[6] * 1,//scaleX\r\n\t\t\t\t\t\t\tparams[7] * 1,//scaleY\r\n\t\t\t\t\t\t\tparams[8] * 1,//opacity\r\n\t\t\t\t\t\t\tblendMode,//blend mode\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\thideBackground: function(eventList, indent, params){\r\n\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\tcode: 235,\r\n\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\tparameters: [params[0]]\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\terasePicture: function(eventList, indent, params){\r\n\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\tcode: 235,\r\n\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\tparameters: [params[0]]\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\tmovePicture: function(eventList, indent, params){\r\n\t\t\t\t\tlet blendMode = {\r\n\t\t\t\t\t\t\"Normal\": 0,\r\n\t\t\t\t\t\t\"Additive\": 1,\r\n\t\t\t\t\t\t\"Multiply\": 2,\r\n\t\t\t\t\t\t\"Screen\": 3\r\n\t\t\t\t\t}[params[8]] || 0;\r\n\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\tcode: 232,\r\n\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\tparameters: [\r\n\t\t\t\t\t\t\tparams[0] * 1,//pictureID\r\n\t\t\t\t\t\t\tnull,//name\r\n\t\t\t\t\t\t\tparams[1] == \"Center\" ? 1 : 0,//0, origin\r\n\t\t\t\t\t\t\tparams[2] == \"Direct\" ? 0 : 1,//0, direct designation\r\n\t\t\t\t\t\t\tparams[3] * 1,//0, x\r\n\t\t\t\t\t\t\tparams[4] * 1,//0, y\r\n\t\t\t\t\t\t\tparams[5] * 1,//scaleX\r\n\t\t\t\t\t\t\tparams[6] * 1,//scaleY\r\n\t\t\t\t\t\t\tparams[7] * 1,//opacity\r\n\t\t\t\t\t\t\tblendMode,//blend mode,\r\n\t\t\t\t\t\t\tparams[9] * 1,//duration\r\n\t\t\t\t\t\t\tparams[10] == \"wait\" ? 1 : 0,//wait\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\trotatePicture: function(eventList, indent, params){\r\n\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\tcode: 233,\r\n\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\tparameters: [params[0] * 1, params[1] * 1]\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\ttintPicture: function(eventList, indent, params){\r\n\t\t\t\t\tlet colorArray = params[1].split(\",\");\r\n\t\t\t\t\tlet tmp = [];\r\n\t\t\t\t\tcolorArray.forEach(function(val){\r\n\t\t\t\t\t\ttmp.push(val * 1);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tcolorArray = tmp;\r\n\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\tcode: 234,\r\n\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\tparameters: [\r\n\t\t\t\t\t\t\tparams[0] * 1, //picture id\r\n\t\t\t\t\t\t\tcolorArray, //tone\r\n\t\t\t\t\t\t\tparams[2] * 1, //duration\r\n\t\t\t\t\t\t\tparams[3] == \"wait\" ? 1 : 0,//wait\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\tplaySE: function(eventList, indent, params){\r\n\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\tcode: 250,\r\n\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\tparameters: [{name: params[0], volume: params[1] || 90, pitch: params[2] || 100, pan: params[3] || 0}]\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\tplayBGM: function(eventList, indent, params){\r\n\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\tcode: 241,\r\n\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\tparameters: [{name: params[0], volume: params[1] || 90, pitch: params[2] || 100, pan: params[3] || 0}]\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\tfadeOutBGM: function(eventList, indent, params){\r\n\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\tcode: 242,\r\n\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\tparameters: [params[0]*1]\r\n\t\t\t\t\t});\r\n\t\t\t\t}, \r\n\t\t\t\tplayBGS: function(eventList, indent, params){\r\n\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\tcode: 245,\r\n\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\tparameters: [{name: params[0], volume: params[1] || 90, pitch: params[2] || 100, pan: params[3] || 0}]\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\tfadeOutBGS: function(eventList, indent, params){\r\n\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\tcode: 246,\r\n\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\tparameters: [params[0]*1]\r\n\t\t\t\t\t});\r\n\t\t\t\t}, \r\n\t\t\t\tsetVar: function(eventList, indent, params){\r\n\t\t\t\t\tvar value = params[1];\r\n\t\t\t\t\tvar type;\r\n\t\t\t\t\tif(Number.isInteger(value)){\r\n\t\t\t\t\t\tvalue = value * 1;\r\n\t\t\t\t\t\ttype = 0;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttype = 4;\r\n\t\t\t\t\t}\r\n\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\tcode: 122,\r\n\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\tparameters: [params[0]*1,params[0]*1, 0, type, value]\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\taddVar: function(eventList, indent, params){\r\n\t\t\t\t\tvar value = params[1] * 1;\r\n\t\t\t\t\tvar type;\r\n\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\tcode: 122,\r\n\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\tparameters: [params[0]*1,params[0]*1, 1, 0, value]\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\tsubVar: function(eventList, indent, params){\r\n\t\t\t\t\tvar value = params[1] * 1;\r\n\t\t\t\t\tvar type;\r\n\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\tcode: 122,\r\n\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\tparameters: [params[0]*1,params[0]*1, 2, 0, value]\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\tmulVar: function(eventList, indent, params){\r\n\t\t\t\t\tvar value = params[1] * 1;\r\n\t\t\t\t\tvar type;\r\n\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\tcode: 122,\r\n\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\tparameters: [params[0]*1,params[0]*1, 3, 0, value]\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\tdivVar: function(eventList, indent, params){\r\n\t\t\t\t\tvar value = params[1] * 1;\r\n\t\t\t\t\tvar type;\r\n\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\tcode: 122,\r\n\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\tparameters: [params[0]*1,params[0]*1, 4, 0, value]\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\tmodVar: function(eventList, indent, params){\r\n\t\t\t\t\tvar value = params[1] * 1;\r\n\t\t\t\t\tvar type;\r\n\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\tcode: 122,\r\n\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\tparameters: [params[0]*1,params[0]*1, 5, 0, value]\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\tsetSwitch: function(eventList, indent, params){\r\n\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\tcode: 121,\r\n\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\tparameters: [params[0]*1,params[0]*1,String(params[1]).trim() == \"ON\" ? 0 : 1]\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\tpluginCmd: function(eventList, indent, params){\t\t\t\t\r\n\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\tcode: 356,\r\n\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\tparameters: [params.join(\" \")]\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\ttxtLayout: function(eventList, indent, params){\t\t\t\t\r\n\t\t\t\t\tcurrentTxtLayout.bg = {\r\n\t\t\t\t\t\twindow: 0,\r\n\t\t\t\t\t\tdim: 1,\r\n\t\t\t\t\t\ttransparent: 2\r\n\t\t\t\t\t}[params[0].toLowerCase()];\r\n\t\t\t\t\tcurrentTxtLayout.pos = {\r\n\t\t\t\t\t\ttop: 0,\r\n\t\t\t\t\t\tmiddle: 1,\r\n\t\t\t\t\t\tbottom: 2\r\n\t\t\t\t\t}[params[1].toLowerCase()];\r\n\t\t\t\t},\r\n\t\t\t\tgameOver: function(eventList, indent, params){\t\t\t\t\r\n\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\tcode: 353,\r\n\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\tparameters: []\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\tshakeScreen: function(eventList, indent, params){\t\t\t\t\r\n\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\tcode: 225,\r\n\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\tparameters: [params[0]*1,params[1]*1,params[2]*1,String(params[3]).trim() == \"wait\"]\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\tshowAnimation: function(eventList, indent, params){\t\t\t\t\r\n\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\tcode: 212,\r\n\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\tparameters: [params[0]*1,params[1]*1,String(params[2]).trim() == \"wait\"]\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\ttintScreen: function(eventList, indent, params){\t\r\n\t\t\t\t\tvar colorArray = params[0].split(\",\");\r\n\t\t\t\t\tvar tmp = [];\r\n\t\t\t\t\tcolorArray.forEach(function(val){\r\n\t\t\t\t\t\ttmp.push(val * 1);\r\n\t\t\t\t\t});\r\n\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\tcode: 223,\r\n\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\tparameters: [tmp,params[1]*1,String(params[2]).trim() == \"wait\"]\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\tlabel: function(eventList, indent, params){\t\t\t\t\r\n\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\tcode: 118,\r\n\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\tparameters: [String(params[0]).trim()]\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\tjumpLabel: function(eventList, indent, params){\t\t\t\t\r\n\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\tcode: 119,\r\n\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\tparameters: [String(params[0]).trim()]\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\tchangePartyMember: function(eventList, indent, params){\t\t\t\t\r\n\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\tcode: 129,\r\n\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\tparameters: [params[1]*1, String(params[0]).trim().toLowerCase() == \"add\" ? 0 : 1]\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\twarp: function(eventList, indent, params){\t\t\t\t\r\n\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\tcode: 201,\r\n\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\tparameters: [0, params[0]*1, params[1]*1, params[2]*1]\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\tgeneric: function(eventList, indent, params){\r\n\t\t\t\t\tvar params = JSON.parse(JSON.stringify(params));\r\n\t\t\t\t\tvar id = params.shift();\r\n\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\tcode: id,\r\n\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\tparameters: params\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tfunction getLineType(line){\r\n\t\t\t\tline = line.trim();\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\ttype: \"txt\",\r\n\t\t\t\t\tdata: []\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(line == \"{\"){\r\n\t\t\t\t\tresult.type = \"script_start\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(line == \"[script]\"){\r\n\t\t\t\t\tresult.type = \"script_start_explicit\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(line == \"[/script]\"){\r\n\t\t\t\t\tresult.type = \"script_end_explicit\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(line == \"/*\"){\r\n\t\t\t\t\tresult.type = \"comment_start\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(line == \"*/\"){\r\n\t\t\t\t\tresult.type = \"comment_end\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tvar subMatch = /function (.*)\\{/.exec(line);\r\n\t\t\t\tif(subMatch){\r\n\t\t\t\t\tresult.type = \"function\";\t\t\t\t\t\r\n\t\t\t\t\tresult.data = [subMatch[1].trim()];\r\n\t\t\t\t}\r\n\t\t\t\tif(line == \"}\"){\r\n\t\t\t\t\tresult.type = \"function_end\";\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar moveMatch = /move (.*?) (.*?)\\{/.exec(line);\r\n\t\t\t\tif(moveMatch){\r\n\t\t\t\t\tresult.type = \"move_start\";\r\n\t\t\t\t\tresult.data = [moveMatch[1].trim(), moveMatch[2].trim() == \"wait\" ? true : false];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar callMatch = /call (.*)\\((.*)\\)/.exec(line);\r\n\t\t\t\tif(callMatch){\r\n\t\t\t\t\tresult.type = \"function_call\";\r\n\t\t\t\t\tvar regex = new RegExp(\"(?<!\\\\\\\\),\");\r\n\t\t\t\t\tvar args = callMatch[2].split(regex);\r\n\t\t\t\t\tvar tmp = [];\r\n\t\t\t\t\targs.forEach(function(arg){\r\n\t\t\t\t\t\ttmp.push(String(arg).trim());\r\n\t\t\t\t\t});\r\n\t\t\t\t\tresult.data = [callMatch[1].trim(), tmp];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar incMatch = /\\#include (.*)/.exec(line);\r\n\t\t\t\tif(incMatch){\r\n\t\t\t\t\tresult.type = \"include\";\t\t\t\t\t\r\n\t\t\t\t\tresult.data = [incMatch[1].trim()];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar defineMatch = /\\#define (\\<.*\\>) (.*)/.exec(line);\r\n\t\t\t\tif(defineMatch){\r\n\t\t\t\t\tresult.type = \"define\";\t\t\t\t\t\r\n\t\t\t\t\tresult.data = [defineMatch[1].trim(), defineMatch[2].trim()];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(line.indexOf(\"*\") == 0){\r\n\t\t\t\t\tresult.type = \"txt_start\",\r\n\t\t\t\t\tline = line.replace(/^\\*/,\"\");\r\n\t\t\t\t\tresult.data = line.split(\" \");\r\n\t\t\t\t}\r\n\t\t\t\tif(line == \"[choice]\"){\r\n\t\t\t\t\tresult.type = \"choice_start\";\r\n\t\t\t\t}\r\n\t\t\t\tif(line == \"[/choice]\"){\r\n\t\t\t\t\tresult.type = \"choice_end\";\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar conditionalMatch = /\\[if var(.*?)([\\=\\=|\\<|\\>|\\>\\=|\\<\\=|\\!\\=]+)(.*?)\\]/.exec(line);\r\n\t\t\t\tif(conditionalMatch){\r\n\t\t\t\t\tresult.type = \"conditional_start\";\r\n\t\t\t\t\tvar params = [];\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar compared = conditionalMatch[3].trim();\r\n\t\t\t\t\tvar comparison = conditionalMatch[2].trim();\r\n\t\t\t\t\tvar comparisonId;\r\n\t\t\t\t\tswitch (comparison) {\r\n\t\t\t\t\t\tcase \"==\":  // Equal to\r\n\t\t\t\t\t\t\tcomparisonId = 0;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \">=\":  // Greater than or Equal to\r\n\t\t\t\t\t\t\tcomparisonId = 1;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"<=\":  // Less than or Equal to\r\n\t\t\t\t\t\t\tcomparisonId = 2;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \">\":  // Greater than\r\n\t\t\t\t\t\t\tcomparisonId = 3;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"<\":  // Less than\r\n\t\t\t\t\t\t\tcomparisonId = 4;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"!=\":  // Not Equal to\r\n\t\t\t\t\t\t\tcomparisonId = 5;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar varId = conditionalMatch[1].trim();\t\t\t\t\t\t\r\n\t\t\t\t\tparams = [1, varId, 0, compared * 1, comparisonId];\t\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tresult.data = params;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar conditionalSwitchMatch = /\\[if switch(.*?) (.*)\\]/.exec(line);\r\n\t\t\t\tif(conditionalSwitchMatch){\r\n\t\t\t\t\tresult.type = \"conditional_start\";\r\n\t\t\t\t\tvar params = [];\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tparams = [0, conditionalSwitchMatch[1].trim(), conditionalSwitchMatch[2].trim() == \"ON\" ?  0 : 1];\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tresult.data = params;\r\n\t\t\t\t}\t\r\n\r\n\t\t\t\tvar conditionalSwitchMatch = /\\[if script(.*)]/.exec(line);\r\n\t\t\t\tif(conditionalSwitchMatch){\r\n\t\t\t\t\tresult.type = \"conditional_start\";\r\n\t\t\t\t\tvar params = [];\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tparams = [12, conditionalSwitchMatch[1]];\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tresult.data = params;\r\n\t\t\t\t}\t\t\r\n\t\t\t\t\r\n\t\t\t\tif(line == \"[else]\"){\r\n\t\t\t\t\tresult.type = \"else\";\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(line == \"[/if]\"){\r\n\t\t\t\t\tresult.type = \"conditional_end\";\r\n\t\t\t\t}\r\n\t\t\t\tvar entryMatch = /^\\[(\\d)\\](.*)/.exec(line);\r\n\t\t\t\tif(entryMatch){\r\n\t\t\t\t\tresult.type = \"choice_entry\";\r\n\t\t\t\t\tresult.data = [entryMatch[1] - 1, entryMatch[2].trim()];\r\n\t\t\t\t}\r\n\t\t\t\tif(line.indexOf(\"//\") == 0){\r\n\t\t\t\t\tresult.type = \"comment\";\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tvar cmdMatch = /^\\[(.*?)\\:(.*)\\]/.exec(line);\r\n\t\t\t\tif(cmdMatch && cmdMatch.length == 3){\r\n\t\t\t\t\tif(scriptCommands[cmdMatch[1].trim()] || pluginCommandNames[cmdMatch[1].trim()]){\r\n\t\t\t\t\t\tresult.type = \"command\";\r\n\t\t\t\t\t\tvar argString =  cmdMatch[2].trim();\r\n\t\t\t\t\t\tvar scriptTokens = /\\{(.*?)\\}/g.exec(argString);\r\n\t\t\t\t\t\tvar tokenCtr = 0;\r\n\t\t\t\t\t\tvar tokenLookup = {};\r\n\t\t\t\t\t\tif(scriptTokens){\r\n\t\t\t\t\t\t\tscriptTokens.shift();\r\n\t\t\t\t\t\t\tscriptTokens.forEach(function(scriptToken){\r\n\t\t\t\t\t\t\t\tvar regex = new RegExp(scriptToken, \"g\");\r\n\t\t\t\t\t\t\t\ttokenLookup[\"{script_\"+tokenCtr+\"}\"] = scriptToken;\r\n\t\t\t\t\t\t\t\targString = argString.replace(scriptToken, \"script_\"+tokenCtr);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\tvar args = argString.split(\" \");\r\n\t\t\t\t\t\tvar tmp = [];\r\n\t\t\t\t\t\targs.forEach(function(arg){\r\n\t\t\t\t\t\t\tif(tokenLookup[arg]){\r\n\t\t\t\t\t\t\t\ttmp.push(tokenLookup[arg]);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\ttmp.push(arg);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tresult.data = [cmdMatch[1].trim(), tmp];\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfunction processArgTokens(args, line){\r\n\t\t\t\tvar argTokens = line.match(/args\\_(\\d+)/g);\r\n\t\t\t\tif(argTokens){\r\n\t\t\t\t\targTokens.forEach(function(argToken){\r\n\t\t\t\t\t\tvar argIdx = argToken.replace(\"args_\", \"\");\r\n\t\t\t\t\t\tvar regex = new RegExp(argToken, \"g\");\r\n\t\t\t\t\t\tline = line.replace(regex, args[argIdx] || \"\");\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\treturn line;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfunction processDefineTokens(line){\r\n\t\t\t\tvar defineTokens = line.match(/(<.*?>)/g);\r\n\t\t\t\tif(defineTokens){\r\n\t\t\t\t\tdefineTokens.forEach(function(token){\r\n\t\t\t\t\t\tif(defineDefs[token]){\r\n\t\t\t\t\t\t\tvar regex = new RegExp(token, \"g\");\r\n\t\t\t\t\t\t\tline = line.replace(regex, defineDefs[token]);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t//console.log(\"Unknown define '\"+token+\"', did you forget an include?\");\r\n\t\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\treturn line;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfunction processVarTokens(line){\r\n\t\t\t\tvar defineTokens = line.match(/(\\|.*?\\|)/g);\r\n\t\t\t\tif(defineTokens){\r\n\t\t\t\t\tdefineTokens.forEach(function(token){\r\n\t\t\t\t\t\tvar originalToken = token;\r\n\t\t\t\t\t\ttoken = token.replace(/^\\|/, \"<\");\r\n\t\t\t\t\t\ttoken = token.replace(/\\|$/, \">\");\r\n\t\t\t\t\t\tif(defineDefs[token]){\r\n\t\t\t\t\t\t\tvar regex = new RegExp(originalToken, \"g\");\r\n\t\t\t\t\t\t\tvar value = $gameVariables.value(defineDefs[token]);\r\n\t\t\t\t\t\t\tline = line.replace(regex, value);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t//console.log(\"Unknown define '\"+token+\"', did you forget an include?\");\r\n\t\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\treturn line;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfunction processBlock(contentParts, indent, args, isInclude){\r\n\t\t\t\tif(!args){\r\n\t\t\t\t\targs = [];\r\n\t\t\t\t}\r\n\t\t\t\tvar eventList = [];\r\n\t\t\t\tif(indent > 10){\r\n\t\t\t\t\treturn eventList;\r\n\t\t\t\t}\r\n\t\t\t\tfor(var i = 0; i < contentParts.length; i++){\r\n\t\t\t\t\tvar line = contentParts[i];\t\t\t\t\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\tline = processArgTokens(args, line);\r\n\t\t\t\t\tline = processDefineTokens(line);\r\n\t\t\t\t\tline = processVarTokens(line);\r\n\t\t\t\t\tvar lineType = getLineType(line);\r\n\t\t\t\t\tif(isInclude && lineType.type != \"function\" && lineType.type != \"define\"){\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t} \r\n\t\t\t\t\t\r\n\t\t\t\t\tif(lineType.type == \"define\"){\r\n\t\t\t\t\t\tif(defineDefs[lineType.data[0]]){\r\n\t\t\t\t\t\t\tconsole.log(lineType.data[0]+\" was redefined!\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tdefineDefs[lineType.data[0]] = lineType.data[1];\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t} else if(lineType.type == \"function_call\"){\r\n\t\t\t\t\t\tif(functionDefs[lineType.data[0]]){\r\n\t\t\t\t\t\t\teventList = eventList.concat(processBlock(functionDefs[lineType.data[0]], indent, lineType.data[1]));\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tconsole.log(\"Attempted to call unknown function '\"+lineType.data[0]+\"'\");\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\t\r\n\t\t\t\t\t}else if(lineType.type == \"function\"){\r\n\t\t\t\t\t\tvar functionContent = [];\r\n\t\t\t\t\t\tvar depth = 0;\r\n\t\t\t\t\t\ti++;\r\n\t\t\t\t\t\tvar readingScriptBlock = false;\r\n\t\t\t\t\t\twhile(i < contentParts.length && (getLineType(contentParts[i]).type != \"function_end\" || depth > 0 || readingScriptBlock)){\r\n\t\t\t\t\t\t\tlet lineType = getLineType(contentParts[i]).type;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(lineType == \"script_start_explicit\"){\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\treadingScriptBlock = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(lineType == \"script_end_explicit\"){\r\n\t\t\t\t\t\t\t\treadingScriptBlock = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(!readingScriptBlock){\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif(lineType == \"function_end\"){\r\n\t\t\t\t\t\t\t\t\tdepth--;\t\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif(lineType == \"function\"){\r\n\t\t\t\t\t\t\t\t\tdepth++;\t\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif(lineType == \"script_start\"){\r\n\t\t\t\t\t\t\t\t\tdepth++;\t\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif(lineType == \"move_start\"){\r\n\t\t\t\t\t\t\t\t\tdepth++;\t\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tfunctionContent.push(contentParts[i]);\r\n\t\t\t\t\t\t\ti++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(i < contentParts.length){\r\n\t\t\t\t\t\t\ti--;//Correct for potential overread\r\n\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\tif(functionDefs[lineType.data[0]]){\r\n\t\t\t\t\t\t\tconsole.log(\"Function \"+lineType.data[0]+\" is defined twice and was overwritten!\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfunctionDefs[lineType.data[0]] = functionContent;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t} else if(lineType.type == \"move_start\"){\r\n\t\t\t\t\t\tvar moveCodes = {\r\n\t\t\t\t\t\t\t\"end\": 0,\r\n\t\t\t\t\t\t\t\"move down\": 1,\r\n\t\t\t\t\t\t\t\"move left\": 2,\r\n\t\t\t\t\t\t\t\"move right\": 3,\r\n\t\t\t\t\t\t\t\"move up\": 4,\r\n\t\t\t\t\t\t\t\"move lower left\": 5,\r\n\t\t\t\t\t\t\t\"move lower right\"      : 6,\r\n\t\t\t\t\t\t\t\"move upper left\"      : 7,\r\n\t\t\t\t\t\t\t\"move upper right\"      : 8,\r\n\t\t\t\t\t\t\t\"move at random\"      : 9,\r\n\t\t\t\t\t\t\t\"move toward player\"      : 10,\r\n\t\t\t\t\t\t\t\"move away from player\"         : 11,\r\n\t\t\t\t\t\t\t\"move 1 step forward\"      : 12,\r\n\t\t\t\t\t\t\t\"move 1 step backward\"     : 13,\r\n\t\t\t\t\t\t\t\"jump\"              : 14,\r\n\t\t\t\t\t\t\t\"wait\"              : 15,\r\n\t\t\t\t\t\t\t\"turn down\"         : 16,\r\n\t\t\t\t\t\t\t\"turn left\"         : 17,\r\n\t\t\t\t\t\t\t\"turn right\"      : 18,\r\n\t\t\t\t\t\t\t\"turn up\"           : 19,\r\n\t\t\t\t\t\t\t\"turn 90 right\"        : 20,\r\n\t\t\t\t\t\t\t\"turn 90 left\"        : 21,\r\n\t\t\t\t\t\t\t\"turn 180\"       : 22,\r\n\t\t\t\t\t\t\t\"turn 90 right or left\"      : 23,\r\n\t\t\t\t\t\t\t\"turn at random\"       : 24,\r\n\t\t\t\t\t\t\t\"turn toward player\"       : 25,\r\n\t\t\t\t\t\t\t\"turn away from player\"         : 26,\r\n\t\t\t\t\t\t\t//Game_Character.ROUTE_SWITCH_ON         : 27,\r\n\t\t\t\t\t\t\t//Game_Character.ROUTE_SWITCH_OFF        : 28,\r\n\t\t\t\t\t\t\t\"change speed\"     : 29,\r\n\t\t\t\t\t\t\t//Game_Character.ROUTE_CHANGE_FREQ       : 30,\r\n\t\t\t\t\t\t\t//Game_Character.ROUTE_WALK_ANIME_ON     : 31,\r\n\t\t\t\t\t\t\t//Game_Character.ROUTE_WALK_ANIME_OFF    : 32,\r\n\t\t\t\t\t\t\t//Game_Character.ROUTE_STEP_ANIME_ON     : 33,\r\n\t\t\t\t\t\t\t//Game_Character.ROUTE_STEP_ANIME_OFF    : 34,\r\n\t\t\t\t\t\t\t//Game_Character.ROUTE_DIR_FIX_ON        : 35,\r\n\t\t\t\t\t\t\t//Game_Character.ROUTE_DIR_FIX_OFF       : 36,\r\n\t\t\t\t\t\t\t//Game_Character.ROUTE_THROUGH_ON        : 37,\r\n\t\t\t\t\t\t\t//Game_Character.ROUTE_THROUGH_OFF       : 38,\r\n\t\t\t\t\t\t\t\"transparent on\": 39,\r\n\t\t\t\t\t\t\t\"transparent off\": 38,\r\n\t\t\t\t\t\t\t//Game_Character.ROUTE_CHANGE_IMAGE      : 41,\r\n\t\t\t\t\t\t\t\"change opacity\": 42,\r\n\t\t\t\t\t\t\t//Game_Character.ROUTE_CHANGE_OPACITY    : 42,\r\n\t\t\t\t\t\t\t//Game_Character.ROUTE_CHANGE_BLEND_MODE : 43,\r\n\t\t\t\t\t\t\t//Game_Character.ROUTE_PLAY_SE           : 44,\r\n\t\t\t\t\t\t\t\"route script\": 45,\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tvar eventId = lineType.data[0];\r\n\t\t\t\t\t\tif(eventId == \"cursor\"){\r\n\t\t\t\t\t\t\teventId = -1;\r\n\t\t\t\t\t\t} else if(!/actor\\:.*/.exec(eventId)){\r\n\t\t\t\t\t\t\teventId*=1;\r\n\t\t\t\t\t\t} \r\n\t\t\t\t\t\tvar wait = lineType.data[1];\r\n\t\t\t\t\t\tvar moveList = [];\r\n\t\t\t\t\t\ti++;\r\n\t\t\t\t\t\twhile(i < contentParts.length && getLineType(contentParts[i]).type != \"function_end\"){\r\n\t\t\t\t\t\t\tvar parts = contentParts[i].split(\",\");\r\n\t\t\t\t\t\t\tvar command = parts[0].trim().toLowerCase();\r\n\t\t\t\t\t\t\tvar tmp = [];\r\n\t\t\t\t\t\t\tparts.shift();\r\n\t\t\t\t\t\t\tif(command == \"route script\"){\r\n\t\t\t\t\t\t\t\ttmp = [parts.join(\",\")];\r\n\t\t\t\t\t\t\t} else {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tparts.forEach(function(param){\r\n\t\t\t\t\t\t\t\t\ttmp.push(param * 1);\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(moveCodes[command] != null){\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tmoveList.push({\r\n\t\t\t\t\t\t\t\t\tcode: moveCodes[command],\r\n\t\t\t\t\t\t\t\t\tindent: null,\r\n\t\t\t\t\t\t\t\t\tparameters: tmp\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tconsole.log(\"Invalid move command: \" + contentParts[i]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\ti++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(i < contentParts.length){\r\n\t\t\t\t\t\t\ti--;//Correct for potential overread\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tmoveList.push({\r\n\t\t\t\t\t\t\tcode: moveCodes[\"end\"],\r\n\t\t\t\t\t\t\tindent: null\r\n\t\t\t\t\t\t});\t\r\n\t\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\t\tcode: 205,\r\n\t\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\t\tparameters: [eventId, {\r\n\t\t\t\t\t\t\t\tlist: moveList,\r\n\t\t\t\t\t\t\t\trepeat: false,\r\n\t\t\t\t\t\t\t\tskippable: true,\r\n\t\t\t\t\t\t\t\twait: wait\r\n\t\t\t\t\t\t\t}]\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else if(lineType.type == \"txt_start\"){\r\n\t\t\t\t\t\tvar characterId = String(lineType.data[0]).trim();\r\n\t\t\t\t\t\tvar expressionId = lineType.data[1];\r\n\t\t\t\t\t\tvar skipFocus = (lineType.data[2] || 0) * 1;\r\n\t\t\t\t\t\tvar noNameTranslation = (lineType.data[3] || 0) * 1;\r\n\t\t\t\t\t\tvar name = \"\";\r\n\t\t\t\t\t\tvar faceName = \"\";\r\n\t\t\t\t\t\tvar faceIdx = 0;\r\n\t\t\t\t\t\tif(characterId != \"TEXT\"){\r\n\t\t\t\t\t\t\tvar characterDef = $scriptCharactersLoader.getData()[characterId];\r\n\t\t\t\t\t\t\tif(characterDef){\r\n\t\t\t\t\t\t\t\tif(characterDef.nameVar != -1){\r\n\t\t\t\t\t\t\t\t\tname = \"\\\\V[\"+characterDef.nameVar+\"]\"\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tname = characterId;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tvar expressionInfo;\r\n\t\t\t\t\t\t\t\tif(characterDef.expressions[expressionId]){\r\n\t\t\t\t\t\t\t\t\texpressionInfo = characterDef.expressions[expressionId];\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\texpressionInfo = characterDef.expressions[0]\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif(expressionInfo){\r\n\t\t\t\t\t\t\t\t\tfaceName = expressionInfo.face;\r\n\t\t\t\t\t\t\t\t\tfaceIdx = expressionInfo.index;\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tif(expressionInfo.name){\r\n\t\t\t\t\t\t\t\t\t\tname = expressionInfo.name;\r\n\t\t\t\t\t\t\t\t\t} \r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tvar keyParts = expressionInfo.face.split(\"_\");\r\n\t\t\t\t\t\t\t\t\tkeyParts.pop();\r\n\t\t\t\t\t\t\t\t\tvar faceKey = keyParts.join(\"_\");\r\n\t\t\t\t\t\t\t\t\tif(!noNameTranslation && ENGINE_SETTINGS.variableUnitPortraits && !$gameSystem.disableVariablePortraits){\r\n\t\t\t\t\t\t\t\t\t\tvar substitutionCandidates = ENGINE_SETTINGS.variableUnitPortraits[faceKey];\r\n\t\t\t\t\t\t\t\t\t\tlet active;\r\n\t\t\t\t\t\t\t\t\t\tif(substitutionCandidates){\r\n\t\t\t\t\t\t\t\t\t\t\tsubstitutionCandidates.forEach(function(entry){\r\n\t\t\t\t\t\t\t\t\t\t\t\tif($statCalc.isMechDeployed(entry.deployedId)){\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tactive = entry;\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tif(active && !expressionInfo.name){\r\n\t\t\t\t\t\t\t\t\t\t\tname = $dataClasses[active.deployedId].name;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(!skipFocus && characterDef && characterDef.actorId != null){\r\n\t\t\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\t\t\tcode: 356,\r\n\t\t\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\t\t\tparameters: [\"focusActor \"+characterDef.actorId]\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(!skipFocus && characterDef && characterDef.enemyId != null){\r\n\t\t\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\t\t\tcode: 356,\r\n\t\t\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\t\t\tparameters: [\"focusEnemy \"+characterDef.enemyId]\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\t\tcode: 101,\r\n\t\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\t\tparameters: [faceName, faceIdx, currentTxtLayout.bg, currentTxtLayout.pos]\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\ti++;\r\n\t\t\t\t\t\tif(characterId != \"TEXT\"){\r\n\t\t\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\t\t\tcode: 401,\r\n\t\t\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\t\t\tparameters: [\"\\\\>\"+name]\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\twhile(i < contentParts.length && getLineType(contentParts[i]).type == \"txt\"){\r\n\t\t\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\t\t\tcode: 401,\r\n\t\t\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\t\t\tparameters: [processDefineTokens(processArgTokens(args, contentParts[i].trim()))]\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\ti++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(i < contentParts.length){\r\n\t\t\t\t\t\t\ti--;//Correct for potential overread\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\t\r\n\t\t\t\t\t}else if(lineType.type == \"conditional_start\"){\r\n\t\t\t\t\t\t//var choiceContent = [];\r\n\t\t\t\t\t\tvar stackCount = 0;\r\n\t\t\t\t\t\tvar branches = [];\r\n\t\t\t\t\t\tvar branchContent = {\r\n\t\t\t\t\t\t\t0: [],\r\n\t\t\t\t\t\t\t1: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\ti++;\r\n\t\t\t\t\t\tvar branchIdx = 0;\r\n\t\t\t\t\t\twhile(i < contentParts.length && (getLineType(contentParts[i]).type != \"conditional_end\" || stackCount != 0)){\r\n\t\t\t\t\t\t\tif(getLineType(contentParts[i]).type == \"conditional_start\"){\r\n\t\t\t\t\t\t\t\tstackCount++;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(getLineType(contentParts[i]).type == \"conditional_end\"){\r\n\t\t\t\t\t\t\t\tstackCount--;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(stackCount == 0){\r\n\t\t\t\t\t\t\t\tlet lineInfo = getLineType(contentParts[i]);\r\n\t\t\t\t\t\t\t\tif(lineInfo.type == \"else\"){\r\n\t\t\t\t\t\t\t\t\tbranchIdx = 1;\r\n\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(branchContent[branchIdx]){\r\n\t\t\t\t\t\t\t\tbranchContent[branchIdx].push(contentParts[i]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//choiceContent.push(contentParts[i]);\r\n\t\t\t\t\t\t\ti++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(i < contentParts.length){\r\n\t\t\t\t\t\t\ti--;//Correct for potential overread\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\t\tcode: 111,\r\n\t\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\t\tparameters: lineType.data\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\teventList = eventList.concat(processBlock(branchContent[0], indent+1, args));\r\n\t\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\t\tcode: 0,\r\n\t\t\t\t\t\t\tindent: indent + 1,\r\n\t\t\t\t\t\t\tparameters: []\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tif(branchContent[1].length){\r\n\t\t\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\t\t\tcode: 411,\r\n\t\t\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\t\t\tparameters: []\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\teventList = eventList.concat(processBlock(branchContent[1], indent+1, args));\r\n\t\t\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\t\t\tcode: 0,\r\n\t\t\t\t\t\t\t\tindent: indent + 1,\r\n\t\t\t\t\t\t\t\tparameters: []\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t} \t\t\r\n\t\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\t\tcode: 412,\r\n\t\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\t\tparameters: []\r\n\t\t\t\t\t\t});\t\r\n\t\t\t\t\t\t//processBlock(choiceContent, indent+1);\r\n\t\t\t\t\t} else if(lineType.type == \"choice_start\"){\r\n\t\t\t\t\t\t//var choiceContent = [];\r\n\t\t\t\t\t\tvar stackCount = 0;\r\n\t\t\t\t\t\tvar choiceValues = [];\r\n\t\t\t\t\t\tvar choiceContent = {\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\ti++;\r\n\t\t\t\t\t\tvar currentOptionIdx = -1;\r\n\t\t\t\t\t\twhile(i < contentParts.length && (getLineType(contentParts[i]).type != \"choice_end\" || stackCount != 0)){\r\n\t\t\t\t\t\t\tif(getLineType(contentParts[i]).type == \"choice_start\"){\r\n\t\t\t\t\t\t\t\tstackCount++;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(getLineType(contentParts[i]).type == \"choice_end\"){\r\n\t\t\t\t\t\t\t\tstackCount--;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(stackCount == 0){\r\n\t\t\t\t\t\t\t\tlet lineInfo = getLineType(contentParts[i]);\r\n\t\t\t\t\t\t\t\tif(lineInfo.type == \"choice_entry\"){\r\n\t\t\t\t\t\t\t\t\tchoiceValues[lineInfo.data[0]] = lineInfo.data[1];\r\n\t\t\t\t\t\t\t\t\tchoiceContent[lineInfo.data[0]] = [];\r\n\t\t\t\t\t\t\t\t\tcurrentOptionIdx = lineInfo.data[0];\r\n\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(currentOptionIdx != -1 && choiceContent[currentOptionIdx]){\r\n\t\t\t\t\t\t\t\tchoiceContent[currentOptionIdx].push(contentParts[i]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//choiceContent.push(contentParts[i]);\r\n\t\t\t\t\t\t\ti++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(i < contentParts.length){\r\n\t\t\t\t\t\t\ti--;//Correct for potential overread\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\t\tcode: 102,\r\n\t\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\t\tparameters: [choiceValues, 1, 0, 1, 1]\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tfor(var j = 0; j < choiceValues.length; j++){\r\n\t\t\t\t\t\t\tif(choiceValues[j]){\r\n\t\t\t\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\t\t\t\tcode: 402,\r\n\t\t\t\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\t\t\t\tparameters: [j, choiceValues[j]]\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\teventList = eventList.concat(processBlock(choiceContent[j], indent+1, args));\r\n\t\t\t\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\t\t\t\tcode: 0,\r\n\t\t\t\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\t\t\t\tparameters: []\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//processBlock(choiceContent, indent+1);\r\n\t\t\t\t\t} else if(lineType.type == \"comment_start\"){\r\n\t\t\t\t\t\twhile(i < contentParts.length && getLineType(contentParts[i]).type != \"comment_end\"){\r\n\t\t\t\t\t\t\ti++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(i < contentParts.length){\r\n\t\t\t\t\t\t\ti--;//Correct for potential overread\r\n\t\t\t\t\t\t}\t\r\n\t\t\t\t\t}  else if(lineType.type == \"script_start\"){\r\n\t\t\t\t\t\tvar scriptContent = [];\r\n\t\t\t\t\t\ti++;\r\n\t\t\t\t\t\twhile(i < contentParts.length && getLineType(contentParts[i]).type != \"function_end\"){\r\n\t\t\t\t\t\t\tscriptContent.push(contentParts[i]);\r\n\t\t\t\t\t\t\ti++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(i < contentParts.length){\r\n\t\t\t\t\t\t\ti--;//Correct for potential overread\r\n\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\tvar scriptStart = scriptContent.shift();\r\n\t\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\t\tcode: 355,\r\n\t\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\t\tparameters: [scriptStart]\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tscriptContent.forEach(function(scriptLine){\r\n\t\t\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\t\t\tcode: 655,\r\n\t\t\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\t\t\tparameters: [scriptLine]\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}  else if(lineType.type == \"script_start_explicit\"){\r\n\t\t\t\t\t\tvar scriptContent = [];\r\n\t\t\t\t\t\ti++;\r\n\t\t\t\t\t\twhile(i < contentParts.length && getLineType(contentParts[i]).type != \"script_end_explicit\"){\r\n\t\t\t\t\t\t\tscriptContent.push(contentParts[i]);\r\n\t\t\t\t\t\t\ti++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(i < contentParts.length){\r\n\t\t\t\t\t\t\ti--;//Correct for potential overread\r\n\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\tvar scriptStart = scriptContent.shift();\r\n\t\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\t\tcode: 355,\r\n\t\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\t\tparameters: [scriptStart]\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tscriptContent.forEach(function(scriptLine){\r\n\t\t\t\t\t\t\teventList.push({\r\n\t\t\t\t\t\t\t\tcode: 655,\r\n\t\t\t\t\t\t\t\tindent: indent,\r\n\t\t\t\t\t\t\t\tparameters: [scriptLine]\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else if(lineType.type == \"command\"){\r\n\t\t\t\t\t\tif(pluginCommandNames[lineType.data[0]]){\r\n\t\t\t\t\t\t\thandleUpgradedPluginCommand(lineType.data[0], eventList, indent, lineType.data[1]);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tscriptCommands[lineType.data[0]](eventList, indent, lineType.data[1]);\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn eventList;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet resolveLoad;\r\n\t\t\t\r\n\t\t\tDataManager.loadTextScript(scriptId).then(function(content){\t\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tvar contentParts = content.split(\"\\n\");\r\n\t\t\t\t//includes are only processed for the main script file\r\n\t\t\t\tvar includes = [];\r\n\t\t\t\tcontentParts.forEach(function(line){\r\n\t\t\t\t\tvar lineType = getLineType(line);\r\n\t\t\t\t\tif(lineType.type == \"include\"){\r\n\t\t\t\t\t\tincludes.push(lineType.data[0]);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tvar includePromises = [];\r\n\t\t\t\tincludes.forEach(function(include){\r\n\t\t\t\t\tincludePromises.push(new Promise(function(resolve, reject){\r\n\t\t\t\t\t\tDataManager.loadTextScript(include).then(function(content){\r\n\t\t\t\t\t\t\tprocessBlock(content.split(\"\\n\"), 0, [], true);\t\t\r\n\t\t\t\t\t\t\tresolve();\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}));\r\n\t\t\t\t});\r\n\t\t\t\tPromise.all(includePromises).then(function(){\r\n\t\t\t\t\tvar eventList = processBlock(contentParts, 0)\t\t\t\t\t\r\n\t\t\t\t\tresolveLoad(eventList);\t\t\t\t\r\n\t\t\t\t});\t\t\t\t\t\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\treturn new Promise(function(resolve, reject){\r\n\t\t\t\tresolveLoad = resolve;\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t};\t\r\n\r\n\r\n\t\t\t//-----------------------------------------------------------------------------\r\n\t\t\t// ConfigManager\r\n\t\t\t//\r\n\t\t\t// The static class that manages the configuration data\r\n\r\n\t\t\tConfigManager.alwaysDash        = false;\r\n\t\t\tConfigManager.commandRemember   = false;\r\n\t\t\t\r\n\t\t\tConfigManager.padSet = \"xbox\";\r\n\t\t\tConfigManager.disableGrid = false;\r\n\t\t\tConfigManager.mapHints = true;\r\n\t\t\tConfigManager.willIndicator = 0;\r\n\t\t\t\r\n\t\t\tConfigManager.defaultSupport = true;\r\n\t\t\tConfigManager.skipUnitMove = false;\r\n\t\t\t\r\n\t\t\tConfigManager.battleSpeed = 1;\r\n\t\t\t\r\n\t\t\tConfigManager.battleBGM = true;\r\n\t\t\tConfigManager.afterBattleBGM = true;\r\n\r\n\t\t\tObject.defineProperty(ConfigManager, 'bgmVolume', {\r\n\t\t\t\tget: function() {\r\n\t\t\t\t\treturn AudioManager._bgmVolume;\r\n\t\t\t\t},\r\n\t\t\t\tset: function(value) {\r\n\t\t\t\t\tAudioManager.bgmVolume = value;\r\n\t\t\t\t},\r\n\t\t\t\tconfigurable: true\r\n\t\t\t});\r\n\r\n\t\t\tObject.defineProperty(ConfigManager, 'bgsVolume', {\r\n\t\t\t\tget: function() {\r\n\t\t\t\t\treturn AudioManager.bgsVolume;\r\n\t\t\t\t},\r\n\t\t\t\tset: function(value) {\r\n\t\t\t\t\tAudioManager.bgsVolume = value;\r\n\t\t\t\t},\r\n\t\t\t\tconfigurable: true\r\n\t\t\t});\r\n\r\n\t\t\tObject.defineProperty(ConfigManager, 'meVolume', {\r\n\t\t\t\tget: function() {\r\n\t\t\t\t\treturn AudioManager.meVolume;\r\n\t\t\t\t},\r\n\t\t\t\tset: function(value) {\r\n\t\t\t\t\tAudioManager.meVolume = value;\r\n\t\t\t\t},\r\n\t\t\t\tconfigurable: true\r\n\t\t\t});\r\n\r\n\t\t\tObject.defineProperty(ConfigManager, 'seVolume', {\r\n\t\t\t\tget: function() {\r\n\t\t\t\t\treturn AudioManager.seVolume;\r\n\t\t\t\t},\r\n\t\t\t\tset: function(value) {\r\n\t\t\t\t\tAudioManager.seVolume = value;\r\n\t\t\t\t},\r\n\t\t\t\tconfigurable: true\r\n\t\t\t});\r\n\r\n\t\t\tConfigManager.load = function() {\r\n\t\t\t\tvar json;\r\n\t\t\t\tvar config = {};\r\n\t\t\t\ttry {\r\n\t\t\t\t\tjson = StorageManager.load(-1);\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tconsole.error(e);\r\n\t\t\t\t}\r\n\t\t\t\tif (json) {\r\n\t\t\t\t\tconfig = JSON.parse(json);\r\n\t\t\t\t}\r\n\t\t\t\tthis.applyData(config);\r\n\t\t\t};\r\n\r\n\t\t\tConfigManager.save = function() {\r\n\t\t\t\tStorageManager.save(-1, JSON.stringify(this.makeData()));\r\n\t\t\t};\r\n\r\n\t\t\tConfigManager.makeData = function() {\r\n\t\t\t\tvar config = {};\r\n\t\t\t\tconfig.alwaysDash = this.alwaysDash;\r\n\t\t\t\tconfig.commandRemember = this.commandRemember;\r\n\t\t\t\tconfig.bgmVolume = this.bgmVolume;\r\n\t\t\t\tconfig.bgsVolume = this.bgsVolume;\r\n\t\t\t\tconfig.meVolume = this.meVolume;\r\n\t\t\t\tconfig.seVolume = this.seVolume;\r\n\t\t\t\t\r\n\t\t\t\tconfig.padSet = this.padSet;\r\n\t\t\t\tconfig.disableGrid = this.disableGrid;\r\n\t\t\t\tconfig.mapHints = this.mapHints;\r\n\t\t\t\tconfig.willIndicator = this.willIndicator;\r\n\t\t\t\tconfig.defaultSupport = this.defaultSupport;\t\t\r\n\t\t\t\tconfig.skipUnitMove = this.skipUnitMove;\t\r\n\r\n\t\t\t\tconfig.battleSpeed = this.battleSpeed;\r\n\t\t\t\t\r\n\t\t\t\tconfig.battleBGM = this.battleBGM;\r\n\t\t\t\tconfig.afterBattleBGM = this.afterBattleBGM;\r\n\t\t\t\t\r\n\t\t\t\treturn config;\r\n\t\t\t};\r\n\r\n\t\t\tConfigManager.applyData = function(config) {\r\n\t\t\t\tthis.alwaysDash = this.readFlag(config, 'alwaysDash');\r\n\t\t\t\tthis.commandRemember = this.readFlag(config, 'commandRemember');\r\n\t\t\t\tthis.bgmVolume = this.readVolume(config, 'bgmVolume');\r\n\t\t\t\tthis.bgsVolume = this.readVolume(config, 'bgsVolume');\r\n\t\t\t\tthis.meVolume = this.readVolume(config, 'meVolume');\r\n\t\t\t\tthis.seVolume = this.readVolume(config, 'seVolume');\r\n\t\t\t\t\r\n\t\t\t\tthis.padSet = config.padSet || \"xbox\";\r\n\t\t\t\t\r\n\t\t\t\tif(config['disableGrid'] != null){\r\n\t\t\t\t\tthis.disableGrid = this.readFlag(config, 'disableGrid');\r\n\t\t\t\t}\r\n\t\t\t\tif(config['mapHints'] != null){\r\n\t\t\t\t\tthis.mapHints = this.readFlag(config, 'mapHints');\r\n\t\t\t\t}\r\n\t\t\t\tif(config['willIndicator'] != null){\r\n\t\t\t\t\tthis.willIndicator = config.willIndicator || 0;\r\n\t\t\t\t}\r\n\t\t\t\tif(config['defaultSupport'] != null){\r\n\t\t\t\t\tthis.defaultSupport = this.readFlag(config, 'defaultSupport');\r\n\t\t\t\t}\r\n\t\t\t\tif(config['skipUnitMove'] != null){\r\n\t\t\t\t\tthis.skipUnitMove = this.readFlag(config, 'skipUnitMove');\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tthis.battleSpeed = config.battleSpeed || 1;\r\n\t\t\t\t\r\n\t\t\t\tif(config['battleBGM'] != null){\r\n\t\t\t\t\tthis.battleBGM = this.readFlag(config, 'battleBGM');\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(config['afterBattleBGM'] != null){\r\n\t\t\t\t\tthis.afterBattleBGM = this.readFlag(config, 'afterBattleBGM');\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tConfigManager.readFlag = function(config, name) {\r\n\t\t\t\treturn !!config[name];\r\n\t\t\t};\r\n\r\n\t\t\tConfigManager.readVolume = function(config, name) {\r\n\t\t\t\tvar value = config[name];\r\n\t\t\t\tif (value !== undefined) {\r\n\t\t\t\t\treturn Number(value).clamp(0, 100);\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn 100;\r\n\t\t\t\t}\r\n\t\t\t};\t\t\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\tfunction ScriptCharactersLoader(){\t\r\n\t\tvar _this = this;\r\n\t\t_this._sourceFile = \"ScriptCharacters\";\r\n\t\tJSONLoader.call(this);\t\t\r\n\t}\r\n\tScriptCharactersLoader.prototype = Object.create(JSONLoader.prototype);\r\n\tScriptCharactersLoader.prototype.constructor = ScriptCharactersLoader;\r\n\t\r\n\tfunction DeployActionsLoader(){\t\r\n\t\tvar _this = this;\r\n\t\t_this._sourceFile = \"DeployActions\";\r\n\t\tJSONLoader.call(this);\t\t\r\n\t}\r\n\tDeployActionsLoader.prototype = Object.create(JSONLoader.prototype);\r\n\tDeployActionsLoader.prototype.constructor = DeployActionsLoader;\r\n\r\n\t\r\n\t\r\n\t\n\n//# sourceURL=webpack://src/./js/SRW_Core/DataManagement.js?");

/***/ }),

/***/ "./js/SRW Core/Entities.js":
/*!*********************************!*\
  !*** ./js/SRW Core/Entities.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n\t/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n\t\tpatches: patches,\r\n\t}); \r\n\t\r\n\tfunction patches(){};\r\n\t\r\n\tpatches.apply = function(){\r\n\t\t\r\n\t//==================================================================\r\n\t// ●Game_BattlerBase\r\n\t//====================================================================\r\n\t\t// 初期処理\r\n\t\tObject.defineProperties(Game_BattlerBase.prototype, {\r\n\t\t\t// Hit Points\r\n\t\t\thp: { get: function() { \r\n\t\t\t\tif($statCalc.isActorSRWInitialized(this) && this.SRWStats.mech){\r\n\t\t\t\t\treturn this.SRWStats.mech.stats.calculated.currentHP;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn 0; \r\n\t\t\t\t}\t\t\t\r\n\t\t\t}, configurable: true },\r\n\t\t\t// Magic Points\r\n\t\t\tmp: { get: function() { \r\n\t\t\t\tif($statCalc.isActorSRWInitialized(this) && this.SRWStats.mech){\r\n\t\t\t\t\treturn this.SRWStats.mech.stats.calculated.currentEN;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn 0; \r\n\t\t\t\t}\r\n\t\t\t}, configurable: true },\r\n\t\t\t// Tactical Points\r\n\t\t\tmhp: { get: function() { \r\n\t\t\t\tif($statCalc.isActorSRWInitialized(this) && this.SRWStats.mech){\r\n\t\t\t\t\treturn this.SRWStats.mech.stats.calculated.maxHP;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn 0; \r\n\t\t\t\t}\t\t\r\n\t\t\t}, configurable: true },\r\n\t\t\t// Maximum Magic Points\r\n\t\t\tmmp: { get: function() { \r\n\t\t\t\tif($statCalc.isActorSRWInitialized(this) && this.SRWStats.mech){\r\n\t\t\t\t\treturn this.SRWStats.mech.stats.calculated.maxEN;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn 0; \r\n\t\t\t\t}\r\n\t\t\t}, configurable: true },\r\n\t\t\t// ATtacK power\r\n\t\t});\r\n\t\t\r\n\t\tGame_BattlerBase.prototype.refresh = function() {\r\n\t\t\tthis.stateResistSet().forEach(function(stateId) {\r\n\t\t\t\tthis.eraseState(stateId);\r\n\t\t\t}, this);\r\n\t\t\t/*this._hp = this._hp.clamp(0, this.mhp);\r\n\t\t\tthis._mp = this._mp.clamp(0, this.mmp);\r\n\t\t\tthis._tp = this._tp.clamp(0, this.maxTp());*/\r\n\t\t};\r\n\t\t\r\n\t\tGame_BattlerBase.prototype.setHp = function(hp) {\r\n\t\t\tif(!isNaN(hp)){\r\n\t\t\t\tif(hp < 0){\r\n\t\t\t\t\thp = 0;\r\n\t\t\t\t}\r\n\t\t\t\tif($statCalc.isActorSRWInitialized(this) && this.SRWStats.mech){\r\n\t\t\t\t\tthis.SRWStats.mech.stats.calculated.currentHP = hp;\r\n\t\t\t\t}\r\n\t\t\t\tthis._hp = hp;\r\n\t\t\t\tthis.refresh();\r\n\t\t\t} else {\r\n\t\t\t\tconsole.log(\"setHp received invalid value!\");\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tGame_BattlerBase.prototype.setMp = function(mp) {\r\n\t\t\tif(!isNaN(mp)){\r\n\t\t\t\tif(mp < 0){\r\n\t\t\t\t\tmp = 0;\r\n\t\t\t\t}\r\n\t\t\t\tif($statCalc.isActorSRWInitialized(this) && this.SRWStats.mech){\r\n\t\t\t\t\tthis.SRWStats.mech.stats.calculated.currentEN = mp;\r\n\t\t\t\t}\r\n\t\t\t\tthis._mp = mp;\r\n\t\t\t\tthis.refresh();\r\n\t\t\t} else {\r\n\t\t\t\tconsole.log(\"setMp received invalid value!\");\r\n\t\t\t}\t\t\r\n\t\t};\t\r\n\t\t\r\n\t\tvar _SRPG_Game_BattlerBase_initMembers = Game_BattlerBase.prototype.initMembers;\r\n\t\tGame_BattlerBase.prototype.initMembers = function() {\r\n\t\t\t_SRPG_Game_BattlerBase_initMembers.call(this);\r\n\t\t\tthis._srpgTurnEnd = false;\r\n\t\t\tthis._srpgActionTiming = -1; // 0:攻撃側、1:防御側\r\n\t\t};\r\n\r\n\t\t// 移動力を返す（定義は、gameActor, gameEnemyで行う）\r\n\t\tGame_BattlerBase.prototype.srpgMove = function() {\r\n\t\t\treturn 0;\r\n\t\t};\r\n\r\n\t\t// スキル・アイテムの射程を返す（定義は、gameActor, gameEnemyで行う）\r\n\t\tGame_BattlerBase.prototype.srpgSkillRange = function(skill) {\r\n\t\t\treturn 0;\r\n\t\t};\r\n\r\n\t\t// 武器の攻撃射程を返す（定義は、gameActor, gameEnemyで行う）\r\n\t\tGame_BattlerBase.prototype.srpgWeaponRange = function() {\r\n\t\t\treturn 0;\r\n\t\t};\r\n\r\n\t\t// 武器が反撃可能かを返す（定義は、gameActor, gameEnemyで行う）\r\n\t\tGame_BattlerBase.prototype.srpgWeaponCounter = function() {\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t// 通行可能タグを返す（定義は、gameActor, gameEnemyで行う）\r\n\t\tGame_BattlerBase.prototype.srpgThroughTag = function() {\r\n\t\t\treturn 0;\r\n\t\t};\r\n\r\n\t\t//行動終了かどうかを返す\r\n\t\tGame_BattlerBase.prototype.srpgTurnEnd = function() {\r\n\t\t\tif(this.isSubPilot && this.mainPilot){\r\n\t\t\t\treturn this.mainPilot._srpgTurnEnd;\r\n\t\t\t}\r\n\t\t\treturn this._srpgTurnEnd;\r\n\t\t};\r\n\r\n\t\t//行動終了を設定する\r\n\t\tGame_BattlerBase.prototype.setSrpgTurnEnd = function(flag) {\r\n\t\t\tif(flag){\r\n\t\t\t\t$statCalc.setTurnEnd(this);\r\n\t\t\t}\t\t\r\n\t\t\tthis._srpgTurnEnd = flag;\r\n\t\t};\r\n\r\n\t\t//攻撃側か防御側かを返す\r\n\t\tGame_BattlerBase.prototype.srpgActionTiming = function() {\r\n\t\t\treturn this._srpgActionTiming;\r\n\t\t};\r\n\r\n\t\t//攻撃側か防御側かを設定する\r\n\t\tGame_BattlerBase.prototype.setActionTiming = function(timing) {\r\n\t\t\tthis._srpgActionTiming = timing;\r\n\t\t};\r\n\r\n\t\t// 入力可能かどうかの判定\r\n\t\tvar _SRPG_Game_BattlerBase_canInput = Game_BattlerBase.prototype.canInput;\r\n\t\tGame_BattlerBase.prototype.canInput = function() {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\treturn this.isAppeared() && !this.isAutoBattle() &&\r\n\t\t\t\t\t   !this.srpgTurnEnd(); //!this.isRestricted() &&\r\n\t\t\t} else {\r\n\t\t\t\treturn _SRPG_Game_BattlerBase_canInput.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// スキル・アイテムが使用可能かの判定\r\n\t\tvar _SRPG_Game_BattlerBase_isOccasionOk = Game_BattlerBase.prototype.isOccasionOk;\r\n\t\tGame_BattlerBase.prototype.isOccasionOk = function(item) {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tif ($gameSystem.isBattlePhase() === 'actor_phase' &&\r\n\t\t\t\t\t$gameSystem.isSubBattlePhase() === 'normal') {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn item.occasion === 0 || item.occasion === 1;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\treturn _SRPG_Game_BattlerBase_isOccasionOk.call(this, item);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// スキル・アイテムが使用可能かの判定\r\n\t\tvar _SRPG_Game_BattlerBase_canUse = Game_BattlerBase.prototype.canUse;\r\n\t\tGame_BattlerBase.prototype.canUse = function(item) {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tif (!item) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif ($gameSystem.isBattlePhase() === 'actor_phase' && \r\n\t\t\t\t\t$gameSystem.isSubBattlePhase() === 'normal') {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif (($gameSystem.isSubBattlePhase() === 'invoke_action' ||\r\n\t\t\t\t\t $gameSystem.isSubBattlePhase() === 'auto_actor_action' ||\r\n\t\t\t\t\t $gameSystem.isSubBattlePhase() === 'enemy_action' ||\r\n\t\t\t\t\t $gameSystem.isSubBattlePhase() === 'battle_window') &&\r\n\t\t\t\t\t(this.srpgSkillRange(item) < $gameTemp.SrpgDistance() ||\r\n\t\t\t\t\tthis.srpgSkillMinRange(item) > $gameTemp.SrpgDistance() ||\r\n\t\t\t\t\t$gameTemp.SrpgSpecialRange() == false ||\r\n\t\t\t\t\t(this._srpgActionTiming == 1 && this.srpgWeaponCounter() == false))) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn _SRPG_Game_BattlerBase_canUse.call(this, item);\r\n\t\t};\r\n\r\n\t\t// ステートのターン経過処理（ＳＲＰＧ用）\r\n\t\t// 行動終了時：行動ごとに１ターン経過\r\n\t\t// ターン終了時：全体のターン終了ごとに１ターン経過\r\n\t\tGame_BattlerBase.prototype.updateSrpgStateTurns = function(timing) {\r\n\t\t\tthis._states.forEach(function(stateId) {\r\n\t\t\t\tif (this._stateTurns[stateId] > 0 && $dataStates[stateId].autoRemovalTiming === timing) {\r\n\t\t\t\t\tthis._stateTurns[stateId]--;\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t};\r\n\t\t\t\t\r\n\t\tGame_BattlerBase.prototype.allTraits = function() {\r\n\t\t\treturn [];\r\n\t\t};\r\n\r\n\t\tGame_BattlerBase.prototype.traits = function(code) {\r\n\t\t\treturn [];\r\n\t\t};\r\n\r\n\t\tGame_BattlerBase.prototype.traitsWithId = function(code, id) {\r\n\t\t\treturn [];\r\n\t\t};\r\n\r\n\t\tGame_BattlerBase.prototype.traitsPi = function(code, id) {\r\n\t\t\treturn 1;\r\n\t\t};\r\n\r\n\t\tGame_BattlerBase.prototype.traitsSum = function(code, id) {\r\n\t\t\treturn 0;\r\n\t\t};\r\n\r\n\t\tGame_BattlerBase.prototype.traitsSumAll = function(code) {\r\n\t\t\treturn 0;\r\n\t\t};\r\n\r\n\t\tGame_BattlerBase.prototype.traitsSet = function(code) {\r\n\t\t\treturn []\r\n\t\t};\r\n\t\t\r\n\t\tGame_BattlerBase.prototype.hpRate = function() {\r\n\t\t\treturn this.mhp > 0 ? this.hp / this.mhp : 0;\r\n\t\t};\r\n\r\n\t\tGame_BattlerBase.prototype.mpRate = function() {\r\n\t\t\treturn this.mmp > 0 ? this.mp / this.mmp : 0;\r\n\t\t};\r\n\r\n\t\tGame_BattlerBase.prototype.tpRate = function() {\r\n\t\t\treturn this.tp / this.maxTp();\r\n\t\t};\r\n\t\t\r\n\r\n\r\n\t//====================================================================\r\n\t// ●Game_Battler\r\n\t//====================================================================\r\n\t\t\r\n\r\n\t\tvar _SRPG_Game_Battler_initMembers = Game_Battler.prototype.initMembers;\r\n\t\tGame_Battler.prototype.initMembers = function() {\r\n\t\t\t_SRPG_Game_Battler_initMembers.call(this);\r\n\t\t\tthis._battleMode = 'normal';\r\n\t\t\tthis._searchItem = false;\r\n\t\t\tthis._targetId = -1;\r\n\t\t\tthis._SRPGActionTimes = 1;\r\n\t\t};\r\n\r\n\t\t// 行動モードの設定\r\n\t\tGame_Battler.prototype.setBattleMode = function(mode, force) {\r\n\t\t\tif(force || (this._battleMode != \"fixed\" && this._battleMode != \"disabled\")){\r\n\t\t\t\tthis._battleMode = mode;\t\r\n\t\t\t}        \r\n\t\t};\r\n\t\t\r\n\t\tGame_Battler.prototype.setSquadMode = function(mode) {\r\n\t\t\tvar _this = this;\r\n\t\t\t_this.setBattleMode(mode);\r\n\t\t\tif(_this.squadId != -1){\r\n\t\t\t\tvar type = _this.isActor() ? \"actor\" : \"enemy\";\r\n\t\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\t\tif (event.isType() === type) {\r\n\t\t\t\t\t\tvar enemy = $gameSystem.EventToUnit(event.eventId())[1];\t\r\n\t\t\t\t\t\tif(enemy.squadId == _this.squadId){\r\n\t\t\t\t\t\t\tenemy.setBattleMode(mode);\r\n\t\t\t\t\t\t}\t\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\t\t\r\n\t\t}\r\n\r\n\t\tGame_Battler.prototype.battleMode = function() {\r\n\t\t\treturn this._battleMode;\r\n\t\t};\r\n\r\n\t\t// アイテム探査モードの設定\r\n\t\tGame_Battler.prototype.setSearchItem = function(mode) {\r\n\t\t\tif (mode) {\r\n\t\t\t\tthis._searchItem = true;\r\n\t\t\t} else {\r\n\t\t\t\tthis._searchItem = false;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tGame_Battler.prototype.searchItem = function() {\r\n\t\t\treturn this._searchItem;\r\n\t\t};\r\n\r\n\t\t// ターゲットＩＤの設定\r\n\t\tGame_Battler.prototype.setTargetId = function(id) {\r\n\t\t\tthis._targetId = id;\r\n\t\t};\r\n\r\n\t\tGame_Battler.prototype.targetId = function() {\r\n\t\t\treturn this._targetId;\r\n\t\t};\r\n\r\n\t\t// 行動回数を設定する（SRPG用）\r\n\t\tGame_Battler.prototype.SRPGActionTimesSet = function(amount) {\r\n\t\t\tthis._SRPGActionTimes = amount || 1;\r\n\t\t};\r\n\r\n\t\t// 行動回数を返す\r\n\t\tGame_Battler.prototype.SRPGActionTimes = function() {\r\n\t\t\treturn this._SRPGActionTimes;\r\n\t\t};\r\n\r\n\t\t// 行動回数を消費する\r\n\t\tGame_Battler.prototype.useSRPGActionTimes = function(num) {\r\n\t\t\tthis._SRPGActionTimes -= num;\r\n\t\t};\r\n\r\n\t\t// 行動回数の設定（戦闘用）\r\n\t\tvar _SRPG_Game_Battler_makeActionTimes = Game_Battler.prototype.makeActionTimes;\r\n\t\tGame_Battler.prototype.makeActionTimes = function() {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\treturn 1;\r\n\t\t\t} else {\r\n\t\t\t\treturn _SRPG_Game_Battler_makeActionTimes.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// アクションのから配列を作成する\r\n\t\tGame_Battler.prototype.srpgMakeNewActions = function() {\r\n\t\t\tthis.clearActions();\r\n\t\t\t//if (this.canMove()) {\r\n\t\t\t\tvar actionTimes = this.makeActionTimes();\r\n\t\t\t\tthis._actions = [];\r\n\t\t\t\tfor (var i = 0; i < actionTimes; i++) {\r\n\t\t\t\t\tthis._actions.push(new Game_Action(this));\r\n\t\t\t\t}\r\n\t\t\t//}\r\n\t\t\tthis.setActionState('waiting');\r\n\t\t};\r\n\t\t\r\n\t\tGame_Battler.prototype.srpgInitAction = function() {\r\n\t\t\t this.clearActions();\r\n\t\t\t this._actions.push(new Game_Action(this));\r\n\t\t}\r\n\r\n\t\t// 行動開始時の処理\r\n\t\tvar _SRPG_Game_Battler_onBattleStart = Game_Battler.prototype.onBattleStart;\r\n\t\tGame_Battler.prototype.onBattleStart = function() {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tthis.setActionState('undecided');\r\n\t\t\t\tthis.clearMotion();\r\n\t\t\t} else {\r\n\t\t\t\treturn _SRPG_Game_Battler_onBattleStart.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// 行動終了時の処理\r\n\t\tvar _SRPG_Game_Battler_onAllActionsEnd = Game_Battler.prototype.onAllActionsEnd;\r\n\t\tGame_Battler.prototype.onAllActionsEnd = function() {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\t$statCalc.applyMoveCost(this);\r\n\t\t\t\tthis.updateSrpgStateTurns(1);\r\n\t\t\t\tthis.removeStatesAuto(1);\r\n\t\t\t\tthis.clearResult();\r\n\t\t\t} else {\r\n\t\t\t\treturn _SRPG_Game_Battler_onAllActionsEnd.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// ターン終了時の処理\r\n\t\tvar _SRPG_Game_Battler_onTurnEnd = Game_Battler.prototype.onTurnEnd;\r\n\t\tGame_Battler.prototype.onTurnEnd = function() {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tthis.regenerateAll();\r\n\t\t\t\tthis.updateSrpgStateTurns(2);\r\n\t\t\t\tthis.updateBuffTurns();\r\n\t\t\t\tthis.removeStatesAuto(2);\r\n\t\t\t\tthis.removeBuffsAuto();\r\n\t\t\t\tthis.clearResult();\r\n\t\t\t\tthis.setSrpgTurnEnd(false);\r\n\t\t\t} else {\r\n\t\t\t\treturn _SRPG_Game_Battler_onTurnEnd.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tGame_Battler.prototype.srpgCheckFloorEffect = function(x, y) {\r\n\t\t\tif ($gameMap.isDamageFloor(x, y) == true) {\r\n\t\t\t\tthis.srpgExecuteFloorDamage();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tGame_Battler.prototype.srpgExecuteFloorDamage = function() {\r\n\t\t\tvar damage = Math.floor(this.srpgBasicFloorDamage() * this.fdr);\r\n\t\t\tdamage = Math.min(damage, this.srpgMaxFloorDamage());\r\n\t\t\tthis.gainHp(-damage);\r\n\t\t\tif (damage > 0) {\r\n\t\t\t\t$gameScreen.startFlashForDamage();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tGame_Battler.prototype.srpgBasicFloorDamage = function() {\r\n\t\t\treturn this.mhp * 0.1;\r\n\t\t};\r\n\r\n\t\tGame_Battler.prototype.srpgMaxFloorDamage = function() {\r\n\t\t\treturn $dataSystem.optFloorDeath ? this.hp : Math.max(this.hp - 1, 0);\r\n\t\t};\r\n\t\t\r\n\t\tGame_Battler.prototype.refresh = function() {\r\n\t\t\tGame_BattlerBase.prototype.refresh.call(this);\r\n\t\t\t/*if (this.hp === 0) {\r\n\t\t\t\tthis.addState(this.deathStateId());\r\n\t\t\t} else {\r\n\t\t\t\tthis.removeState(this.deathStateId());\r\n\t\t\t}*/\r\n\t\t};\r\n\r\n\t//====================================================================\r\n\t// ●Game_Actor\r\n\t//====================================================================\r\n\t\tObject.defineProperty(Game_Actor.prototype, 'level', {\r\n\t\t\tget: function() {\r\n\t\t\t\tif($statCalc.isActorSRWInitialized(this)){\r\n\t\t\t\t\treturn this.SRWStats.pilot.level;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn this._level; \r\n\t\t\t\t}\t\r\n\t\t\t},\r\n\t\t\tconfigurable: true\r\n\t\t});\r\n\t\t\r\n\t\tGame_Actor.prototype.setup = function(actorId) {\r\n\t\t\tvar actor = $dataActors[actorId];\r\n\t\t\tthis._actorId = actorId;\r\n\t\t\tthis._name = actor.name;\r\n\t\t\tthis._nickname = actor.nickname;\r\n\t\t\tthis._profile = actor.profile;\r\n\t\t\tthis._classId = actor.classId;\r\n\t\t\tthis._level = actor.initialLevel;\r\n\t\t\tthis.initImages();\r\n\t\t\tthis.initExp();\r\n\t\t\tthis.initSkills();\r\n\t\t\r\n\t\t\tthis.clearParamPlus();\r\n\t\t\tthis.recoverAll();\r\n\t\t};\r\n\t\t\r\n\t\tGame_Actor.prototype.name = function() {\r\n\t\t\treturn $statCalc.getPilotName(this);\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\tGame_Actor.prototype.expForLevel = function(level) {\r\n\t\t\treturn 500 * level;\r\n\t\t};\r\n\r\n\t\tGame_Actor.prototype.initExp = function() {\r\n\t\t\t//stubbed\t\r\n\t\t};\r\n\r\n\t\tGame_Actor.prototype.currentExp = function() {\r\n\t\t\treturn this.SRWStats.pilot.exp;\r\n\t\t};\r\n\r\n\t\tGame_Actor.prototype.currentLevelExp = function() {\r\n\t\t\treturn this.expForLevel(this._level);\r\n\t\t};\r\n\r\n\t\tGame_Actor.prototype.nextLevelExp = function() {\r\n\t\t\treturn this.expForLevel(this._level + 1);\r\n\t\t};\r\n\r\n\t\tGame_Actor.prototype.nextRequiredExp = function() {\r\n\t\t\treturn this.nextLevelExp() - this.currentExp();\r\n\t\t};\r\n\r\n\t\tGame_Actor.prototype.maxLevel = function() {\r\n\t\t\treturn 99;\r\n\t\t};\r\n\r\n\t\tGame_Actor.prototype.isMaxLevel = function() {\r\n\t\t\treturn this._level >= this.maxLevel();\r\n\t\t};\r\n\t\t\r\n\t\tvar Game_Actor_initImages = Game_Actor.prototype.initImages;\r\n\t\tGame_Actor.prototype.initImages = function(overworldSpriteData) {\r\n\t\t\tif($gameSystem.isSRPGMode()){\r\n\t\t\t\tvar actor = this.actor();\r\n\t\t\t\tif(!overworldSpriteData){\r\n\t\t\t\t\tif($dataClasses[actor.classId].meta.srpgOverworld){\r\n\t\t\t\t\t\toverworldSpriteData = $dataClasses[actor.classId].meta.srpgOverworld.split(\",\");\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\toverworldSpriteData = [actor.characterName, actor.characterIndex];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\tthis._characterName = overworldSpriteData[0];\r\n\t\t\t\tthis._characterIndex = overworldSpriteData[1];\r\n\t\t\t\tthis._faceName = actor.faceName;\r\n\t\t\t\tthis._faceIndex = actor.faceIndex;\r\n\t\t\t\tthis._battlerName = actor.battlerName;\r\n\t\t\t} else {\r\n\t\t\t\tGame_Actor_initImages.call(this);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t};\r\n\r\n\t\t// 装備変更可能か\r\n\t\tWindow_EquipSlot.prototype.isEnabled = function(index) {\r\n\t\t\treturn this._actor ? this._actor.isEquipChangeOk(index) : false;\r\n\t\t};\r\n\t\t\r\n\t\tGame_Actor.prototype.setAttack = function(slotId, item) {\r\n\t\t\tthis._equips[slotId].setObject(item);\r\n\t\t};\r\n\r\n\t\tvar _SRPG_Game_Actor_isEquipChangeOk = Game_Actor.prototype.isEquipChangeOk;\r\n\t\tGame_Actor.prototype.isEquipChangeOk = function(slotId) {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tif (this.srpgTurnEnd() == true || this.isRestricted() == true) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn _SRPG_Game_Actor_isEquipChangeOk.call(this, slotId);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\treturn _SRPG_Game_Actor_isEquipChangeOk.call(this, slotId);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// アクターコマンドで装備が可能か（移動後は不可）\r\n\t\tGame_Actor.prototype.canSrpgEquip = function() {\r\n\t\t\treturn $gameTemp.originalPos()[0] == $gameTemp.activeEvent().posX() &&\r\n\t\t\t\t   $gameTemp.originalPos()[1] == $gameTemp.activeEvent().posY();\r\n\t\t};\r\n\r\n\t\t// 経験値の割合を返す\r\n\t\tGame_Actor.prototype.expRate = function() {\r\n\t\t\tif (this.isMaxLevel()) {\r\n\t\t\t\tvar rate = 1.0;\r\n\t\t\t} else {\r\n\t\t\t\tvar rate = (this.currentExp() - this.currentLevelExp()) / (this.nextLevelExp() - this.currentLevelExp());\r\n\t\t\t}\r\n\t\t\treturn rate;\r\n\t\t};\r\n\r\n\t\t// 移動力を返す\r\n\t\tGame_Actor.prototype.srpgMove = function() {\r\n\t\t\tvar n = this.currentClass().meta.srpgMove;\r\n\t\t\tif (!n) {\r\n\t\t\t\tn = _defaultMove;\r\n\t\t\t}\r\n\t\t\tn = Number(n);\r\n\t\t\t// ステートによる変更\r\n\t\t\tthis.states().forEach(function(state) {\r\n\t\t\t\tif (state.meta.srpgMovePlus) {\r\n\t\t\t\t\tn += Number(state.meta.srpgMovePlus);\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t\t// 装備による変更\r\n\t\t\tvar equips = this.equips();\r\n\t\t\tfor (var i = 0; i < equips.length; i++) {\r\n\t\t\t\tvar item = equips[i];\r\n\t\t\t\tif (item && item.meta.srpgMovePlus) {\r\n\t\t\t\t\tn += Number(item.meta.srpgMovePlus);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tn = Number(Math.max(n, 0));\r\n\t\t\treturn n;\r\n\t\t};\r\n\r\n\t\t// スキル・アイテムの射程を返す\r\n\t\tGame_Actor.prototype.srpgSkillRange = function(skill) {\r\n\t\t\tvar range = 1;\r\n\t\t\tif (skill && skill.meta.srpgRange == -1) {\r\n\t\t\t\tif (!this.hasNoWeapons()) {\r\n\t\t\t\t\tweapon = this.weapons()[0];\r\n\t\t\t\t\trange = weapon.meta.weaponRange;\r\n\t\t\t\t}\r\n\t\t\t} else if (skill.meta.srpgRange) {\r\n\t\t\t\trange = skill.meta.srpgRange;\r\n\t\t\t} else {\r\n\t\t\t\trange = 1;\r\n\t\t\t}\r\n\t\t\treturn Number(range);\r\n\t\t};\r\n\r\n\t\t// 武器の攻撃射程を返す\r\n\t\tGame_Actor.prototype.srpgWeaponRange = function() {\r\n\t\t\treturn this.srpgSkillRange($dataSkills[this.attackSkillId()]);\r\n\t\t};\r\n\r\n\t\t// 武器が反撃可能かを返す\r\n\t\tGame_Actor.prototype.srpgWeaponCounter = function() {\r\n\t\t\tif (this.hasNoWeapons()) {\r\n\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\tvar weapon = this.weapons()[0];\r\n\t\t\t\tif (!weapon.meta.srpgCounter || !weapon.meta.srpgCounter == 'false') {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// 通行可能タグを返す（class, equip, stateの設定で最大の物を採用する）\r\n\t\tGame_Actor.prototype.srpgThroughTag = function() {\r\n\t\t\tvar n = 0;\r\n\t\t\t// 職業\r\n\t\t\tif (this.currentClass().meta.srpgThroughTag && n < Number(this.currentClass().meta.srpgThroughTag)) {\r\n\t\t\t\tn = Number(this.currentClass().meta.srpgThroughTag);\r\n\t\t\t}\r\n\t\t\t// ステート\r\n\t\t\tthis.states().forEach(function(state) {\r\n\t\t\t\tif (state.meta.srpgThroughTag && n < Number(state.meta.srpgThroughTag)) {\r\n\t\t\t\t\tn = Number(state.meta.srpgThroughTag);\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t\t// 装備\r\n\t\t\tvar equips = this.equips();\r\n\t\t\tfor (var i = 0; i < equips.length; i++) {\r\n\t\t\t\tvar item = equips[i];\r\n\t\t\t\tif (item && item.meta.srpgThroughTag && n < Number(item.meta.srpgThroughTag)) {\r\n\t\t\t\t\tn = Number(item.meta.srpgThroughTag);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn n;\r\n\t\t};\r\n\r\n\t\t// スキル・アイテムの最低射程を返す\r\n\t\tGame_Actor.prototype.srpgSkillMinRange = function(skill) {\r\n\t\t\tvar minRange = 0;\r\n\t\t\tif (skill) {\r\n\t\t\t\tif (skill.meta.srpgRange == -1) {\r\n\t\t\t\t\tif (!this.hasNoWeapons()) {\r\n\t\t\t\t\t\tvar weapon = this.weapons()[0];\r\n\t\t\t\t\t\tminRange = weapon.meta.weaponMinRange;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (skill.meta.srpgMinRange) {\r\n\t\t\t\t\tminRange = skill.meta.srpgMinRange;\r\n\t\t\t\t}\r\n\t\t\t\tif (!minRange) {\r\n\t\t\t\t\tminRange = 0;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tminRange = 0;\r\n\t\t\t}\r\n\t\t\tif (minRange > this.srpgSkillRange(skill)) {\r\n\t\t\t\tminRange = this.srpgSkillRange(skill);\r\n\t\t\t}\r\n\t\t\treturn Number(minRange);\r\n\t\t};\r\n\r\n\t\t// 武器の最低射程を返す\r\n\t\tGame_Actor.prototype.srpgWeaponMinRange = function() {\r\n\t\t\treturn this.srpgSkillMinRange($dataSkills[this.attackSkillId()]);\r\n\t\t};\r\n\r\n\t\t// attackSkillId == 1 以外の武器を作る\r\n\t\tGame_Actor.prototype.attackSkillId = function() {\r\n\t\t\tvar weapon = this.weapons()[0];\r\n\t\t\tif (weapon && weapon.meta.srpgWeaponSkill) {\r\n\t\t\t\treturn Number(weapon.meta.srpgWeaponSkill);\r\n\t\t\t} else {\r\n\t\t\t\treturn Game_BattlerBase.prototype.attackSkillId.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t//自動行動を決定する\r\n\t\tvar _SRPG_Game_Actor_makeAutoBattleActions = Game_Actor.prototype.makeAutoBattleActions;\r\n\t\tGame_Actor.prototype.makeAutoBattleActions = function() {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tfor (var i = 0; i < this.numActions(); i++) {\r\n\t\t\t\t\tvar list = this.makeActionList();\r\n\t\t\t\t\tthis.setAction(i, list[Math.randomInt(list.length)]);\r\n\t\t\t\t}\r\n\t\t\t\tthis.setActionState('waiting');\r\n\t\t\t} else {\r\n\t\t\t\treturn _SRPG_Game_Actor_makeAutoBattleActions.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t//====================================================================\r\n\t// ●Game_Enemy\r\n\t//====================================================================\r\n\t\t// 戦闘画面での座標を設定する\r\n\t\tGame_Enemy.prototype.setScreenXy = function(x, y) {\r\n\t\t\tthis._screenX = x;\r\n\t\t\tthis._screenY = y;\r\n\t\t};\r\n\r\n\t\t// 移動力を返す\r\n\t\tGame_Enemy.prototype.srpgMove = function() {\r\n\t\t\tvar n = this.enemy().meta.srpgMove;\r\n\t\t\tif (!n) {\r\n\t\t\t\tn = _defaultMove;\r\n\t\t\t}\r\n\t\t\tn = Number(n);\r\n\t\t\t// ステートによる変更\r\n\t\t\tthis.states().forEach(function(state) {\r\n\t\t\t\tif (state.meta.srpgMovePlus) {\r\n\t\t\t\t\tn += Number(state.meta.srpgMovePlus);\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t\t// 装備による変更\r\n\t\t\tif (!this.hasNoWeapons()) {\r\n\t\t\t\tvar item = $dataWeapons[this.enemy().meta.srpgWeapon];\r\n\t\t\t\tif (item && item.meta.srpgMovePlus) {\r\n\t\t\t\t\tn += Number(item.meta.srpgMovePlus);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tn = Number(Math.max(n, 0));\r\n\t\t\treturn n;\r\n\t\t};\r\n\r\n\t\t// スキル・アイテムの射程を返す\r\n\t\tGame_Enemy.prototype.srpgSkillRange = function(skill) {\r\n\t\t\tvar range = 1;\r\n\t\t\tif (skill && skill.meta.srpgRange == -1) {\r\n\t\t\t\tif (!this.hasNoWeapons()) {\r\n\t\t\t\t\tvar weapon = $dataWeapons[this.enemy().meta.srpgWeapon];\r\n\t\t\t\t\trange = weapon.meta.weaponRange;\r\n\t\t\t\t} else {\r\n\t\t\t\t\trange = this.enemy().meta.weaponRange;\r\n\t\t\t\t}\r\n\t\t\t} else if (skill.meta.srpgRange) {\r\n\t\t\t\trange = skill.meta.srpgRange;\r\n\t\t\t} else {\r\n\t\t\t\trange = 1;\r\n\t\t\t}\r\n\t\t\treturn Number(range);\r\n\t\t};\r\n\r\n\t\t// 武器の攻撃射程を返す\r\n\t\tGame_Enemy.prototype.srpgWeaponRange = function() {\r\n\t\t\treturn this.srpgSkillRange($dataSkills[this.attackSkillId()]);\r\n\t\t};\r\n\r\n\t\t// 武器が反撃可能かを返す\r\n\t\tGame_Enemy.prototype.srpgWeaponCounter = function() {\r\n\t\t\tif (!this.hasNoWeapons()) {\r\n\t\t\t\tvar weapon = $dataWeapons[this.enemy().meta.srpgWeapon];\r\n\t\t\t\tvar counter = weapon.meta.srpgCounter;\r\n\t\t\t} else {\r\n\t\t\t\tvar counter = this.enemy().meta.srpgCounter;\r\n\t\t\t} \r\n\t\t\tif (!counter || !counter == 'false') {\r\n\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// 通行可能タグを返す（enemy, equip, stateの設定で最大の物を採用する）\r\n\t\tGame_Enemy.prototype.srpgThroughTag = function() {\r\n\t\t\tvar n = 0;\r\n\t\t\t// エネミー\r\n\t\t\tif (this.enemy().meta.srpgThroughTag && n < Number(this.enemy().meta.srpgThroughTag)) {\r\n\t\t\t\tn = Number(this.enemy().meta.srpgThroughTag);\r\n\t\t\t}\r\n\t\t\t// ステート\r\n\t\t\tthis.states().forEach(function(state) {\r\n\t\t\t\tif (state.meta.srpgThroughTag && n < Number(state.meta.srpgThroughTag)) {\r\n\t\t\t\t\tn = Number(state.meta.srpgThroughTag);\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t\t// 装備\r\n\t\t\tif (!this.hasNoWeapons()) {\r\n\t\t\t\tvar item = $dataWeapons[this.enemy().meta.srpgWeapon];\r\n\t\t\t\tif (item && item.meta.srpgThroughTag && n < Number(item.meta.srpgThroughTag)) {\r\n\t\t\t\t\tn = Number(item.meta.srpgThroughTag);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn n;\r\n\t\t};\r\n\r\n\t\t// スキル・アイテムの最低射程を返す\r\n\t\tGame_Enemy.prototype.srpgSkillMinRange = function(skill) {\r\n\t\t\tvar minRange = 0;\r\n\t\t\tif (skill) {\r\n\t\t\t\tif (skill.meta.srpgRange == -1) {\r\n\t\t\t\t\tif (!this.hasNoWeapons()) {\r\n\t\t\t\t\t\tvar weapon = $dataWeapons[this.enemy().meta.srpgWeapon];\r\n\t\t\t\t\t\tminRange = weapon.meta.weaponMinRange;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tminRange = this.enemy().meta.weaponMinRange;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (skill.meta.srpgMinRange) {\r\n\t\t\t\t\tminRange = skill.meta.srpgMinRange;\r\n\t\t\t\t}\r\n\t\t\t\tif (!minRange) {\r\n\t\t\t\t\tminRange = 0;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tminRange = 0;\r\n\t\t\t}\r\n\t\t\tif (minRange > this.srpgSkillRange(skill)) {\r\n\t\t\t\tminRange = this.srpgSkillRange(skill);\r\n\t\t\t}\r\n\t\t\treturn Number(minRange);\r\n\t\t};\r\n\r\n\t\t// 武器の最低射程を返す\r\n\t\tGame_Enemy.prototype.srpgWeaponMinRange = function() {\r\n\t\t\treturn this.srpgSkillMinRange($dataSkills[this.attackSkillId()]);\r\n\t\t};\r\n\r\n\t\t// 武器を装備しているか返す\r\n\t\tGame_Enemy.prototype.hasNoWeapons = function() {\r\n\t\t\treturn !$dataWeapons[this.enemy().meta.srpgWeapon];\r\n\t\t};\r\n\r\n\t\t// 装備の特徴を反映する\r\n\t\tvar _SRPG_Game_Enemy_traitObjects = Game_Enemy.prototype.traitObjects;\r\n\t\tGame_Enemy.prototype.traitObjects = function() {\r\n\t\t\tvar objects = _SRPG_Game_Enemy_traitObjects.call(this);\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tvar item = $dataWeapons[this.enemy().meta.srpgWeapon];\r\n\t\t\t\tif (item) {\r\n\t\t\t\t\tobjects.push(item);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn objects;\r\n\t\t};\r\n\r\n\t\t// 装備の能力変化値を反映する\r\n\t\tGame_Enemy.prototype.paramPlus = function(paramId) {\r\n\t\t\tvar value = Game_Battler.prototype.paramPlus.call(this, paramId);\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tvar item = $dataWeapons[this.enemy().meta.srpgWeapon];\r\n\t\t\t\tif (item) {\r\n\t\t\t\t\tvalue += item.params[paramId];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn value;\r\n\t\t};\r\n\r\n\t\t// 装備のアニメーションを反映する\r\n\t\tGame_Enemy.prototype.attackAnimationId = function() {\r\n\t\t\tif (this.hasNoWeapons()) {\r\n\t\t\t\treturn this.bareHandsAnimationId();\r\n\t\t\t} else {\r\n\t\t\t\tvar weapons = $dataWeapons[this.enemy().meta.srpgWeapon];\r\n\t\t\t\treturn weapons ? weapons.animationId : 1;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// 装備が設定されていない（素手）の時のアニメーションＩＤ\r\n\t\tGame_Enemy.prototype.bareHandsAnimationId = function() {\r\n\t\t\treturn 1;\r\n\t\t};\r\n\r\n\t\t// attackSkillId == 1 以外の武器を作る\r\n\t\tGame_Enemy.prototype.attackSkillId = function() {\r\n\t\t\tvar weapon = $dataWeapons[this.enemy().meta.srpgWeapon];\r\n\t\t\tif (weapon && weapon.meta.srpgWeaponSkill) {\r\n\t\t\t\treturn Number(weapon.meta.srpgWeaponSkill);\r\n\t\t\t} else {\r\n\t\t\t\treturn Game_BattlerBase.prototype.attackSkillId.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// ＳＲＰＧ用の行動決定\r\n\t\tGame_Enemy.prototype.makeSrpgActions = function() {\r\n\t\t\tGame_Battler.prototype.makeActions.call(this);\r\n\t\t\tif (this.numActions() > 0) {\r\n\t\t\t\tif (this.isConfused()) {\r\n\t\t\t\t\tthis.makeConfusionActions();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar actionList = this.enemy().actions.filter(function(a) {\r\n\t\t\t\t\t\tif (a.skillId == 1) {\r\n\t\t\t\t\t\t\ta.skillId = this.attackSkillId();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn this.isActionValid(a);\r\n\t\t\t\t\t}, this);\r\n\t\t\t\t\tif (actionList.length > 0) {\r\n\t\t\t\t\t\tthis.selectAllActions(actionList);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.setActionState('waiting');\r\n\t\t};\r\n\r\n\t\t// ＳＲＰＧ用の行動決定\r\n\t\tGame_Enemy.prototype.makeConfusionActions = function() {\r\n\t\t\tfor (var i = 0; i < this.numActions(); i++) {\r\n\t\t\t\tthis.action(i).setSkill(this.attackSkillId());\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t//====================================================================\r\n\t// ●Game_Unit\r\n\t//====================================================================\r\n\t\tvar _SRPG_Game_Unit_onBattleEnd = Game_Unit.prototype.onBattleEnd;\r\n\t\tGame_Unit.prototype.onBattleEnd = function() {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tthis._inBattle = false;\r\n\t\t\t} else {\r\n\t\t\t\t_SRPG_Game_Unit_onBattleEnd.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t//====================================================================\r\n\t// ●Game_Party\r\n\t//====================================================================\r\n\t\t// 初期化\r\n\t\tvar _SRPG_Game_Party_initialize = Game_Party.prototype.initialize;\r\n\t\tGame_Party.prototype.initialize = function() {\r\n\t\t\t_SRPG_Game_Party_initialize.call(this);\r\n\t\t\tthis._srpgBattleActors = []; //SRPGモードの戦闘時に呼び出すメンバーを設定する（行動者と対象者）\r\n\t\t};\r\n\r\n\t\tGame_Party.prototype.SrpgBattleActors = function() {\r\n\t\t\treturn this._srpgBattleActors;\r\n\t\t};\r\n\r\n\t\tGame_Party.prototype.clearSrpgBattleActors = function() {\r\n\t\t\tthis._srpgBattleActors = [];\r\n\t\t};\r\n\r\n\t\tGame_Party.prototype.pushSrpgBattleActors = function(actor) {\r\n\t\t\tthis._srpgBattleActors.push(actor);\r\n\t\t};\r\n\t\t\r\n\t\t Game_Party.prototype.setSrpgBattleActors = function(actors) {\r\n\t\t\tthis._srpgBattleActors = actors;\r\n\t\t};\r\n\r\n\t\t//プレイヤー移動時の処理\r\n\t\tvar _SRPG_Game_Party_onPlayerWalk = Game_Party.prototype.onPlayerWalk;\r\n\t\tGame_Party.prototype.onPlayerWalk = function() {\r\n\t\t\tif ($gameSystem.isSRPGMode() == false) {\r\n\t\t\t\treturn _SRPG_Game_Party_onPlayerWalk.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// SRPG戦闘中にはmembersで呼び出す配列を変える\r\n\t\tvar _SRPG_Game_Party_members = Game_Party.prototype.members;\r\n\t\tGame_Party.prototype.members = function() {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tif ($gameSystem.isSubBattlePhase() === 'normal' || $gameSystem.isSubBattlePhase() === 'initialize') {\r\n\t\t\t\t\treturn this.allMembers();\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn this.battleMembers();\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\treturn _SRPG_Game_Party_members.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// SRPG戦闘中にはbattleMembersで呼び出す配列を変える\r\n\t\tvar _SRPG_Game_Party_battleMembers = Game_Party.prototype.battleMembers;\r\n\t\tGame_Party.prototype.battleMembers = function() {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\treturn this.SrpgBattleActors();\r\n\t\t\t} else {\r\n\t\t\t\treturn _SRPG_Game_Party_battleMembers.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// セーブファイル用の処理\r\n\t\tvar _SRPG_Game_Party_charactersForSavefile = Game_Party.prototype.charactersForSavefile;\r\n\t\tGame_Party.prototype.charactersForSavefile = function() {\r\n\t\t\treturn null;\r\n\t\t\t\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\treturn this.allMembers().map(function(actor) {\r\n\t\t\t\t\treturn [actor.characterName(), actor.characterIndex()];\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\treturn _SRPG_Game_Party_charactersForSavefile.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar _SRPG_Game_Party_facesForSavefile = Game_Party.prototype.facesForSavefile;\r\n\t\tGame_Party.prototype.facesForSavefile = function() {\r\n\t\t\treturn null;\r\n\t\t\t\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\treturn this.allMembers().map(function(actor) {\r\n\t\t\t\t\treturn [actor.faceName(), actor.faceIndex()];\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\treturn _SRPG_Game_Party_facesForSavefile.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tGame_Party.prototype.maxGold = function() {\r\n\t\t\treturn 99999999;\r\n\t\t};\r\n\t\t\r\n\t\tGame_Party.prototype.maxItems = function() {\r\n\t\t\treturn ENGINE_SETTINGS.RPG_MAKER_INV_LIMIT || 99;\r\n\t\t};\r\n\r\n\t\tGame_Party.prototype.gold = function() {\r\n\t\t\tif($gameSystem.optionInfiniteFunds){\r\n\t\t\t\treturn this.maxGold();\r\n\t\t\t}\r\n\t\t\treturn this._gold;\r\n\t\t};\t\r\n\t\t\r\n\t\tGame_Party.prototype.loseGold = function(amount) {\r\n\t\t\tif(!$gameSystem.optionInfiniteFunds){\r\n\t\t\t\tthis.gainGold(-amount);\r\n\t\t\t}\t\t\t\r\n\t\t};\r\n\t//====================================================================\r\n\t// ●Game_Troop\r\n\t//====================================================================\r\n\t\t// 初期化\r\n\t\tvar _Game_Troop_initialize = Game_Troop.prototype.initialize\r\n\t\tGame_Troop.prototype.initialize = function() {\r\n\t\t\t_Game_Troop_initialize.call(this);\r\n\t\t\tthis._srpgBattleEnemys = []; //SRPGモードの戦闘時に呼び出すメンバーを設定する（行動者と対象者）\r\n\t\t};\r\n\r\n\t\tGame_Troop.prototype.SrpgBattleEnemys = function() {\r\n\t\t\treturn this._srpgBattleEnemys;\r\n\t\t};\r\n\r\n\t\tGame_Troop.prototype.clearSrpgBattleEnemys = function() {\r\n\t\t\tthis._srpgBattleEnemys = [];\r\n\t\t};\r\n\r\n\t\tGame_Troop.prototype.pushSrpgBattleEnemys = function(enemy) {\r\n\t\t\tthis._srpgBattleEnemys.push(enemy);\r\n\t\t};\r\n\t\t\r\n\t\t Game_Troop.prototype.setSrpgBattleEnemys = function(enemies) {\r\n\t\t\tthis._srpgBattleEnemys = enemies;\r\n\t\t\tthis._enemies = enemies;\r\n\t\t};\r\n\r\n\t\tGame_Troop.prototype.pushMembers = function(enemy) {\r\n\t\t\tthis._enemies.push(enemy);\r\n\t\t};\r\n\r\n\t\t// セットアップ\r\n\t\tvar _SRPG_Game_Troop_setup = Game_Troop.prototype.setup;\r\n\t\tGame_Troop.prototype.setup = function(troopId) {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tthis.clear();\r\n\t\t\t\tthis._troopId = troopId;\r\n\t\t\t\tthis._enemies = [];\r\n\t\t\t\tfor (var i = 0; i < this.SrpgBattleEnemys().length; i++) {\r\n\t\t\t\t\tvar enemy = this.SrpgBattleEnemys()[i];\r\n\t\t\t\t\tenemy.setScreenXy(200 + 240 * i, Graphics.height / 2 + 48);\r\n\t\t\t\t\tthis._enemies.push(enemy);\r\n\t\t\t\t}\r\n\t\t\t\tthis.makeUniqueNames();\r\n\t\t\t} else {\r\n\t\t\t\t_SRPG_Game_Troop_setup.call(this, troopId);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// EXPを返す\r\n\t\tvar _SRPG_Game_Troop_expTotal = Game_Troop.prototype.expTotal;\r\n\t\tGame_Troop.prototype.expTotal = function() {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tif (this.SrpgBattleEnemys() && this.SrpgBattleEnemys().length > 0) {\r\n\t\t\t\t\tif (this.isAllDead()) {\r\n\t\t\t\t\t\treturn _SRPG_Game_Troop_expTotal.call(this);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar exp = 0;\r\n\t\t\t\t\t\tfor (var i = 0; i < this.members().length; i++) {\r\n\t\t\t\t\t\t\tvar enemy = this.members()[i];\r\n\t\t\t\t\t\t\texp += enemy.exp();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn Math.floor(exp * _srpgBattleExpRate);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar actor = $gameParty.battleMembers()[0];\r\n\t\t\t\t\tvar exp = actor.nextLevelExp() - actor.currentLevelExp();\r\n\t\t\t\t\treturn Math.floor(exp * _srpgBattleExpRateForActors);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\treturn _SRPG_Game_Troop_expTotal.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t//====================================================================\r\n\t// ●Game_CharacterBase\r\n\t//====================================================================\r\n\t\t//X座標を返す\r\n\t\tGame_CharacterBase.prototype.posX = function() {\r\n\t\t\treturn this._x;\r\n\t\t};\r\n\r\n\t\t//Y座標を返す\r\n\t\tGame_CharacterBase.prototype.posY = function() {\r\n\t\t\treturn this._y;\r\n\t\t};\r\n\t\t\r\n\t\tGame_CharacterBase.prototype.shiftY = function() {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\t//イベントかどうかを返す\r\n\t\tGame_CharacterBase.prototype.isEvent = function() {\r\n\t\t\treturn false;\r\n\t\t};\r\n\r\n\t\t//プレイヤーの移動速度を変える（自動移動中は高速化）\r\n\t\tvar _SRPG_Game_CharacterBase_realMoveSpeed = Game_CharacterBase.prototype.realMoveSpeed;\r\n\t\tGame_CharacterBase.prototype.realMoveSpeed = function() {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true && \r\n\t\t\t   ($gameTemp.isAutoMoveDestinationValid() == true || $gameTemp.isDestinationValid() == true)) {\r\n\t\t\t\treturn 6;\r\n\t\t\t} else {\r\n\t\t\t\treturn this._moveSpeed + (this.isDashing() ? 2 : 0);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t//戦闘中はキャラクターがすり抜けて移動するように変更する\r\n\t\tvar _SRPG_Game_CharacterBase_canPass = Game_CharacterBase.prototype.canPass;\r\n\t\tGame_CharacterBase.prototype.canPass = function(x, y, d) {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tvar x2 = $gameMap.roundXWithDirection(x, d);\r\n\t\t\t\tvar y2 = $gameMap.roundYWithDirection(y, d);\r\n\t\t\t\tif (!$gameMap.isValid(x2, y2)) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\treturn _SRPG_Game_CharacterBase_canPass.call(this, x, y, d);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t//対立陣営であれば通り抜けられない（移動範囲演算用） オブジェクトも一緒に処理する\r\n\t\tGame_CharacterBase.prototype.isSrpgCollidedWithEvents = function(x, y) {\r\n\t\t\tvar events = $gameMap.eventsXyNt(x, y);\r\n\t\t\treturn events.some(function(event) {\r\n\t\t\t\tif ((event.isType() === 'actor' && $gameTemp.activeEvent().isType() === 'enemy') ||\r\n\t\t\t\t\t(event.isType() === 'enemy' && $gameTemp.activeEvent().isType() === 'actor') ||\r\n\t\t\t\t\t(event.isType() === 'object' && event.characterName() != '') && !event.isErased()) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t//移動可能かを判定する（移動範囲演算用）\r\n\t\tGame_CharacterBase.prototype.srpgMoveCanPass = function(x, y, d, tag) {\r\n\t\t\tvar x2 = $gameMap.roundXWithDirection(x, d);\r\n\t\t\tvar y2 = $gameMap.roundYWithDirection(y, d);\r\n\t\t\tif (!$gameMap.isValid(x2, y2)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif (this.isSrpgCollidedWithEvents(x2, y2)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif (this.isThrough()) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif (($gameMap.terrainTag(x2, y2) > 0 && $gameMap.terrainTag(x2, y2) <= tag) ||\r\n\t\t\t\t($gameMap.terrainTag(x, y) > 0 && $gameMap.terrainTag(x, y) <= tag &&\r\n\t\t\t\t $gameMap.isPassable(x2, y2, this.reverseDir(d)))) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif (!this.isMapPassable(x, y, d)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t//対立陣営がいるか調べる（探索用移動範囲演算）\r\n\t\tGame_CharacterBase.prototype.isSrpgCollidedWithOpponentsUnit = function(x, y, d, route) {\r\n\t\t\tvar x2 = $gameMap.roundXWithDirection(x, d);\r\n\t\t\tvar y2 = $gameMap.roundYWithDirection(y, d);\r\n\t\t\tvar events = $gameMap.eventsXyNt(x2, y2);\r\n\t\t\treturn events.some(function(event) {\r\n\t\t\t\tif ((event.isType() === 'actor' && $gameTemp.activeEvent().isType() === 'enemy') ||\r\n\t\t\t\t\t(event.isType() === 'enemy' && $gameTemp.activeEvent().isType() === 'actor') && !event.isErased()) {\r\n\t\t\t\t\tif ($gameTemp.isSrpgPriorityTarget()) {\r\n\t\t\t\t\t\tif ($gameTemp.isSrpgPriorityTarget() == event &&\r\n\t\t\t\t\t\t\t$gameTemp.isSrpgBestSearchRoute()[1].length > route.length) {\r\n\t\t\t\t\t\t\t$gameTemp.setSrpgBestSearchRoute([event, route]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif ($gameTemp.isSrpgBestSearchRoute()[1].length > route.length) {\r\n\t\t\t\t\t\t\t$gameTemp.setSrpgBestSearchRoute([event, route]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\t\r\n\t\tGame_CharacterBase.prototype.makeMoveTable = function(x, y, move, route, actor) {\r\n\t\t\tlet moveBudgetsInfo = $gameTemp.getMoveBudgetsRef();\r\n\t\t\tlet visitedNodes = moveBudgetsInfo.budgets\t\t\r\n\t\t\treturn this.makeMoveTableRecursive(x, y, move, visitedNodes, actor, moveBudgetsInfo.freshFor);\r\n\t\t}\r\n\t\t\r\n\t\tGame_CharacterBase.prototype.hasMoveBudgetRemaining = function(moveBudget, freshFor) {\r\n\t\t\tlet result = false;\r\n\t\t\tif(moveBudget.freshFor == freshFor){\r\n\t\t\t\tfor(let terrainId in moveBudget.budgets){\r\n\t\t\t\t\tif(moveBudget.budgets[terrainId].standard > 0){\r\n\t\t\t\t\t\tresult = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\t//移動範囲の計算\r\n\t\tGame_CharacterBase.prototype.makeMoveTableRecursive = function(x, y, move, visitedNodes, actor, freshFor) {\r\n\t\t\tvar _this = this;\r\n\t\t\t//console.log(\"checking tile \" + x + \", \" + y + \" with budget \" + JSON.stringify(moveBudget))\r\n\t\t\tconst blockedSpacesLookup = $statCalc.getBlockedSpacesLookup(null, $gameSystem.getUnitFactionInfo(actor));\r\n\t\t\tfunction isPassableTile(currentX, currentY, x, y, actor){\r\n\t\t\t\t\r\n\t\t\t\tif(x < 0){\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(x > $gameMap.width()){\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(y < 0){\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(y > $gameMap.height()){\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(ENGINE_SETTINGS.USE_TILE_PASSAGE && !$statCalc.ignoresTerrainCollision(actor, $gameMap.regionId(x, y) % 8)){\r\n\t\t\t\t\tvar direction = 0;\t\t\t\r\n\t\t\t\t\tif(currentX == x){\r\n\t\t\t\t\t\tif(currentY > y){\r\n\t\t\t\t\t\t\tdirection = 8; //up\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tdirection = 2; //down\r\n\t\t\t\t\t\t}\t\t\t\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif(currentX > x){\r\n\t\t\t\t\t\t\tdirection = 4; //left\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tdirection = 6; //right\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t\tif(!_this.isMapPassable(currentX, currentY, direction)){\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif($gameMap.regionId(x, y) == 0){\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(!$statCalc.canEnterTerrain(actor, $gameMap.regionId(x, y) % 8)){\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif($statCalc.isRegionBlocked(actor, $gameMap.regionId(x, y))){\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(!actor.isActor() && $gameSystem.enemySolidTerrain && $gameSystem.enemySolidTerrain[$gameMap.regionId(x, y)]){\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn !blockedSpacesLookup[x] || !blockedSpacesLookup[x][y];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet terrainDefs = $terrainTypeManager.getDefinitions();\r\n\t\t\tfor(let terrainId in terrainDefs){\r\n\t\t\t\tvisitedNodes[x][y].budgets[terrainId].standard = move + 1;\r\n\t\t\t\tvisitedNodes[x][y].budgets[terrainId].extra = 0;\r\n\t\t\t\tvisitedNodes[x][y].freshFor = freshFor;\r\n\t\t\t}\t\t\t\r\n\t\t\t\r\n\t\t\tlet pushedNodes = {};\r\n\t\t\tlet stack = [{x: x, y: y}];\r\n\t\t\t\r\n\t\t\twhile(stack.length){\r\n\t\t\t\tlet next = stack.shift();\r\n\t\t\t\thandleTile(next.x, next.y);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfunction handleTile(x, y){\r\n\r\n\t\t\t\tconst moveBudget = visitedNodes[x][y];\r\n\t\t\t\t\r\n\t\t\t\tif(moveBudget){\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar currentRegion = $gameMap.regionId(x, y) % 8; //1 air, 2 land, 3 water, 4 space\r\n\t\t\t\t\tvar moveCost = 1;\r\n\t\t\t\t\tif($gameTemp.moveList().length > 1){//no movecost for the start tile\r\n\t\t\t\t\t\tvar taggedCost = $gameMap.SRPGTerrainTag(x, y);\r\n\t\t\t\t\t\tif(taggedCost > 1){\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(!$statCalc.ignoresTerrainCost(actor, currentRegion)){\r\n\t\t\t\t\t\t\t\tmoveCost = taggedCost;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet terrainDef = $terrainTypeManager.getTerrainDefinition(currentRegion);\t\r\n\t\t\t\t\tif($statCalc.canBeOnTerrain(actor, currentRegion) < 2 && !$statCalc.ignoresTerrainCost(actor, currentRegion)){\r\n\t\t\t\t\t\tmoveCost*=terrainDef.moveCostMod;\r\n\t\t\t\t\t}\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (!_this.hasMoveBudgetRemaining(moveBudget, freshFor)) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!(pushedNodes[x] && pushedNodes[x][y])){\r\n\t\t\t\t\t\tif(!pushedNodes[x]){\r\n\t\t\t\t\t\t\tpushedNodes[x] = {};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tpushedNodes[x][y] = true;\r\n\t\t\t\t\t\t$gameTemp.pushMoveList([x, y, false]);\r\n\t\t\t\t\t}\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet extraBudgetRefTerrain = $statCalc.getSuperState(actor);\r\n\t\t\t\t\tif(extraBudgetRefTerrain == -1){\r\n\t\t\t\t\t\textraBudgetRefTerrain = currentRegion;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet checkedDirs = [\r\n\t\t\t\t\t\t{x: 0, y: -1},\r\n\t\t\t\t\t\t{x: 1, y: 0},\r\n\t\t\t\t\t\t{x: 0, y: 1},\r\n\t\t\t\t\t\t{x: -1, y: 0},\t\t\t\t\r\n\t\t\t\t\t];\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor(let dir of checkedDirs){\r\n\t\t\t\t\t\tlet newX = x + dir.x;\r\n\t\t\t\t\t\tlet newY = y + dir.y;\r\n\t\t\t\t\t\tif (isPassableTile(x, y, newX,newY, actor)) {\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tlet isUpgrade = false;\t\t\t\r\n\t\t\t\t\t\t\tlet targetBudget = visitedNodes[newX][newY];\r\n\t\t\t\t\t\t\tif(targetBudget){\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfor(let terrainId in moveBudget.budgets){\r\n\t\t\t\t\t\t\t\t\tif(moveBudget.budgets[terrainId].extra > 0 && terrainId == extraBudgetRefTerrain){\r\n\t\t\t\t\t\t\t\t\t\tlet newVal = Math.max(0, moveBudget.budgets[terrainId].extra - moveCost);\r\n\t\t\t\t\t\t\t\t\t\tif(newVal > 0){\r\n\t\t\t\t\t\t\t\t\t\t\tif(newVal > targetBudget.budgets[terrainId].extra || moveBudget.freshFor > targetBudget.freshFor){\r\n\t\t\t\t\t\t\t\t\t\t\t\ttargetBudget.budgets[terrainId].extra = newVal;\r\n\t\t\t\t\t\t\t\t\t\t\t\tisUpgrade = true;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tlet newVal = Math.max(0, moveBudget.budgets[terrainId].standard - moveCost);\r\n\t\t\t\t\t\t\t\t\t\tif(newVal > 0){\r\n\t\t\t\t\t\t\t\t\t\t\tif(newVal > targetBudget.budgets[terrainId].standard || moveBudget.freshFor > targetBudget.freshFor){\r\n\t\t\t\t\t\t\t\t\t\t\t\ttargetBudget.budgets[terrainId].standard = newVal;\r\n\t\t\t\t\t\t\t\t\t\t\t\tisUpgrade = true;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(isUpgrade){\t\t\t\t\r\n\t\t\t\t\t\t\t\ttargetBudget.freshFor = freshFor;\r\n\t\t\t\t\t\t\t\tstack.push({x: newX, y: newY});\r\n\t\t\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\r\n\t\t};\r\n\r\n\t\t//通行可能かを判定する（攻撃射程演算用）\r\n\t\tGame_CharacterBase.prototype.srpgRangeCanPass = function(x, y, d) {\r\n\t\t\tvar x2 = $gameMap.roundXWithDirection(x, d);\r\n\t\t\tvar y2 = $gameMap.roundYWithDirection(y, d);\r\n\t\t\tif (!$gameMap.isValid(x2, y2)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif ($gameMap.terrainTag(x2, y2) == 7) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\t\t\r\n\t\t//特殊射程の処理\r\n\t\tGame_CharacterBase.prototype.srpgRangeExtention = function(x, y, oriX, oriY, skill, range) {\r\n\t\t\tswitch (skill && skill.meta.specialRange) {\r\n\t\t\tcase 'king': \r\n\t\t\t\tif ((Math.abs(x - oriX) <= range / 2) && (Math.abs(y - oriY) <= range / 2)) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\tcase 'queen': \r\n\t\t\t\tif ((x == oriX || y == oriY) || (Math.abs(x - oriX) == Math.abs(y - oriY))) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\tcase 'luke': \r\n\t\t\t\tif (x == oriX || y == oriY) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\tcase 'bishop': \r\n\t\t\t\tif (Math.abs(x - oriX) == Math.abs(y - oriY)) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\tcase 'knight': \r\n\t\t\t\tif (!((x == oriX || y == oriY) || (Math.abs(x - oriX) == Math.abs(y - oriY)))) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\tdefault:\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t//移動可能かを判定する（イベント出現時用）\r\n\t\tGame_CharacterBase.prototype.srpgAppearCanPass = function(x, y, d) {\r\n\t\t\tvar x2 = $gameMap.roundXWithDirection(x, d);\r\n\t\t\tvar y2 = $gameMap.roundYWithDirection(y, d);\r\n\t\t\tif (!$gameMap.isValid(x2, y2)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif (!this.isMapPassable(x, y, d)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t//出現可能場所の計算\r\n\t\tGame_CharacterBase.prototype.makeAppearPoint = function(event, x, y) {\r\n\t\t\tvar events = $gameMap.eventsXyNt(x, y);\r\n\t\t\tif (events.length == 0 || (events.length == 1 && events[0] == event)) {\r\n\t\t\t\treturn [x,y];\r\n\t\t\t}\r\n\t\t\t//上方向を探索\r\n\t\t\tif (this.srpgAppearCanPass(x, y, 8)) {\r\n\t\t\t\treturn this.makeAppearPoint(event, x, y - 1);\r\n\t\t\t}\r\n\t\t\t//右方向を探索\r\n\t\t\tif (this.srpgAppearCanPass(x, y, 6)) {\r\n\t\t\t\treturn this.makeAppearPoint(event, x + 1, y);\r\n\t\t\t}\r\n\t\t\t//左方向を探索\r\n\t\t\tif (this.srpgAppearCanPass(x, y, 4)) {\r\n\t\t\t\treturn this.makeAppearPoint(event, x - 1, y);\r\n\t\t\t}\r\n\t\t\t//下方向を探索\r\n\t\t\tif (this.srpgAppearCanPass(x, y, 2)) {\r\n\t\t\t\treturn this.makeAppearPoint(event, x, y + 1);\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tvar Game_CharacterBase_update = Game_CharacterBase.prototype.update;\r\n\t\tGame_CharacterBase.prototype.update = function() {\r\n\t\t\tGame_CharacterBase_update.call(this);\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tvar Game_CharacterBase_initialize = Game_CharacterBase.prototype.initialize;\r\n\t\tGame_CharacterBase.prototype.initialize = function() {\r\n\t\t\tGame_CharacterBase_initialize.call(this);\r\n\t\t\tthis._floatOffset = 0;\r\n\t\t\tthis._floatAmount = 10;\r\n\t\t\tthis._animStartFloat = 0;\r\n\t\t\tthis._lastTargetFloat = 0;\r\n\t\t\t\r\n\t\t\tthis._floating = false;\r\n\t\t}\r\n\t\t\r\n\t\tvar Game_CharacterBase_screenY = Game_CharacterBase.prototype.screenY;\r\n\t\tGame_CharacterBase.prototype.screenY = function() {\r\n\t\t\tconst lerp = (x, y, a) => x * (1 - a) + y * a;\r\n\t\t\t\r\n\t\t\tvar value = Game_CharacterBase_screenY.call(this);\r\n\t\t\tvar battlerArray = $gameSystem.EventToUnit(this._eventId);\r\n\t\t\tvar floatSpeed = 8;\r\n\t\t\tif(battlerArray){\r\n\t\t\t\tlet flyInfo = $statCalc.getFlyingAnimInfo(battlerArray[1])\r\n\t\t\t\tlet floatAmount = 0;\r\n\t\t\t\tif(flyInfo){\r\n\t\t\t\t\tfloatAmount = flyInfo.floatAmount;\r\n\t\t\t\t}\r\n\t\t\t\tif(!this.transitioningFloat && this._lastTargetFloat != floatAmount){\r\n\t\t\t\t\tthis._lastTargetFloat = floatAmount;\r\n\t\t\t\t\tthis._animStartFloat = this._floatOffset * -1;\r\n\t\t\t\t\tthis.transitioningFloat = true;\r\n\t\t\t\t\tthis._floatOffset = 0;\r\n\t\t\t\t\tthis._floating = true;\t\t\t\t\t\t\r\n\t\t\t\t\tthis._floatTimer = (floatAmount - this._animStartFloat) * floatSpeed;\r\n\t\t\t\t\tthis._floatTimer = Math.abs(this._floatTimer);\r\n\t\t\t\t\tthis._floatTimerTotal = this._floatTimer;\r\n\t\t\t\t}\r\n\t\t\t\tif(this._floatTimer >= 0) {\r\n\t\t\t\t\tthis._floatTimer--;\t\t\t\t\t\r\n\t\t\t\t\tthis._floatOffset = lerp(floatAmount, this._animStartFloat, this._floatTimer/this._floatTimerTotal) * -1;\t\r\n\t\t\t\t\tif(isNaN(this._floatOffset)){\r\n\t\t\t\t\t\tthis._floatOffset = this._lastTargetFloat;\r\n\t\t\t\t\t\tthis._floatTimer = 0;\r\n\t\t\t\t\t}\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.transitioningFloat = false;\r\n\t\t\t\t}\r\n\t\t\t}\t\t\t\t\t\r\n\t\t\tvalue+=this._floatOffset;\r\n\t\t\treturn Math.round(value);\r\n\t\t};\r\n\t\t\r\n\t\t/*Extensions to character map animations*/\r\n\t\t\r\n\t\tGame_CharacterBase.prototype.requestAnimation = function(animationId, options) {\r\n\t\t\tthis._animationId = animationId;\r\n\t\t\tthis._animationOptions = options;\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t//====================================================================\r\n\t// ●Game_Player\r\n\t//====================================================================\r\n\t\t//プレイヤーの画像を変更する\r\n\t\t\r\n\t\tGame_Player.prototype.initialize = function() {\r\n\t\tGame_Character.prototype.initialize.call(this);\r\n\t\t\tthis.setTransparent($dataSystem.optTransparent);\r\n\t\t\tthis._topSpeed = ENGINE_SETTINGS.CURSOR_SPEED || 4;\r\n\t\t\tthis._initialSpeed = this._topSpeed;\r\n\t\t\tthis._moveSpeed = this._initialSpeed + 1;\r\n\t\t\tthis._tileCounter = 0;\r\n\t\t\tthis._speedResetCounter = 0;\r\n\t\t\tthis._followSpeed = 0;\r\n\t\t};\r\n\t\t\r\n\t\tGame_Player.prototype.setMoveSpeed = function(moveSpeed) {\r\n\t\t\tthis._moveSpeed = moveSpeed;\r\n\t\t};\r\n\t\t\r\n\t\tvar _SRPG_Game_Player_refresh = Game_Player.prototype.refresh;\r\n\t\tGame_Player.prototype.refresh = function() {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tif((typeof UltraMode7 != \"undefined\") && UltraMode7.isActive()){\r\n\t\t\t\t\tvar characterName = 'srpg_set7';\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar characterName = 'srpg_set';\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar characterIndex = 0;\r\n\t\t\t\tthis.setImage(characterName, characterIndex);\r\n\t\t\t\tthis._followers.refresh();\r\n\t\t\t} else {\r\n\t\t\t\t_SRPG_Game_Player_refresh.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tGame_Player.prototype.setFollowSpeed = function(speed) {\r\n\t\t\tthis._moveSpeed = speed;\r\n\t\t}\r\n\t\t\r\n\t\tGame_Player.prototype.clearFollowSpeed = function() {\r\n\t\t\tthis._moveSpeed = this._topSpeed + 1;\r\n\t\t}\r\n\t\t\r\n\t\tGame_Player.prototype.update = function(sceneActive) {\t\t\r\n\t\t\t/*if(this._followSpeed){\r\n\t\t\t\tthis._moveSpeed = this._followSpeed;\r\n\t\t\t}else if(Input.isPressed('shift')){\r\n\t\t\t\tthis._moveSpeed = ENGINE_SETTINGS.CURSOR_MAX_SPEED || this._topSpeed;\r\n\t\t\t} else {\r\n\t\t\t\tif(this._tileCounter > 1){\r\n\t\t\t\t\tthis._moveSpeed = this._topSpeed;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif(this._speedResetCounter <= 0){\r\n\t\t\t\t\t\tthis._moveSpeed = this._initialSpeed;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis._speedResetCounter--;\r\n\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}*/\r\n\t\t\tif(!this._moveSpeed){ //support for old save files\r\n\t\t\t\tthis._moveSpeed = ENGINE_SETTINGS.CURSOR_SPEED || 4;\r\n\t\t\t}\t\r\n\t\t\t//console.log(\"move speed: \"+this._moveSpeed);\r\n\t\t\t\r\n\t\t\tvar lastScrolledX = this.scrolledX();\r\n\t\t\tvar lastScrolledY = this.scrolledY();\r\n\t\t\tvar wasMoving = this.isMoving();\r\n\t\t\tthis.updateDashing();\r\n\t\t\tif (sceneActive) {\r\n\t\t\t\tthis.moveByInput();\r\n\t\t\t}\r\n\t\t\tGame_Character.prototype.update.call(this);\r\n\t\t\tthis.updateScroll(lastScrolledX, lastScrolledY);\r\n\t\t\tthis.updateVehicle();\r\n\t\t\tif (!this.isMoving()) {\r\n\t\t\t\tthis.updateNonmoving(wasMoving);\r\n\t\t\t\tif(!wasMoving){\r\n\t\t\t\t\t$gameTemp.clearDestination();\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\t\t\tthis._followers.update();\r\n\t\t};\r\n\r\n\t\t//プレイヤーの自動移動を設定する\r\n\t\tvar _SRPG_Game_Player_moveByInput = Game_Player.prototype.moveByInput;\r\n\t\tGame_Player.prototype.moveByInput = function() {\t\r\n\t\t\tthis.wasTouchMoved = false;\r\n\t\t\tif(!this.getInputDirection()){\t\t\t\r\n\t\t\t\tif(this._tileCounter > 0){\t\t\t\t\r\n\t\t\t\t\tthis._speedResetCounter = 10;\r\n\t\t\t\t}\r\n\t\t\t\tthis._tileCounter = 0;\t\t\r\n\t\t\t} else if(!this.isMoving()){\r\n\t\t\t\tthis._tileCounter++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t if ($gameSystem.isSRPGMode() == true && $gameTemp.isAutoMoveDestinationValid() == true &&\r\n\t\t\t\t!this.isMoving()) {\r\n\t\t\t\tvar x = $gameTemp.autoMoveDestinationX() - this.x;\r\n\t\t\t\tvar y = $gameTemp.autoMoveDestinationY() - this.y;\r\n\t\t\t\tif ($gameMap.isLoopHorizontal() == true) {\r\n\t\t　　        var minDisX = Math.abs($gameTemp.autoMoveDestinationX() - this.x);\r\n\t\t\t\t\tvar destX = $gameTemp.autoMoveDestinationX() > this.x ? $gameTemp.autoMoveDestinationX() - $gameMap.width() : $gameTemp.autoMoveDestinationX() + $gameMap.width();\r\n\t\t\t\t\tvar disX = Math.abs(destX - this.x);\r\n\t\t\t\t\tx = minDisX < disX ? x : x * -1;\r\n\t\t\t\t}\r\n\t\t\t\tif ($gameMap.isLoopVertical() == true) {\r\n\t\t\t　　    var minDisY = Math.abs($gameTemp.autoMoveDestinationY() - this.y);\r\n\t\t\t\t\tvar destY = $gameTemp.autoMoveDestinationY() > this.y ? $gameTemp.autoMoveDestinationY() - $gameMap.height() : $gameTemp.autoMoveDestinationY() + $gameMap.height();\r\n\t\t\t\t\tvar disY = Math.abs(destY - this.y);\r\n\t\t\t\t\ty = minDisY < disY ? y : y * -1;\r\n\t\t\t\t}\r\n\t\t\t\tif (x < 0) {\r\n\t\t\t\t\tif (y < 0) {\r\n\t\t\t\t\t\tthis.moveDiagonally(4, 8);\r\n\t\t\t\t\t} else if (y == 0) {\r\n\t\t\t\t\t\tthis.moveStraight(4);\r\n\t\t\t\t\t} else if (y > 0) {\r\n\t\t\t\t\t\tthis.moveDiagonally(4, 2);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (x == 0) {\r\n\t\t\t\t\tif (y < 0) {\r\n\t\t\t\t\t\tthis.moveStraight(8);\r\n\t\t\t\t\t} else if (y == 0) {\r\n\t\t\t\t\t\t$gameTemp.setAutoMoveDestinationValid(false);\r\n\t\t\t\t\t\t$gameTemp.setAutoMoveDestination(-1, -1);\r\n\t\t\t\t\t} else if (y > 0) {\r\n\t\t\t\t\t\tthis.moveStraight(2);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (x > 0) {\r\n\t\t\t\t\tif (y < 0) {\r\n\t\t\t\t\t\tthis.moveDiagonally(6, 8);\r\n\t\t\t\t\t} else if (y == 0) {\r\n\t\t\t\t\t\tthis.moveStraight(6);\r\n\t\t\t\t\t} else if (y > 0) {\r\n\t\t\t\t\t\tthis.moveDiagonally(6, 2);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\t\r\n\t\t\t//\tmapRetargetLock\r\n\t\t\t\tif (!this.isMoving() && this.canMove()) {\r\n\t\t\t\t\t\r\n\r\n\t\t\t\t\tif($gameTemp.cameraMode == \"touch\" && $gameSystem.isSRPGMode()){\t\r\n\t\t\t\t\t\tif($gameTemp.isDestinationValid()){\r\n\t\t\t\t\t\t\tvar x = $gameTemp.destinationX();\r\n\t\t\t\t\t\t\tvar y = $gameTemp.destinationY();\t\t\t\r\n\t\t\t\t\t\t\tif(!$gameTemp.isDraggingMap){\r\n\t\t\t\t\t\t\t\tvar validDestination = true;\r\n\t\t\t\t\t\t\t\tif($gameTemp.mapRetargetLock && $gameTemp.currentMapTargetTiles && $gameTemp.currentMapTargetTiles.length){\r\n\t\t\t\t\t\t\t\t\tvalidDestination = false;\r\n\t\t\t\t\t\t\t\t\tvar ctr = 0;\r\n\t\t\t\t\t\t\t\t\twhile(!validDestination && ctr < $gameTemp.currentMapTargetTiles.length){\r\n\t\t\t\t\t\t\t\t\t\tvar coords = $gameTemp.currentMapTargetTiles[ctr++];\r\n\t\t\t\t\t\t\t\t\t\tif(coords[0] == x && coords[1] == y){\r\n\t\t\t\t\t\t\t\t\t\t\tvalidDestination = true;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif(validDestination && x >= 0 && x < $gameMap.width() && y >= 0 && y < $gameMap.height() && (x != this.posX() || y != this.posY())){\r\n\t\t\t\t\t\t\t\t\tthis.locate(x, y, true);\r\n\t\t\t\t\t\t\t\t\tthis.wasTouchMoved = true;\r\n\t\t\t\t\t\t\t\t}\t\t\r\n\t\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\t\r\n\r\n\t\t\t\t\tvar direction = this.getInputDirection();\r\n\t\t\t\t\tvar validDestination = true;\r\n\t\t\t\t\tif($gameTemp.mapRetargetLock && $gameTemp.currentMapTargetTiles && $gameTemp.currentMapTargetTiles.length){\r\n\t\t\t\t\t\t// up: 8 down: 2 left: 4 right: 6\r\n\t\t\t\t\t\tvar x = this._realX;\r\n\t\t\t\t\t\tvar y = this._realY;\r\n\t\t\t\t\t\tif(direction == 8){\r\n\t\t\t\t\t\t\ty--;\r\n\t\t\t\t\t\t} else if(direction == 2){\r\n\t\t\t\t\t\t\ty++;\r\n\t\t\t\t\t\t} else if(direction == 6){\r\n\t\t\t\t\t\t\tx++;\r\n\t\t\t\t\t\t} else if(direction == 4){\r\n\t\t\t\t\t\t\tx--;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvalidDestination = false;\r\n\t\t\t\t\t\tvar ctr = 0;\r\n\t\t\t\t\t\twhile(!validDestination && ctr < $gameTemp.currentMapTargetTiles.length){\r\n\t\t\t\t\t\t\tvar coords = $gameTemp.currentMapTargetTiles[ctr++];\r\n\t\t\t\t\t\t\tif(coords[0] == x && coords[1] == y){\r\n\t\t\t\t\t\t\t\tvalidDestination = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(validDestination){\r\n\t\t\t\t\t\tif (direction > 0) {\r\n\t\t\t\t\t\t\t$gameTemp.clearDestination();\r\n\t\t\t\t\t\t} else if ($gameTemp.isDestinationValid()){\r\n\t\t\t\t\t\t\tvar x = $gameTemp.destinationX();\r\n\t\t\t\t\t\t\tvar y = $gameTemp.destinationY();\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tdirection = this.findDirectionTo(x, y);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (direction > 0) {\r\n\t\t\t\t\t\t\tthis.executeMove(direction);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}      \r\n\t\t};\r\n\t\t\r\n\t\tGame_Player.prototype.locate = function(x, y, keepCameraPosition, center) {\r\n\t\t\tvar mapDispCoords = $gameMap.getDisplayPos();\r\n\t\t\tvar centerX = mapDispCoords.x + this.centerX();\r\n\t\t\tvar centerY = mapDispCoords.y + this.centerY();\r\n\t\t\tGame_Character.prototype.locate.call(this, x, y);\r\n\t\t\tif(!keepCameraPosition){\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tvar deadZoneY;\r\n\t\t\t\tvar deadZoneX;\r\n\t\t\t\tif(ENGINE_SETTINGS.LOCK_CAMERA_TO_CURSOR || $gameTemp.lockCameraToCursor || center){\r\n\t\t\t\t\tdeadZoneY = 0;\r\n\t\t\t\t\tdeadZoneX = 0;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdeadZoneY = 3;\r\n\t\t\t\t\tdeadZoneX = 5;\r\n\t\t\t\t}\r\n\t\t\t\tvar isOutOfRange = false;\r\n\t\t\t\tif (y > centerY + deadZoneY) {\r\n\t\t\t\t\tisOutOfRange = true;\r\n\t\t\t\t}\r\n\t\t\t\tif (x < centerX - deadZoneX) {\r\n\t\t\t\t\tisOutOfRange = true;\r\n\t\t\t\t}\r\n\t\t\t\tif (x > centerX + deadZoneX) {\r\n\t\t\t\t\tisOutOfRange = true;\r\n\t\t\t\t}\r\n\t\t\t\tif (y < centerY - deadZoneY) {\r\n\t\t\t\t\tisOutOfRange = true;\r\n\t\t\t\t}\r\n\t\t\t\tif(isOutOfRange){\r\n\t\t\t\t\tthis.center(x, y);\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\t\t\t\r\n\t\t\tthis.makeEncounterCount();\r\n\t\t\tif (this.isInVehicle()) {\r\n\t\t\t\tthis.vehicle().refresh();\r\n\t\t\t}\r\n\t\t\tthis._followers.synchronize(x, y, this.direction());\r\n\t\t};\r\n\r\n\t\t\r\n\t\tGame_Player.prototype.updateEncounterCount = function() {\r\n\t\t\t\r\n\t\t};\r\n\t\t\r\n\t/* 戦闘中のイベント起動に関する処理\r\n\t * 戦闘中、通常のイベント内容は起動しないようにする\r\n\t * 戦闘中はユニットが選択されたと判断して、移動範囲演算とステータスの表示を行う(行動可能アクターなら行動する)。\r\n\t*/\r\n\t\t//戦闘中、ユニット上で決定キーが押された時の処理\r\n\t\tvar _SRPG_Game_Player_startMapEvent = Game_Player.prototype.startMapEvent;\r\n\t\tGame_Player.prototype.startMapEvent = function(x, y, triggers, normal) {\r\n\t\t\tif ($gameSystem.isSRPGMode()) {\r\n\t\t\t\tif (!$gameMap.isEventRunning() && $gameSystem.isBattlePhase() === 'actor_phase') {\r\n\t\t\t\t\tif(!$SRWGameState.updateMapEvent(x, y, triggers)){\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tif ($gameSystem.isSubBattlePhase() === 'normal') {\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t} else if ($gameSystem.isSubBattlePhase() === 'twin_selection') {\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t} \r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t_SRPG_Game_Player_startMapEvent.call(this, x, y, triggers, normal);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t//戦闘中、サブフェーズの状況に応じてプレイヤーの移動を制限する\r\n\t\tvar _SRPG_Game_Player_canMove = Game_Player.prototype.canMove;\r\n\t\tGame_Player.prototype.canMove = function() {\t\t\t\t\t\r\n\t\t\treturn $SRWGameState.canCursorMove() == 2 || ($SRWGameState.canCursorMove() > 0 && _SRPG_Game_Player_canMove.call(this));\r\n\t\t};\r\n\r\n\t\t//戦闘中、サブフェーズの状況に応じて決定キー・タッチの処理を変える\r\n\t\tvar _SRPG_Game_Player_triggerAction = Game_Player.prototype.triggerAction;\r\n\t\tGame_Player.prototype.triggerAction = function() {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tif(!$SRWGameState.updateTriggerAction(this)){\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn _SRPG_Game_Player_triggerAction.call(this);\r\n\t\t\t\t}\t\r\n\t\t\t} else {\r\n\t\t\t\treturn _SRPG_Game_Player_triggerAction.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t//戦闘中、隣接するイベントへの起動判定は行わない\r\n\t\tvar _SRPG_Game_Player_checkEventTriggerThere = Game_Player.prototype.checkEventTriggerThere;\r\n\t\tGame_Player.prototype.checkEventTriggerThere = function(triggers) {\r\n\t\t\tif ($gameSystem.isSRPGMode() == false) {\r\n\t\t\t\t_SRPG_Game_Player_checkEventTriggerThere.call(this, triggers);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t//戦闘中、接触による起動判定は行わない\r\n\t\tvar _SRPG_Game_Player_checkEventTriggerTouch = Game_Player.prototype.checkEventTriggerTouch;\r\n\t\tGame_Player.prototype.checkEventTriggerTouch = function(x, y) {\r\n\t\t\tif ($gameSystem.isSRPGMode() == false) {\r\n\t\t\t\t_SRPG_Game_Player_checkEventTriggerTouch.call(this, x, y);\r\n\t\t\t}\r\n\t\t};\r\n\t\r\n\t\tGame_Player.prototype.updateScroll = function(lastScrolledX, lastScrolledY) {\r\n\t\t\tif($gameTemp.cameraMode == \"touch\" && $gameSystem.isSRPGMode()){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar x1 = lastScrolledX;\r\n\t\t\tvar y1 = lastScrolledY;\r\n\t\t\tvar x2 = this.scrolledX();\r\n\t\t\tvar y2 = this.scrolledY();\r\n\t\t\tvar deadZoneY;\r\n\t\t\tvar deadZoneX;\r\n\t\t\tif(ENGINE_SETTINGS.LOCK_CAMERA_TO_CURSOR || $gameTemp.lockCameraToCursor){\r\n\t\t\t\tdeadZoneY = 0;\r\n\t\t\t\tdeadZoneX = 0;\r\n\t\t\t} else {\r\n\t\t\t\tdeadZoneY = 3;\r\n\t\t\t\tdeadZoneX = 5;\r\n\t\t\t}\r\n\t\t\tif (y2 > y1 && y2 > this.centerY() + deadZoneY) {\r\n\t\t\t\t$gameMap.scrollDown(y2 - y1);\r\n\t\t\t}\r\n\t\t\tif (x2 < x1 && x2 < this.centerX() - deadZoneX) {\r\n\t\t\t\t$gameMap.scrollLeft(x1 - x2);\r\n\t\t\t}\r\n\t\t\tif (x2 > x1 && x2 > this.centerX() + deadZoneX) {\r\n\t\t\t\t$gameMap.scrollRight(x2 - x1);\r\n\t\t\t}\r\n\t\t\tif (y2 < y1 && y2 < this.centerY() - deadZoneY) {\r\n\t\t\t\t$gameMap.scrollUp(y1 - y2);\r\n\t\t\t}\r\n\t\t};\r\n\t//====================================================================\r\n\t// ●Game_Follower\r\n\t//====================================================================\r\n\t\t//戦闘中、フォロワーが表示されないようにする\r\n\t\tvar _SRPG_Game_Follower_refresh = Game_Follower.prototype.refresh;\r\n\t\tGame_Follower.prototype.refresh = function() {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tthis.setImage('', 0);\r\n\t\t\t} else {\r\n\t\t\t\t_SRPG_Game_Follower_refresh.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t//====================================================================\r\n\t// ●Game_Event\r\n\t//====================================================================\r\n\t\t//初期化処理\r\n\t\tvar _SRPG_Game_Event_initMembers = Game_Event.prototype.initMembers;\r\n\t\tGame_Event.prototype.initMembers = function() {\r\n\t\t\t_SRPG_Game_Event_initMembers.call(this);\r\n\t\t\tthis._srpgForceRoute = [];\r\n\t\t\tthis._srpgEventType = '';\r\n\t\t};\r\n\r\n\t\t//ゲームページを返す\r\n\t\tGame_Event.prototype.pageIndex = function() {\r\n\t\t\treturn this._pageIndex;\r\n\t\t};\r\n\r\n\t\t//イベントかどうかを返す\r\n\t\tGame_Event.prototype.isEvent = function() {\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t//消去済みかどうかを返す\r\n\t\tGame_Event.prototype.isErased = function() {\r\n\t\t\treturn this._erased;\r\n\t\t};\r\n\r\n\t\t//消去済みフラグを消す\r\n\t\tGame_Event.prototype.appear = function() {\r\n\t\t\tthis._erased = false;\r\n\t\t\tthis.refresh();\r\n\t\t};\r\n\r\n\t\t//タイプを設定する\r\n\t\tGame_Event.prototype.setType = function(type) {\r\n\t\t\tthis._srpgEventType = type;\r\n\t\t};\r\n\r\n\t\t//タイプを返す\r\n\t\tGame_Event.prototype.isType = function() {\r\n\t\t\treturn this._srpgEventType;\r\n\t\t};\r\n\r\n\t\t// アクター・エネミーデータを元にイベントのグラフィックを変更する＋戦闘以外では元に戻す\r\n\t\tGame_Event.prototype.refreshImage = function() {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tvar battlerArray = $gameSystem.EventToUnit(this._eventId);\r\n\t\t\t\tif (!battlerArray || this.isErased()) {\r\n\t\t\t\t\treturn ;\r\n\t\t\t\t}\r\n\t\t\t\tvar type = battlerArray[0];\r\n\t\t\t\tvar unit = battlerArray[1];\r\n\t\t\t\tif (type === 'actor') {\r\n\t\t\t\t\tvar mechClass;\r\n\r\n\t\t\t\t\tif(unit.SRWStats && unit.SRWStats.mech){\r\n\t\t\t\t\t\tmechClass = unit.SRWStats.mech.id;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tmechClass = unit._classId;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(!$dataClasses[mechClass].meta.srpgOverworld){\r\n\t\t\t\t\t\tthrow \"Mech '\"+mechClass+\"' does not have an overworld sprite set!\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar overworldSpriteData = $dataClasses[mechClass].meta.srpgOverworld.split(\",\");\r\n\t\t\t\t\tcharacterName = overworldSpriteData[0];\r\n\t\t\t\t\tcharacterIndex = overworldSpriteData[1];\r\n\t\t\t\t\tthis.setImage(characterName, characterIndex);\r\n\t\t\t\t} else if (type === 'enemy') {\r\n\t\t\t\t\tvar characterName;\r\n\t\t\t\t\tvar characterIndex;        \r\n\t\t\t\t\tvar mechClass = unit._mechClass;\r\n\t\t\t\t\tif(mechClass){\r\n\t\t\t\t\t\tif(!$dataClasses[mechClass].meta.srpgOverworld){\r\n\t\t\t\t\t\t\tthrow \"Mech '\"+mechClass+\"' does not have an overworld sprite set!\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar overworldSpriteData = $dataClasses[mechClass].meta.srpgOverworld.split(\",\");\r\n\t\t\t\t\t\tcharacterName = overworldSpriteData[0];\r\n\t\t\t\t\t\tcharacterIndex = overworldSpriteData[1];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcharacterName = unit.enemy().meta.characterName;\r\n\t\t\t\t\t\tcharacterIndex = unit.enemy().meta.characterIndex;\r\n\t\t\t\t\t\tif (!characterName || !characterIndex) {\r\n\t\t\t\t\t\t\tcharacterName = 'monster.png';\r\n\t\t\t\t\t\t\tcharacterIndex = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.setImage(characterName, characterIndex);\r\n\t\t\t\t} else if (type === 'null') {\r\n\t\t\t\t\tthis.erase();\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (this.isErased()) {\r\n\t\t\t\t\tthis.appear();\r\n\t\t\t\t}\r\n\t\t\t\tvar page = this.page();\r\n\t\t\t\tif(page){\r\n\t\t\t\t\tvar image = page.image;\r\n\t\t\t\t\tif (image.tileId > 0) {\r\n\t\t\t\t\t\tthis.setTileImage(image.tileId);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.setImage(image.characterName, image.characterIndex);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.setDirection(image.direction);\r\n\t\t\t\t\tthis.setPattern(image.pattern);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tGame_Event.prototype.srpgMoveToPoint = function(targetPosition, ignoreMoveTable, ignoreObstacles) {\r\n\t\t\tthis._pendingMoveToPoint = true;\r\n\t\t\t\r\n\t\t\tthis._targetPosition = targetPosition;\r\n\t\t\tvar actorArray = $gameSystem.EventToUnit(this.eventId())\r\n\t\t\tif(actorArray || (ignoreMoveTable && ignoreObstacles)){\t\t\t\r\n\t\t\t\tvar actor;\r\n\t\t\t\tif(actorArray){\r\n\t\t\t\t\tactor = actorArray[1];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar list = $gameTemp.moveList();\r\n\t\t\t\tvar moveListLookup = {};\r\n\t\t\t\tlist.forEach(function(entry){\r\n\t\t\t\t\tif(!moveListLookup[entry[0]]){\r\n\t\t\t\t\t\tmoveListLookup[entry[0]] = [];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmoveListLookup[entry[0]][entry[1]] = true;\r\n\t\t\t\t});\r\n\t\t\t\t//construct grid representation for pathfinding\r\n\t\t\t\tvar occupiedPositions;\r\n\r\n\t\t\t\tif(actor){\r\n\t\t\t\t\toccupiedPositions = $statCalc.getOccupiedPositionsLookup(null, $gameSystem.getUnitFactionInfo(actor));\r\n\t\t\t\t} else {\r\n\t\t\t\t\toccupiedPositions = {};\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar pathfindingGrid = [];\r\n\t\t\t\tvar directionGrid = [];\r\n\t\t\t\tfor(var i = 0; i < $gameMap.width(); i++){\r\n\t\t\t\t\t\r\n\t\t\t\t\tpathfindingGrid[i] = [];\r\n\t\t\t\t\tdirectionGrid[i] = [];\r\n\t\t\t\t\tfor(var j = 0; j < $gameMap.height(); j++){\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar weight = 1 ;\r\n\t\t\t\t\t\tif(i >= 0 && j >= 0){\r\n\t\t\t\t\t\t\tif(!$statCalc.ignoresTerrainCost(actor, $gameMap.regionId(i, j) % 8)){\r\n\t\t\t\t\t\t\t\tweight+=$gameMap.SRPGTerrainTag(i, j);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(ignoreObstacles){\r\n\t\t\t\t\t\t\t\tpathfindingGrid[i][j] = 1;\r\n\t\t\t\t\t\t\t\tdirectionGrid[i][j] = {\r\n\t\t\t\t\t\t\t\t\ttop: true,\r\n\t\t\t\t\t\t\t\t\tbottom: true,\r\n\t\t\t\t\t\t\t\t\tleft: true,\r\n\t\t\t\t\t\t\t\t\tright: true\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tvar isCenterPassable = true;\r\n\t\t\t\t\t\t\t\tif(actor){\r\n\t\t\t\t\t\t\t\t\tisCenterPassable = !(occupiedPositions[i] && occupiedPositions[i][j]) \r\n\t\t\t\t\t\t\t\t\t&& $statCalc.canStandOnTile(actor, {x: i, y: j})\r\n\t\t\t\t\t\t\t\t\t&& (ignoreMoveTable || (moveListLookup[i] && moveListLookup[i][j]))\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tvar isTopPassable;\r\n\t\t\t\t\t\t\t\tvar isBottomPassable;\r\n\t\t\t\t\t\t\t\tvar isLeftPassable;\r\n\t\t\t\t\t\t\t\tvar isRightPassable;\r\n\t\t\t\t\t\t\t\tif(!isCenterPassable || $statCalc.ignoresTerrainCollision(actor, $gameMap.regionId(i, j) % 8) || !ENGINE_SETTINGS.USE_TILE_PASSAGE){\r\n\t\t\t\t\t\t\t\t\tisTopPassable = isCenterPassable;\r\n\t\t\t\t\t\t\t\t\tisBottomPassable = isCenterPassable;\r\n\t\t\t\t\t\t\t\t\tisLeftPassable = isCenterPassable;\r\n\t\t\t\t\t\t\t\t\tisRightPassable = isCenterPassable;\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tisTopPassable = $gameMap.isPassable(i, j, 8);\r\n\t\t\t\t\t\t\t\t\tisBottomPassable = $gameMap.isPassable(i, j, 2);\r\n\t\t\t\t\t\t\t\t\tisLeftPassable = $gameMap.isPassable(i, j, 4);\r\n\t\t\t\t\t\t\t\t\tisRightPassable = $gameMap.isPassable(i, j, 6);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tpathfindingGrid[i][j] = isCenterPassable ? weight : 0; \t\r\n\t\t\t\t\t\t\t\tdirectionGrid[i][j] = {\r\n\t\t\t\t\t\t\t\t\ttop: isTopPassable,\r\n\t\t\t\t\t\t\t\t\tbottom: isBottomPassable,\r\n\t\t\t\t\t\t\t\t\tleft: isLeftPassable,\r\n\t\t\t\t\t\t\t\t\tright: isRightPassable\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tpathfindingGrid[i][j] = 0;\r\n\t\t\t\t\t\t\tdirectionGrid[i][j] = {\r\n\t\t\t\t\t\t\t\ttop: false,\r\n\t\t\t\t\t\t\t\tbottom: false,\r\n\t\t\t\t\t\t\t\tleft: false,\r\n\t\t\t\t\t\t\t\tright: false\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tvar graph = new Graph(pathfindingGrid, directionGrid);\r\n\t\t\t\t\r\n\t\t\t\tvar startCoords = {x: this.posX(), y: this.posY()};\r\n\t\t\t\tvar startNode = graph.grid[startCoords.x][startCoords.y];\r\n\t\t\t\tvar endCoords = {x: this._targetPosition.x, y: this._targetPosition.y};\r\n\t\t\t\tvar endNode = graph.grid[endCoords.x][endCoords.y];\r\n\r\n\t\t\t\t\r\n\t\t\t\tvar path = astar.search(graph, startNode, endNode);\r\n\t\t\t\t\r\n\t\t\t\t$gamePlayer.followedEvent = this;\r\n\t\t\t\tthis._pathToCurrentTarget = path;\t\r\n\t\t\t\t\r\n\t\t\t\tthis.lastMoveCount = 0;\r\n\t\t\t\tif($gameTemp.originalPos() &&  graph.grid[$gameTemp.originalPos()[0]] && graph.grid[$gameTemp.originalPos()[0]][$gameTemp.originalPos()[1]]){\r\n\t\t\t\t\tvar originalNode = graph.grid[$gameTemp.originalPos()[0]][$gameTemp.originalPos()[1]];\r\n\t\t\t\t\tif(originalNode){\r\n\t\t\t\t\t\tvar pathFromOriginalPos = astar.search(graph, originalNode, endNode);\r\n\t\t\t\t\t\tif(pathFromOriginalPos){\r\n\t\t\t\t\t\t\tthis.lastMoveCount = pathFromOriginalPos.length;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\t\t\r\n\t\t}\r\n\t\t//移動ルートを設定する\r\n\t\tGame_Event.prototype.srpgMoveRouteForce = function(array) {\r\n\t\t\tthis._srpgForceRoute = [];\r\n\t\t\tfor (var i = 1; i < array.length; i++) {\r\n\t\t\t\tthis._srpgForceRoute.push(array[i]);\r\n\t\t\t}\r\n\t\t\tthis._srpgForceRoute.push(0);\r\n\t\t};\r\n\t\t\r\n\t\tGame_Event.prototype.updateTerrainInfo = function() {\r\n\t\t\tvar battlerArray = $gameSystem.EventToUnit(this._eventId);\r\n\t\t\tif(battlerArray && battlerArray[1]){\r\n\t\t\t\tvar regionId = $gameMap.regionId(this._x, this._y);\r\n\t\t\t\t$statCalc.setCurrentTerrainFromRegionIndex(battlerArray[1], regionId);\r\n\t\t\t\t$gameMap.initSRWTileProperties();\r\n\t\t\t\tif($gameSystem.regionAttributes && $gameSystem.regionAttributes[regionId]){\r\n\t\t\t\t\tvar def = $gameSystem.regionAttributes[regionId];\r\n\t\t\t\t\t$statCalc.setCurrentTerrainModsFromTilePropertyString(battlerArray[1], def.defense+\",\"+def.evasion+\",\"+def.hp_regen+\",\"+def.en_regen+\",\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$statCalc.setCurrentTerrainModsFromTilePropertyString(battlerArray[1], $gameMap.getTileProperties({x: this._x, y: this._y}));\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//設定されたルートに沿って移動する\r\n\t\tvar _SRPG_Game_Event_updateStop = Game_Event.prototype.updateStop;\r\n\t\tGame_Event.prototype.updateStop = function() {\r\n\t\t\tvar battlerArray = $gameSystem.EventToUnit(this._eventId);\r\n\t\t\tvar isActor = false;\r\n\t\t\tif(battlerArray && battlerArray[1]){\r\n\t\t\t\tvar isActor = battlerArray[1].isActor();\r\n\t\t\t}\t\r\n\t\t\tvar followMove = !this.isErased() && ($gameTemp.followMove || $gameSystem.isSubBattlePhase() == \"enemy_action\");\r\n\t\t\t\t\r\n\t\t\tif ($gameSystem.isSRPGMode() == true && this._srpgForceRoute.length > 0) {\r\n\t\t\t\tif (!this.isMoving()) {\r\n\t\t\t\t\tvar command = this._srpgForceRoute[0];\r\n\t\t\t\t\tthis._srpgForceRoute.shift();\r\n\t\t\t\t\tif (command == 0) {\r\n\t\t\t\t\t\tthis._srpgForceRoute = [];\r\n\t\t\t\t\t\t$gameSystem.setSrpgWaitMoving(false);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.moveStraight(command);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else if(this._pendingMoveToPoint){\r\n\t\t\t\tif (!this.isMoving()) {\r\n\t\t\t\t\t//Input.update();\r\n\t\t\t\t\tif(!$gameMap.isEventRunning() && (Input.isPressed(\"pagedown\") || Input.isLongPressed(\"pagedown\") || ConfigManager[\"skipUnitMove\"])){\t\t\t\t\t\r\n\t\t\t\t\t\tif(this._pathToCurrentTarget && this._pathToCurrentTarget.length){//avoid rare crash where this functional is called when the path has already been cleared\r\n\t\t\t\t\t\t\tvar targetPosition = this._pathToCurrentTarget[this._pathToCurrentTarget.length-1];\r\n\t\t\t\t\t\t\tthis._pathToCurrentTarget = [];\r\n\t\t\t\t\t\t\tthis.locate(targetPosition.x, targetPosition.y);\r\n\t\t\t\t\t\t\tif(followMove){\r\n\t\t\t\t\t\t\t\t$gamePlayer.locate(targetPosition.x, targetPosition.y);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\t\t\r\n\t\t\t\t\t\t$gamePlayer.clearFollowSpeed();\r\n\t\t\t\t\t\t$gamePlayer.followedEvent = null;\r\n\t\t\t\t\t\tthis._targetPosition = null;\r\n\t\t\t\t\t\tthis._pathToCurrentTarget = null;\r\n\t\t\t\t\t\tthis._pendingMoveToPoint = false;\r\n\t\t\t\t\t\t$gameTemp.followMove = false;\r\n\t\t\t\t\t\t$gameSystem.setSrpgWaitMoving(false);\r\n\t\t\t\t\t\t$gameSystem.updateAbilityZones(this.eventId());\r\n\t\t\t\t\t\tif(battlerArray && battlerArray[1]){\r\n\t\t\t\t\t\t\t$statCalc.invalidateAbilityCache(battlerArray[1]);\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//this.updateTerrainInfo();\r\n\t\t\t\t\t} else if(this._pathToCurrentTarget){\t\r\n\t\t\t\t\t\tlet moveSpeed = 6 + $gameSystem.getBattleSpeed();\r\n\t\t\t\t\t\tthis.setMoveSpeed(moveSpeed);\r\n\t\t\t\t\t\tif(followMove){\r\n\t\t\t\t\t\t\t$gamePlayer.setFollowSpeed(moveSpeed);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar nextPosition = this._pathToCurrentTarget.shift();\r\n\t\t\t\t\t\tif(nextPosition && (this._x != nextPosition.x || this._y != nextPosition.y)) {\r\n\t\t\t\t\t\t\tvar deltaX = nextPosition.x - this._x;\t\t\t\t\r\n\t\t\t\t\t\t\tvar deltaY = nextPosition.y - this._y;\r\n\t\t\t\t\t\t\tif(deltaX != 0){\r\n\t\t\t\t\t\t\t\tif(Math.sign(deltaX) == 1){\r\n\t\t\t\t\t\t\t\t\tthis.moveStraight(6); //right\r\n\t\t\t\t\t\t\t\t\tif(followMove){\r\n\t\t\t\t\t\t\t\t\t\t$gamePlayer.moveStraight(6);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tthis.moveStraight(4); //left\r\n\t\t\t\t\t\t\t\t\tif(followMove){\r\n\t\t\t\t\t\t\t\t\t\t$gamePlayer.moveStraight(4);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(deltaY != 0){\r\n\t\t\t\t\t\t\t\tif(Math.sign(deltaY) == 1){\r\n\t\t\t\t\t\t\t\t\tthis.moveStraight(2); //down\r\n\t\t\t\t\t\t\t\t\tif(followMove){\r\n\t\t\t\t\t\t\t\t\t\t$gamePlayer.moveStraight(2);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tthis.moveStraight(8); //up\r\n\t\t\t\t\t\t\t\t\tif(followMove){\r\n\t\t\t\t\t\t\t\t\t\t$gamePlayer.moveStraight(8);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\t\t$gameSystem.updateAbilityZones(this.eventId());\t\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t$gamePlayer.clearFollowSpeed();\r\n\t\t\t\t\t\t\tthis._targetPosition = null;\r\n\t\t\t\t\t\t\tthis._pathToCurrentTarget = null;\r\n\t\t\t\t\t\t\tthis._pendingMoveToPoint = false;\r\n\t\t\t\t\t\t\t$gameTemp.followMove = false;\r\n\t\t\t\t\t\t\t$gamePlayer.followedEvent = null;\r\n\t\t\t\t\t\t\t$gameSystem.setSrpgWaitMoving(false);\r\n\t\t\t\t\t\t\t$gameSystem.updateAbilityZones(this.eventId());\r\n\t\t\t\t\t\t\tif(battlerArray && battlerArray[1]){\r\n\t\t\t\t\t\t\t\t$statCalc.invalidateAbilityCache(battlerArray[1]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//this.updateTerrainInfo();\r\n\t\t\t\t\t\t}\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t_SRPG_Game_Event_updateStop.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tGame_Event.prototype.updateRoutineMove = function(){\r\n\t\t\tif (this._waitCount > 0) {\r\n\t\t\t\tthis._waitCount--;\r\n\t\t\t} else {\r\n\t\t\t\tthis.setMovementSuccess(true);\r\n\t\t\t\tvar command = this._moveRoute.list[this._moveRouteIndex];\r\n\t\t\t\tif (command) {\r\n\t\t\t\t\tthis.processMoveCommand(command);\r\n\t\t\t\t\tthis.advanceMoveRouteIndex();\r\n\t\t\t\t\t\r\n\t\t\t\t\t$gameSystem.updateAbilityZones(this.eventId());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tGame_Event.prototype.event = function() {\r\n\t\t\tif(!$dataMap.events[this._eventId]){\r\n\t\t\t\treturn JSON.parse('{\"id\":'+this._eventId+',\"name\":\"DYNAMIC_EVENT\",\"note\":\"\",\"pages\":[{\"conditions\":{\"actorId\":1,\"actorValid\":false,\"itemId\":1,\"itemValid\":false,\"selfSwitchCh\":\"A\",\"selfSwitchValid\":false,\"switch1Id\":1,\"switch1Valid\":false,\"switch2Id\":1,\"switch2Valid\":false,\"variableId\":1,\"variableValid\":false,\"variableValue\":0},\"directionFix\":false,\"image\":{\"tileId\":0,\"characterName\":\"\",\"direction\":2,\"pattern\":0,\"characterIndex\":0},\"list\":[{\"code\":0,\"indent\":0,\"parameters\":[]}],\"moveFrequency\":3,\"moveRoute\":{\"list\":[{\"code\":0,\"parameters\":[]}],\"repeat\":true,\"skippable\":false,\"wait\":false},\"moveSpeed\":3,\"moveType\":0,\"priorityType\":0,\"stepAnime\":false,\"through\":false,\"trigger\":0,\"walkAnime\":true}],\"x\":0,\"y\":0,\"meta\":{}}');\r\n\t\t\t}\r\n\t\t\treturn $dataMap.events[this._eventId];\r\n\t\t};\r\n\r\n\r\n\t\tGame_CharacterBase.prototype.characterIndex = function() {\r\n\t\t\tvar filename = this.characterName();\r\n\t\t\tvar index = this._characterIndex;\r\n\t\t\tif($gameSystem.characterIdexAliases && $gameSystem.characterIdexAliases[filename]){\r\n\t\t\t\t index = $gameSystem.characterIdexAliases[filename];\r\n\t\t\t}\r\n\t\t\treturn index;\r\n\t\t};\r\n\t\t\r\n\t\tGame_CharacterBase.prototype.moveStraight = function(d) {\r\n\t\t\tthis.setMovementSuccess(this.canPass(this._x, this._y, d));\r\n\t\t\tif (this.isMovementSucceeded()) {\r\n\t\t\t\tthis.setDirection(d);\r\n\t\t\t\tthis._prevX = this._x;\r\n\t\t\t\tthis._prevY = this._y;\r\n\t\t\t\tthis._x = $gameMap.roundXWithDirection(this._x, d);\r\n\t\t\t\tthis._y = $gameMap.roundYWithDirection(this._y, d);\r\n\t\t\t\tthis._realX = $gameMap.xWithDirection(this._x, this.reverseDir(d));\r\n\t\t\t\tthis._realY = $gameMap.yWithDirection(this._y, this.reverseDir(d));\r\n\t\t\t\tthis.increaseSteps();\r\n\t\t\t} else {\r\n\t\t\t\tthis.setDirection(d);\r\n\t\t\t\tthis.checkEventTriggerTouchFront(d);\r\n\t\t\t}\r\n\t\t};\r\n\t}\n\n//# sourceURL=webpack://src/./js/SRW_Core/Entities.js?");

/***/ }),

/***/ "./js/SRW Core/GameInterpreter.js":
/*!****************************************!*\
  !*** ./js/SRW Core/GameInterpreter.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n\t/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n\t\tpatches: patches,\r\n\t}); \r\n\t\r\n\tfunction patches(){};\r\n\t\r\n\tpatches.apply = function(){\r\n\t\t//====================================================================\r\n\t\t// ●Game_Interpreter\r\n\t\t//====================================================================\r\n\t\t// イベントＩＤをもとに、ユニット間の距離をとる\r\n\r\n\t\tGame_Interpreter.prototype.initialize = function(depth) {\r\n\t\t\tthis._depth = depth || 0;\r\n\t\t\tthis.checkOverflow();\r\n\t\t\tthis.clear();\r\n\t\t\tthis._branch = {};\r\n\t\t\tthis._params = [];\r\n\t\t\tthis._indent = 0;\r\n\t\t\tthis._frameCount = 0;\r\n\t\t\tthis._freezeChecker = 0;\r\n\t\t\t\r\n\t\t\tthis._lastFadeState = -1;\r\n\t\t\tthis._haltingCommands = {\r\n\t\t\t\t\r\n\t\t\t};\r\n\t\t};\r\n\t\t\r\n\t\tGame_Interpreter.prototype.setWaitMode = function(waitMode) {\r\n\t\t\t/*if(this.isTextSkipMode){\r\n\t\t\t\treturn;\r\n\t\t\t}*/\r\n\t\t\tthis._waitMode = waitMode;\r\n\t\t\tif(this._childInterpreter){\r\n\t\t\t\tthis._childInterpreter.setWaitMode(waitMode);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.isHaltingCommand = function(command) {\r\n\t\t\tif(command.code == 355){ // script call\r\n\t\t\t\t//loose checking for halting custom commands \r\n\t\t\t\tvar haltingScriptCommands = [\r\n\t\t\t\t\t\"showStageConditions\",\r\n\t\t\t\t\t\"showEnemyPhaseText\",\r\n\t\t\t\t\t\"awardSRPoint\",\r\n\t\t\t\t\t\"showMapAttackText\",\r\n\t\t\t\t\t\"destroyEvent\",\r\n\t\t\t\t\t\"destroyEvents\",\r\n\t\t\t\t\t\"applyActorSpirits\",\r\n\t\t\t\t\t\"applyEventSpirits\",\r\n\t\t\t\t\t\"processEnemyAppearQueue\",\r\n\t\t\t\t\t\"processUnitAppearQueue\",\r\n\t\t\t\t\t\"processDisappearQueue\",\r\n\t\t\t\t\t\"manualDeploy\",\r\n\t\t\t\t\t\"manualShipDeploy\",\r\n\t\t\t\t\t\"playBattleScene\",\t\t\t\r\n\t\t\t\t];\r\n\t\t\t\t\r\n\t\t\t\tvar hasHalting = false;\r\n\t\t\t\thaltingScriptCommands.forEach(function(entry){\r\n\t\t\t\t\tvar re = new RegExp(\".*\"+entry+\".*\",\"g\");\r\n\t\t\t\t\tif(command.parameters[0].match(re)){\r\n\t\t\t\t\t\thasHalting = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\treturn hasHalting;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(command.code == 356){ // plugin command\r\n\t\t\t\tvar haltingPluginCommands = {\r\n\t\t\t\t\t\"stopSkipping\": true,\r\n\t\t\t\t\t\"Intermission\": true\r\n\t\t\t\t}\r\n\t\t\t\tvar args = command.parameters[0].split(\" \");\r\n\t\t\t\tvar entry = args.shift();\r\n\t\t\t\treturn !!haltingPluginCommands[entry];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn !!this._haltingCommands[command.code];\r\n\t\t}\r\n\r\n\t\t// Script\r\n\t\tGame_Interpreter.prototype.command355 = function() {\r\n\t\t\tvar script = this.currentCommand().parameters[0] + '\\n';\r\n\t\t\twhile (this.nextEventCode() === 655) {\r\n\t\t\t\tthis._index++;\r\n\t\t\t\tscript += this.currentCommand().parameters[0] + '\\n';\r\n\t\t\t}\r\n\t\t\tvar result;\r\n\t\t\ttry {\r\n\t\t\t\tresult = eval(script);\r\n\t\t\t} catch (e){\r\n\t\t\t\tvar msg = \"\";\r\n\t\t\t\tmsg+=\"Error while executing a script command:\";\r\n\t\t\t\tmsg+=\"<br>\";\r\n\t\t\t\tif(e.message){\r\n\t\t\t\t\tmsg+=e.message;\r\n\t\t\t\t\tconsole.error(e.stack);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tmsg+=e;\r\n\t\t\t\t}\r\n\t\t\t\tmsg+=\"<br><br>Script body:<br>\";\r\n\t\t\t\tmsg+=\"<div style='overflow: auto; height: 28vh; max-width: 50vw; text-align: left; margin-left: auto; margin-right: auto; background-color: white; color: black; padding: 5px;text-shadow: none; font-size: 14px;'>\";\r\n\t\t\t\tmsg+=script.replace(/\\n/g, \"<br>\");\r\n\t\t\t\tmsg+=\"</div>\";\r\n\t\t\t\tthrow msg;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(result == null){\r\n\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tGame_Interpreter.prototype.distanceBetweenEvents = function(eventId1, eventId2) {\r\n\t\t\tvar event1 = $gameMap.event(eventId1);\r\n\t\t\tvar event2 = $gameMap.event(eventId2);\r\n\t\t\tvar deltaX = Math.abs(event1.posX() - event2.posX());\r\n\t\t\tvar deltaY = Math.abs(event1.posY() - event2.posY());\r\n\t\t\treturn deltaX + deltaY;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.EventDistance = function(variableId, eventId1, eventId2) {\r\n\t\t\tvar event1 = $gameMap.event(eventId1);\r\n\t\t\tvar event2 = $gameMap.event(eventId2);\r\n\t\t\tif (event1 && event2 && !event1.isErased() && !event2.isErased()) {\r\n\t\t\t\tvar value = $gameSystem.unitDistance(event1, event2);\r\n\t\t\t\t$gameVariables.setValue(variableId, value);\r\n\t\t\t} else {\r\n\t\t\t\t$gameVariables.setValue(variableId, 999);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t// アクターＩＤをもとに、ユニット間の距離をとる\r\n\t\tGame_Interpreter.prototype.ActorDistance = function(variableId, actorId1, actorId2) {\r\n\t\t\tvar eventId1 = $gameSystem.ActorToEvent(actorId1);\r\n\t\t\tvar eventId2 = $gameSystem.ActorToEvent(actorId2);\r\n\t\t\tthis.EventDistance(variableId, eventId1, eventId2);\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t// 特定のＩＤのイベントと全アクターの中で最短の距離をとる\r\n\t\tGame_Interpreter.prototype.fromActorMinimumDistance = function(variableId, eventId) {\r\n\t\t\tvar minDistance = 999;\r\n\t\t\tvar event1 = $gameMap.event(eventId);\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif (event.isType() === 'actor' || event.isType() === 'ship' || event.isType() === 'ship_event') {\r\n\t\t\t\t\tvar event2 = $gameMap.event(event.eventId());\r\n\t\t\t\t\tif (event1 && event2 && !event1.isErased() && !event2.isErased()) {\r\n\t\t\t\t\t\tvar value = $gameSystem.unitDistance(event1, event2);\r\n\t\t\t\t\t\tif (value < minDistance) {\r\n\t\t\t\t\t\t\tminDistance = value;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t$gameVariables.setValue(variableId, minDistance);\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t// 新規アクターを追加する（増援）\r\n\t\tGame_Interpreter.prototype.addActor = function(eventId, actorId) {\r\n\t\t\tvar actor_unit = $gameActors.actor(actorId);\r\n\t\t\tvar event = $gameMap.event(eventId);\r\n\t\t\tif (actor_unit && event) {\r\n\t\t\t\t$gameSystem.pushSrpgAllActors(event.eventId());\r\n\t\t\t\tactor_unit.initTp(); //TPを初期化\r\n\t\t\t\tvar bitmap = ImageManager.loadFace(actor_unit.faceName()); //顔グラフィックをプリロードする\r\n\t\t\t\tvar oldValue = $gameVariables.value(_existActorVarID);\r\n\t\t\t\t$gameVariables.setValue(_existActorVarID, oldValue + 1);\r\n\t\t\t\t$gameSystem.setEventToUnit(event.eventId(), 'actor', actor_unit.actorId());\r\n\t\t\t\tevent.setType('actor');\r\n\t\t\t\tvar xy = event.makeAppearPoint(event, event.posX(), event.posY());\r\n\t\t\t\tevent.setPosition(xy[0], xy[1]);\r\n\t\t\t\t$gameMap.setEventImages();\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\tGame_Interpreter.prototype.setMasteryText = function(text){\r\n\t\t\t$gameVariables.setValue(_masteryConditionText, text);\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.setVictoryText = function(text){\r\n\t\t\t$gameVariables.setValue(_victoryConditionText, text);\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.setDefeatText = function(text){\r\n\t\t\t$gameVariables.setValue(_defeatConditionText, text);\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.showStageConditions = function(){\r\n\t\t\t/*if (!$gameMessage.isBusy()) {\r\n\t\t\t\t$gameMessage.setFaceImage(\"\", \"\");\r\n\t\t\t\t$gameMessage.setBackground(0);\r\n\t\t\t\t$gameMessage.setPositionType(1);\r\n\t\t\t\t$gameMessage.add(APPSTRINGS.GENERAL.label_victory_condition + \": \"+($gameVariables.value(_victoryConditionText) || \"\"));\r\n\t\t\t\t$gameMessage.add(APPSTRINGS.GENERAL.label_defeat_condition + \": \"+($gameVariables.value(_defeatConditionText) || \"\"));\r\n\t\t\t\tvar masteryText = $gameVariables.value(_masteryConditionText);\r\n\t\t\t\tif($SRWSaveManager.isMapSRPointLocked($gameMap.mapId())){\r\n\t\t\t\t\tmasteryText = APPSTRINGS.GENERAL.label_mastery_locked;\r\n\t\t\t\t}\r\n\t\t\t\t$gameMessage.add(APPSTRINGS.GENERAL.label_mastery_condition + \": \"+(masteryText || \"\"));\r\n\t\t\t\t\r\n\t\t\t\tthis._index++;\r\n\t\t\t\tthis.setWaitMode('message');\r\n\t\t\t}*/\r\n\t\t\t$gameTemp.pushMenu = \"stage_conditions\";\r\n\t\t\t$gameTemp.contextState = $gameSystem.isSubBattlePhase();\r\n\t\t\t$gameSystem.setSubBattlePhase(\"stage_conditions\");\t\r\n\t\t\t\r\n\t\t\t$gameTemp.showingStageConditions = true;\r\n\t\t\tthis.setWaitMode('stage_conditions');\r\n\t\t\tthis._index++;\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\r\n\t\tGame_Interpreter.prototype.showEnemyPhaseText = function(){\r\n\t\t\tif (!$gameMessage.isBusy()) {\r\n\t\t\t\t$gameMessage.setFaceImage(\"\", \"\");\r\n\t\t\t\t$gameMessage.setBackground(1);\r\n\t\t\t\t$gameMessage.setPositionType(1);\r\n\t\t\t\t\r\n\t\t\t\tvar text;\r\n\t\t\t\tif($gameSystem.isEnemyPhase()){\r\n\t\t\t\t\ttext =  APPSTRINGS.GENERAL.label_enemy_phase;\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttext =  APPSTRINGS.GENERAL.label_ally_phase;\r\n\t\t\t\t}\r\n\t\t\t\tvar colorId;\r\n\t\t\t\tif($gameTemp.currentFaction == 0){\r\n\t\t\t\t\tcolorId = 18;\r\n\t\t\t\t}\r\n\t\t\t\tif($gameTemp.currentFaction == 1){\r\n\t\t\t\t\tcolorId = 3;\r\n\t\t\t\t}\r\n\t\t\t\tif($gameTemp.currentFaction == 2){\r\n\t\t\t\t\tcolorId = 14;\r\n\t\t\t\t}\r\n\t\t\t\t$gameMessage.add(\"\\\\TA[1]\\n\\\\>\\\\C[\"+colorId+\"]\\\\{\"+text+\"\\n\\\\.\\\\.\\\\^\");\t//\\\\|\t\t\t\r\n\t\t\t\tthis._index++;\r\n\t\t\t\t\r\n\t\t\t\t$gameSystem.pushTextLog(\"\", \"\", text);\r\n\t\t\t\t\r\n\t\t\t\r\n\t\t\t\tthis.setWaitMode('message');\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.awardSRPoint = function(){\t\r\n\t\t\tvar mapId = $gameMap.mapId();\r\n\t\t\tvar isNewlyAwarded = $SRWSaveManager.awardMapSRPoint(mapId);\t\r\n\t\t\tif(isNewlyAwarded){\r\n\t\t\t\tif(ENGINE_SETTINGS.MASTERY_REWARDS){\r\n\t\t\t\t\tif(ENGINE_SETTINGS.MASTERY_REWARDS.PP){\r\n\t\t\t\t\t\tvar scope = ENGINE_SETTINGS.MASTERY_REWARDS.PP.SCOPE;\r\n\t\t\t\t\t\tvar actors = [];\r\n\t\t\t\t\t\tif(scope == \"deployed\"){\r\n\t\t\t\t\t\t\tactors = $statCalc.getAllActors(\"actor\");\r\n\t\t\t\t\t\t} else if(scope == \"unlocked\"){\r\n\t\t\t\t\t\t\tactors = $gameParty.allMembers();\r\n\t\t\t\t\t\t} else if(scope == \"all\"){\r\n\t\t\t\t\t\t\tfor(var i = 0; i < $dataActors.length; i++){\r\n\t\t\t\t\t\t\t\tvar actor = $gameActors.actor(i);\r\n\t\t\t\t\t\t\t\tactors.push(actor);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\tactors.forEach(function(actor){\r\n\t\t\t\t\t\t\tif(actor && actor.isActor()){\r\n\t\t\t\t\t\t\t\t$statCalc.addPP(actor, ENGINE_SETTINGS.MASTERY_REWARDS.PP.AMOUNT);\t\r\n\t\t\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(ENGINE_SETTINGS.MASTERY_REWARDS.FUNDS){\r\n\t\t\t\t\t\t$gameParty.gainGold(ENGINE_SETTINGS.MASTERY_REWARDS.FUNDS);\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\r\n\t\t\t\t\r\n\t\t\t\tvar se = {};\r\n\t\t\t\tse.name = 'SRWMastery';\r\n\t\t\t\tse.pan = 0;\r\n\t\t\t\tse.pitch = 100;\r\n\t\t\t\tse.volume = 80;\r\n\t\t\t\tAudioManager.playSe(se);\r\n\t\t\t\t$gameVariables.setValue(_masteryConditionText, APPSTRINGS.GENERAL.label_mastery_completed);\t\r\n\t\t\t\t\r\n\t\t\t\tif (!$gameMessage.isBusy()) {\r\n\t\t\t\t\t$gameMessage.setFaceImage(\"\", \"\");\r\n\t\t\t\t\t$gameMessage.setBackground(1);\r\n\t\t\t\t\t$gameMessage.setPositionType(1);\r\n\t\t\t\t\t$gameMessage.add(\"\\\\TA[1]\\n\" + APPSTRINGS.GENERAL.label_mastery_completed_message);\t\t\t\t\r\n\t\t\t\t\tthis._index++;\r\n\t\t\t\t\tthis.setWaitMode('message');\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.showMapAttackText = function(faceName, faceIdx, text){\r\n\t\t\tif (!$gameMessage.isBusy()) {\r\n\t\t\t\t$gameMessage.setFaceImage(faceName, faceIdx);\r\n\t\t\t\t$gameMessage.setPositionType(2);\r\n\t\t\t\t$gameMessage.setBackground(0);\r\n\t\t\t\t$gameMessage.add(text);\t\t\t\t\r\n\t\t\t\tthis._index++;\r\n\t\t\t\tthis.setWaitMode('message');\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.isActorDestructionQueued  = function(id){\r\n\t\t\tvar result = false;\r\n\t\t\tif($gameTemp.deathQueue && $gameTemp.deathQueue.length){\r\n\t\t\t\t$gameTemp.deathQueue.forEach(function(queuedDeath){\r\n\t\t\t\t\tif(queuedDeath.actor.isActor() && queuedDeath.actor.actorId() == id && (!$gameTemp.preventedDeathQuotes || !$gameTemp.preventedDeathQuotes[id])){\r\n\t\t\t\t\t\tresult = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.isEnemyDestructionQueued  = function(id){\r\n\t\t\tvar result = false;\r\n\t\t\tif($gameTemp.deathQueue && $gameTemp.deathQueue.length){\r\n\t\t\t\t$gameTemp.deathQueue.forEach(function(queuedDeath){\r\n\t\t\t\t\tif(!queuedDeath.actor.isActor() && queuedDeath.actor.enemyId() == id){\r\n\t\t\t\t\t\tresult = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.isEventDestructionQueued  = function(id){\r\n\t\t\tvar result = false;\r\n\t\t\tif($gameTemp.deathQueue && $gameTemp.deathQueue.length){\r\n\t\t\t\t$gameTemp.deathQueue.forEach(function(queuedDeath){\r\n\t\t\t\t\tif(queuedDeath.actor.event.eventId() == id){\r\n\t\t\t\t\t\tresult = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\t//warning: this function will only return the count once per requested combination per completed attack sequence\r\n\t\t//repeated calls like during a map attack will return 0!\r\n\t\tGame_Interpreter.prototype.getPendingDestructionCount  = function(type, ofFactionId, byFactionId){\r\n\t\t\tvar result = 0;\r\n\t\t\tif($gameTemp.deathQueue && $gameTemp.deathQueue.length){\r\n\t\t\t\t$gameTemp.deathQueue.forEach(function(queuedDeath){\r\n\t\t\t\t\tif(!queuedDeath.countedKeys){\r\n\t\t\t\t\t\tqueuedDeath.countedKeys = {};\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst lookupKey = type+\"_\"+ofFactionId+\"_\"+byFactionId;\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tif(!queuedDeath.countedKeys[lookupKey]){\t//hacky way to make it so a destruction is only counted once per attack. Otherwise they would be counted double for each enemy destroyed in a map attack\r\n\t\t\t\t\t\tqueuedDeath.countedKeys[lookupKey] = true;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlet isType;\r\n\t\t\t\t\t\tif(type == null){\r\n\t\t\t\t\t\t\tisType = true;\r\n\t\t\t\t\t\t} else if(type == \"actor\"){\r\n\t\t\t\t\t\t\tisType = queuedDeath.actor.isActor();\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tisType = queuedDeath.actor.isEnemy();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tconst isOwnFaction = $gameSystem.getFactionId(queuedDeath.actor) == ofFactionId || ofFactionId == null;\r\n\t\t\t\t\t\tconst isDestroyerFaction = $gameSystem.getFactionId(queuedDeath.destroyer) == byFactionId || byFactionId == null;\t\t\t\t\r\n\t\t\t\t\t\tif(isType && isOwnFaction && isDestroyerFaction){\r\n\t\t\t\t\t\t\tresult++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.isActorBelowHP  = function(id, hp){\r\n\t\t\treturn $statCalc.isActorBelowHP(id, hp);\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.isEnemyBelowHP  = function(id, hp){\r\n\t\t\treturn $statCalc.isEnemyBelowHP(id, hp);\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.isEventBelowHP  = function(id, hp){\r\n\t\t\treturn $statCalc.isEventBelowHP(id, hp);\r\n\t\t}\r\n\t\t\r\n\t\tGame_Interpreter.prototype.isActorBelowHPPercent  = function(id, hp){\r\n\t\t\treturn $statCalc.isActorBelowHPPercent(id, hp);\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.isEnemyBelowHPPercent  = function(id, hp){\r\n\t\t\treturn $statCalc.isEnemyBelowHPPercent(id, hp);\r\n\t\t}\r\n\t\t\r\n\t\tGame_Interpreter.prototype.isEventBelowHPPercent  = function(id, hp){\r\n\t\t\treturn $statCalc.isEventBelowHPPercent(id, hp);\r\n\t\t}\r\n\t\t\r\n\t\tGame_Interpreter.prototype.updateCountAfterDestruction = function (actor){\r\n\t\t\tif (actor.isActor(0)) {\r\n\t\t\t\tvar oldValue = $gameVariables.value(_existActorVarID);\r\n\t\t\t\t$gameVariables.setValue(_existActorVarID, oldValue - 1);\r\n\t\t\t\t\r\n\t\t\t\tvar oldValue = $gameVariables.value(_actorsDestroyed);\r\n\t\t\t\t$gameVariables.setValue(_actorsDestroyed, oldValue + 1);\r\n\t\r\n\t\t\t} else if(!$gameSystem.isFriendly(actor, \"player\")){\r\n\t\t\t\tvar oldValue = $gameVariables.value(_existEnemyVarID);\r\n\t\t\t\t$gameVariables.setValue(_existEnemyVarID, oldValue - 1);\r\n\t\t\t\t\r\n\t\t\t\tvar oldValue = $gameVariables.value(_enemiesDestroyed);\r\n\t\t\t\t$gameVariables.setValue(_enemiesDestroyed, oldValue + 1);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.cancelActorDestruction  = function(id, updateCount){\r\n\t\t\tvar _this = this;\r\n\t\t\tvar tmp = [];\r\n\t\t\tif($gameTemp.deathQueue && $gameTemp.deathQueue.length){\t\t\r\n\t\t\t\t$gameTemp.deathQueue.forEach(function(queuedDeath){\r\n\t\t\t\t\tif(!queuedDeath.actor.isActor() || queuedDeath.actor.actorId() != id){\r\n\t\t\t\t\t\ttmp.push(queuedDeath);\r\n\t\t\t\t\t} else if(updateCount){\r\n\t\t\t\t\t\t_this.updateCountAfterDestruction(queuedDeath.actor);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\t$gameTemp.deathQueue = tmp;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.cancelEnemyDestruction  = function(id, updateCount){\r\n\t\t\tvar _this = this;\r\n\t\t\tvar tmp = [];\r\n\t\t\tif($gameTemp.deathQueue && $gameTemp.deathQueue.length){\t\t\r\n\t\t\t\t$gameTemp.deathQueue.forEach(function(queuedDeath){\r\n\t\t\t\t\tif(queuedDeath.actor.isActor() || queuedDeath.actor.enemyId() != id){\r\n\t\t\t\t\t\ttmp.push(queuedDeath);\r\n\t\t\t\t\t} else if(updateCount){\r\n\t\t\t\t\t\t_this.updateCountAfterDestruction(queuedDeath.actor);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\t$gameTemp.deathQueue = tmp;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.cancelEventDestruction  = function(id, updateCount){\r\n\t\t\tvar _this = this;\r\n\t\t\tvar tmp = [];\r\n\t\t\tif($gameTemp.deathQueue && $gameTemp.deathQueue.length){\t\t\r\n\t\t\t\t$gameTemp.deathQueue.forEach(function(queuedDeath){\r\n\t\t\t\t\tif(queuedDeath.actor.event && queuedDeath.actor.event.eventId() != id){\r\n\t\t\t\t\t\ttmp.push(queuedDeath);\r\n\t\t\t\t\t} else if(updateCount){\r\n\t\t\t\t\t\t_this.updateCountAfterDestruction(queuedDeath.actor);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\t$gameTemp.deathQueue = tmp;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.addEnemiesFromObj = function(params) {\r\n\t\t\tfor(var i = startId; i <= endId; i++){\r\n\t\t\t\tthis.addEnemy(\r\n\t\t\t\t\tparams.toAnimQueue, \r\n\t\t\t\t\ti, \r\n\t\t\t\t\tparams.enemyId, \r\n\t\t\t\t\tparams.mechClass, \r\n\t\t\t\t\tparams.level, \r\n\t\t\t\t\tparams.mode, \r\n\t\t\t\t\tparams.targetId, \r\n\t\t\t\t\tparams.items, \r\n\t\t\t\t\tparams.squadId, \r\n\t\t\t\t\tparams.targetRegion,\r\n\t\t\t\t\tparams.factionId,\r\n\t\t\t\t\tparams.counterBehavior,\r\n\t\t\t\t\tparams.attackBehavior,\r\n\t\t\t\t\tparams.noUpdateCount,\r\n\t\t\t\t\tparams.attribute1,\r\n\t\t\t\t\tparams.attribute2,\r\n\t\t\t\t\tparams.boxDrop,\r\n\t\t\t\t\tparams.targetBox\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.addEnemies = function(toAnimQueue, startId, endId, enemyId, mechClass, level, mode, targetId, items, squadId, targetRegion, factionId, attribute1, attribute2, boxDrop, targetBox) {\r\n\t\t\tfor(var i = startId; i <= endId; i++){\r\n\t\t\t\tthis.addEnemy(toAnimQueue, i, enemyId, mechClass, level, mode, targetId, items, squadId, targetRegion, factionId, attribute1, attribute2, boxDrop, targetBox);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.addEnemyFromObj = function(params){\r\n\t\t\tthis.addEnemy(\r\n\t\t\t\tparams.toAnimQueue, \r\n\t\t\t\tparams.eventId, \r\n\t\t\t\tparams.enemyId, \r\n\t\t\t\tparams.mechClass, \r\n\t\t\t\tparams.level, \r\n\t\t\t\tparams.mode, \r\n\t\t\t\tparams.targetId, \r\n\t\t\t\tparams.items, \r\n\t\t\t\tparams.squadId, \r\n\t\t\t\tparams.targetRegion,\r\n\t\t\t\tparams.factionId,\r\n\t\t\t\tparams.counterBehavior,\r\n\t\t\t\tparams.attackBehavior,\r\n\t\t\t\tparams.noUpdateCount,\r\n\t\t\t\tparams.attribute1,\r\n\t\t\t\tparams.attribute2,\r\n\t\t\t\tparams.boxDrop,\r\n\t\t\t\tparams.targetBox,\r\n\t\t\t\tparams.AIFlags,\r\n\t\t\t\tparams.kills,\r\n\t\t\t\tparams.lockedDropSlots\r\n\t\t\t);\r\n\t\t}\r\n\t\t\r\n\t\tGame_Interpreter.prototype.parseDeployAssignment = function(assignments) {\r\n\t\t\tlet unrolledList = {};\r\n\t\t\tfor(let entry of Object.keys(assignments)){\r\n\t\t\t\tif(entry){\r\n\t\t\t\t\tlet targetValue = assignments[entry];\r\n\t\t\t\t\tlet parts = entry.split(\"-\");\r\n\t\t\t\t\tlet start;\r\n\t\t\t\t\tlet end;\r\n\t\t\t\t\tif(parts.length == 1){\r\n\t\t\t\t\t\tif(parts[0] == \"default\"){\r\n\t\t\t\t\t\t\tstart = end = -1;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tstart = end = parts[0] * 1;\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tstart = parts[0] * 1;\r\n\t\t\t\t\t\tend = parts[1] * 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor(let i = start; i <= end; i++){\r\n\t\t\t\t\t\tunrolledList[i] = targetValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\treturn unrolledList;\r\n\t\t}\r\n\t\t\r\n\t\tGame_Interpreter.prototype.addEnemiesFromSettings = function(settings){\r\n\t\t\tlet unrolledParams = {};\r\n\t\t\tfor(let paramSetting in settings.params){\r\n\t\t\t\tunrolledParams[paramSetting] = this.parseDeployAssignment(settings.params[paramSetting]);\r\n\t\t\t}\r\n\t\t\tfunction getParamSetting(param, eventId){\r\n\t\t\t\tif(!unrolledParams[param]){\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t\tif(unrolledParams[param][eventId] != null){\r\n\t\t\t\t\treturn unrolledParams[param][eventId];\r\n\t\t\t\t}\r\n\t\t\t\treturn unrolledParams[param][-1];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor (let eventId = settings.events.start; eventId <= settings.events.end; eventId++) {\r\n\t\t\t\tthis.addEnemyFromObj({\r\n\t\t\t\t\ttoAnimQueue: getParamSetting(\"toAnimQueue\", eventId),\r\n\t\t\t\t\teventId: eventId,\r\n\t\t\t\t\tenemyId: getParamSetting(\"enemyId\", eventId),\r\n\t\t\t\t\tmechClass: getParamSetting(\"mechClass\", eventId),\r\n\t\t\t\t\tlevel: getParamSetting(\"level\", eventId) || 1,\r\n\t\t\t\t\tmode: getParamSetting(\"mode\", eventId) || \"\",\r\n\t\t\t\t\tattribute1: getParamSetting(\"attribute1\", eventId) || \"\",\r\n\t\t\t\t\titems: getParamSetting(\"items\", eventId) || [],\r\n\t\t\t\t\tsquadId: getParamSetting(\"squadId\", eventId),\r\n\t\t\t\t\ttargetRegion: getParamSetting(\"targetRegion\", eventId),\r\n\t\t\t\t\tAIFlags: getParamSetting(\"AIFlags\", eventId),\r\n\t\t\t\t\tkills: getParamSetting(\"kills\", eventId) || 0,\r\n\t\t\t\t\tlockedDropSlots: getParamSetting(\"lockedDropSlots\", eventId),\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 新規エネミーを追加する（増援）\r\n\t\tGame_Interpreter.prototype.addEnemy = function(toAnimQueue, eventId, enemyId, mechClass, level, mode, targetId, items, squadId, targetRegion, factionId, counterBehavior, attackBehavior, noUpdateCount, attribute1, attribute2, boxDrop, targetBox, AIFlags, kills, lockedDropSlots) {\r\n\t\t\tif(!$dataEnemies[enemyId] || !$dataEnemies[enemyId].meta || !Object.keys($dataEnemies[enemyId].meta).length){\r\n\t\t\t\tthrow(\"Attempted to create an enemy pilot with id '\"+enemyId+\"' which does not have SRW data.\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(!$dataClasses[mechClass] || !$dataClasses[mechClass].meta || !Object.keys($dataClasses[mechClass].meta).length){\r\n\t\t\t\tthrow(\"Attempted to create a mech with id '\"+mechClass+\"' which does not have SRW data.\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar enemy_unit = new Game_Enemy(enemyId, 0, 0);\r\n\t\t\tenemy_unit.AIFlags = AIFlags;\r\n\t\t\tvar event = $gameMap.event(eventId);\r\n\t\t\t\r\n\t\t\tlet tmp;\r\n\t\t\tif(lockedDropSlots){\r\n\t\t\t\ttmp = {};\t\r\n\t\t\t\tfor(let entry of lockedDropSlots){\r\n\t\t\t\t\ttmp[entry] = true;\r\n\t\t\t\t}\r\n\t\t\t}\t\t\t\r\n\t\t\tenemy_unit.lockedDropSlots = tmp;\r\n\t\t\t\r\n\t\t\tevent._appearSpriteInitialized = false;\r\n\t\t\tevent._destroySpriteInitialized = false;\r\n\t\t\tif($dataClasses[mechClass].meta.srpgOverworld){\r\n\t\t\t\tlet parts = $dataClasses[mechClass].meta.srpgOverworld.split(\",\");\r\n\t\t\t\tImageManager.loadCharacter(parts[0]);\r\n\t\t\t}\t\t\r\n\t\t\t\r\n\t\t\tif(typeof squadId == \"undefined\" || squadId == \"\"){\r\n\t\t\t\tsquadId = -1;\r\n\t\t\t}\r\n\t\t\tif(typeof targetRegion == \"undefined\"|| targetRegion == \"\"){\r\n\t\t\t\ttargetRegion = -1;\r\n\t\t\t}\r\n\t\t\tif(typeof targetBox == \"undefined\"|| targetBox == \"\"){\r\n\t\t\t\ttargetBox = -1;\r\n\t\t\t}\r\n\t\t\tif(typeof factionId == \"undefined\"|| factionId == \"\"){\r\n\t\t\t\tfactionId = 0;\r\n\t\t\t}\r\n\t\t\tif (enemy_unit && event) { \t\r\n\t\t\t\tevent._lastModsPosition = null;\r\n\t\t\t\tevent.isDropBox = false;\r\n\t\t\t\tevent.isShip = false;\r\n\t\t\t\tevent.manuallyErased = false;\r\n\t\t\t\tdelete event.dropBoxItems;\r\n\r\n\t\t\t\tenemy_unit._mechClass = mechClass;\t\r\n\t\t\t\tenemy_unit.squadId = squadId;\t\r\n\t\t\t\tenemy_unit.targetRegion = targetRegion;\t\r\n\t\t\t\tenemy_unit.targetBox = targetBox;\r\n\t\t\t\tenemy_unit.factionId = factionId;\t\r\n\t\t\t\tenemy_unit.targetUnitId = targetId || \"\";\r\n\t\t\t\tenemy_unit.counterBehavior = counterBehavior || \"attack\";\r\n\t\t\t\tenemy_unit.attackBehavior = attackBehavior || \"attack\";\r\n\t\t\t\tif (enemy_unit) {\r\n\t\t\t\t\tenemy_unit.event = event;\r\n\t\t\t\t\tif (mode) {\r\n\t\t\t\t\t\tenemy_unit.setBattleMode(mode || \"\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tenemy_unit.initTp(); //TPを初期化\r\n\t\t\t\t\tvar faceName = enemy_unit.enemy().meta.faceName; //顔グラフィックをプリロードする\r\n\t\t\t\t\tif (faceName) {\r\n\t\t\t\t\t\tvar bitmap = ImageManager.loadFace(faceName);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif ($gameSystem.isSideView()) {\r\n\t\t\t\t\t\t\tvar bitmap = ImageManager.loadSvEnemy(enemy_unit.battlerName(), enemy_unit.battlerHue());\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tvar bitmap = ImageManager.loadEnemy(enemy_unit.battlerName(), enemy_unit.battlerHue());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t$gameSystem.setEventToUnit(event.eventId(), 'enemy', enemy_unit);\r\n\t\t\t\t\t$statCalc.initSRWStats(enemy_unit, level, items, false, false, boxDrop);\r\n\t\t\t\t\t$statCalc.applyBattleStartWill(enemy_unit);\r\n\t\t\t\t\t$statCalc.updateSuperState(enemy_unit, true);\r\n\t\t\t\t\t\r\n\t\t\t\t\tenemy_unit.SRWStats.pilot.kills = kills || 0;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(!noUpdateCount){\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(!$gameSystem.isFriendly(enemy_unit, \"player\")){\r\n\t\t\t\t\t\t\tvar oldValue = $gameVariables.value(_existEnemyVarID);\r\n\t\t\t\t\t\t\t$gameVariables.setValue(_existEnemyVarID, oldValue + 1);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tvar oldValue = $gameVariables.value(_existActorVarID);\r\n\t\t\t\t\t\t\t$gameVariables.setValue(_existActorVarID, oldValue + 1);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tevent.setType('enemy');\r\n\t\t\t\t\t/*var xy = event.makeAppearPoint(event, event.posX(), event.posY())\r\n\t\t\t\t\tevent.setPosition(xy[0], xy[1]);\t*/\r\n\t\t\t\t\tvar position = $statCalc.getAdjacentFreeSpace({x: event.posX(), y: event.posY()}, null, event.eventId());\r\n\t\t\t\t\tevent.locate(position.x, position.y);\r\n\t\t\t\t\tif(!$gameTemp.enemyAppearQueue){\r\n\t\t\t\t\t\t$gameTemp.enemyAppearQueue = [];\r\n\t\t\t\t\t}\t\r\n\t\t\t\t\tif(toAnimQueue){\t\t\t\t\r\n\t\t\t\t\t\tevent.erase();\r\n\t\t\t\t\t\t$gameTemp.enemyAppearQueue.push(event);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t$gameMap.setEventImages();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(attribute1){\r\n\t\t\t\t\t$statCalc.setStageTemp(enemy_unit, \"attribute1\", attribute1);\r\n\t\t\t\t}\r\n\t\t\t\tif(attribute2){\r\n\t\t\t\t\t$statCalc.setStageTemp(enemy_unit, \"attribute2\", attribute2);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//$statCalc.invalidateAbilityCache();\r\n\t\t\t\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\tGame_Interpreter.prototype.addSubTwinEnemyFromObj = function(params){\r\n\t\t\tthis.addEnemy(\r\n\t\t\t\tparams.eventId, \r\n\t\t\t\tparams.enemyId, \r\n\t\t\t\tparams.mechClass, \r\n\t\t\t\tparams.level, \r\n\t\t\t\tparams.mode, \r\n\t\t\t\tparams.targetId, \r\n\t\t\t\tparams.items, \r\n\t\t\t\tparams.squadId, \r\n\t\t\t\tparams.targetRegion,\r\n\t\t\t\tparams.factionId,\r\n\t\t\t\tparams.counterBehavior,\r\n\t\t\t\tparams.noUpdateCount\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.addSubTwinEnemy = function(eventId, enemyId, mechClass, level, mode, targetId, items, squadId, targetRegion, factionId, counterBehavior, noUpdateCount) {\r\n\t\t\tvar enemy_unit = new Game_Enemy(enemyId, 0, 0);\r\n\t\t\tvar event = $gameMap.event(eventId);\r\n\t\t\tif(typeof squadId == \"undefined\" || squadId == \"\"){\r\n\t\t\t\tsquadId = -1;\r\n\t\t\t}\r\n\t\t\tif(typeof targetRegion == \"undefined\"|| targetRegion == \"\"){\r\n\t\t\t\ttargetRegion = -1;\r\n\t\t\t}\r\n\t\t\tif(typeof factionId == \"undefined\"|| factionId == \"\"){\r\n\t\t\t\tfactionId = 0;\r\n\t\t\t}\r\n\t\t\tif (enemy_unit && event) { \t\r\n\t\t\t\tvar mainEnemy = $gameSystem.EventToUnit(eventId)[1];\r\n\t\t\t\t\r\n\t\t\t\tenemy_unit._mechClass = mechClass;\t\r\n\t\t\t\tenemy_unit.squadId = squadId;\t\r\n\t\t\t\tenemy_unit.targetRegion = targetRegion;\t\r\n\t\t\t\tenemy_unit.factionId = factionId;\t\r\n\t\t\t\tenemy_unit.targetUnitId = targetId || \"\";\r\n\t\t\t\tenemy_unit.counterBehavior = counterBehavior || \"attack\";\r\n\t\t\t\tif (enemy_unit) {\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (mode) {\r\n\t\t\t\t\t\tenemy_unit.setBattleMode(mode);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tenemy_unit.initTp(); //TPを初期化\r\n\t\t\t\t\tvar faceName = enemy_unit.enemy().meta.faceName; //顔グラフィックをプリロードする\r\n\t\t\t\t\tif (faceName) {\r\n\t\t\t\t\t\tvar bitmap = ImageManager.loadFace(faceName);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif ($gameSystem.isSideView()) {\r\n\t\t\t\t\t\t\tvar bitmap = ImageManager.loadSvEnemy(enemy_unit.battlerName(), enemy_unit.battlerHue());\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tvar bitmap = ImageManager.loadEnemy(enemy_unit.battlerName(), enemy_unit.battlerHue());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!noUpdateCount && !$gameSystem.isFriendly(enemy_unit, \"player\")){\r\n\t\t\t\t\t\tvar oldValue = $gameVariables.value(_existEnemyVarID);\r\n\t\t\t\t\t\t$gameVariables.setValue(_existEnemyVarID, oldValue + 1);\r\n\t\t\t\t\t}\t\t\t\r\n\t\t\t\t\t$statCalc.initSRWStats(enemy_unit, level, items);\r\n\t\t\t\t\t$statCalc.applyBattleStartWill(enemy_unit);\r\n\t\t\t\t\t\r\n\t\t\t\t\tenemy_unit.isSubTwin = true;\t\t\t\r\n\t\t\t\t\tmainEnemy.subTwin = enemy_unit;\r\n\t\t\t\t\tmainEnemy.subTwinId = enemy_unit.enemyId();\r\n\r\n\t\t\t\t\t$statCalc.updateSuperState(mainEnemy, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t$statCalc.invalidateAbilityCache();\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.destroyEvents = function(startId, endId) {\r\n\t\t\tvar se = {};\r\n\t\t\tse.name = \"SRWExplosion\";\r\n\t\t\tse.pan = 0;\r\n\t\t\tse.pitch = 100;\r\n\t\t\tse.volume = 80;\r\n\t\t\tAudioManager.playSe(se);\r\n\t\t\tfor(var i = startId; i <= endId; i++){\r\n\t\t\t\tthis.destroyEvent(i, true);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.destroyEvent = function(eventId, silent) {\r\n\t\t\tvar event = $gameMap.event(eventId);\r\n\t\t\tif(event && !event.isErased()){\r\n\t\t\t\tevent.isDoingDeathAnim = true;\r\n\t\t\t\tevent.silent = silent;\r\n\t\t\t\tvar actorInfo = $gameSystem.EventToUnit(eventId);\r\n\t\t\t\tif(actorInfo){\r\n\t\t\t\t\tvar actor = actorInfo[1];\r\n\t\t\t\t\tif(actor.isActor()){\r\n\t\t\t\t\t\tvar oldValue = $gameVariables.value(_existActorVarID);\r\n\t\t\t\t\t\t$gameVariables.setValue(_existActorVarID, oldValue - 1);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar oldValue = $gameVariables.value(_existEnemyVarID);\r\n\t\t\t\t\t\t$gameVariables.setValue(_existEnemyVarID, oldValue - 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.eraseEventsOfType = function(type, omitted, toQueue) {\r\n\t\t\tvar _this = this;\r\n\t\t\tomitted = omitted || [];\r\n\t\t\tvar candidates = $statCalc.getAllCandidateActors(type);\r\n\t\t\tcandidates.forEach(function(candidate){\r\n\t\t\t\tif(candidate.event){\r\n\t\t\t\t\tif(omitted.indexOf(candidate.event.eventId()) == -1){\r\n\t\t\t\t\t\t_this.eraseEvent(candidate.event.eventId(), toQueue);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.eraseEvents = function(startId, endId, toQueue) {\r\n\t\t\tfor(var i = startId; i <= endId; i++){\r\n\t\t\t\tthis.eraseEvent(i, toQueue);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.eraseEvent = function(eventId, toQueue) {\r\n\t\t\tvar event = $gameMap.event(eventId);\r\n\t\t\tif(event && !event.isErased()){\r\n\t\t\t\tif(toQueue){\r\n\t\t\t\t\tif(!$gameTemp.disappearQueue){\r\n\t\t\t\t\t\t$gameTemp.disappearQueue = [];\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$gameTemp.disappearQueue.push(event);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tevent.erase();\r\n\t\t\t\t}\t\r\n\t\t\t\tevent.manuallyErased = true;\r\n\t\t\t\tvar battlerArray = $gameSystem.EventToUnit(eventId);\r\n\t\t\t\tif(battlerArray){\r\n\t\t\t\t\tvar actor = battlerArray[1];\r\n\t\t\t\t\tif(actor.isActor()){\r\n\t\t\t\t\t\tvar decrement = 1;\r\n\t\t\t\t\t\tif(actor.SRWStats.mech.combinesFrom){\r\n\t\t\t\t\t\t\tdecrement = actor.SRWStats.mech.combinesFrom.length;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar oldValue = $gameVariables.value(_existActorVarID);\r\n\t\t\t\t\t\t$gameVariables.setValue(_existActorVarID, oldValue - decrement);\r\n\t\t\t\t\t\tif($gameVariables.value(_existActorVarID) < 0){\r\n\t\t\t\t\t\t\t$gameVariables.setValue(_existActorVarID, 0);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar oldValue = $gameVariables.value(_existEnemyVarID);\r\n\t\t\t\t\t\t$gameVariables.setValue(_existEnemyVarID, oldValue - 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\t\r\n\t\t}\r\n\t\t\r\n\t\tGame_Interpreter.prototype.revealEvent = function(eventId, toQueue) {\r\n\t\t\tvar event = $gameMap.event(eventId);\r\n\t\t\tif(event && event.isErased()){\r\n\t\t\t\tif(toQueue){\r\n\t\t\t\t\tif(!$gameTemp.enemyAppearQueue){\r\n\t\t\t\t\t\t$gameTemp.enemyAppearQueue = [];\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$gameTemp.enemyAppearQueue.push(event);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tevent.appear();\r\n\t\t\t\t}\t\r\n\t\t\t\tevent.manuallyErased = false;\r\n\t\t\t\tvar battlerArray = $gameSystem.EventToUnit(eventId);\r\n\t\t\t\tif(battlerArray){\r\n\t\t\t\t\tvar actor = battlerArray[1];\r\n\t\t\t\t\tif(actor.isActor()){\r\n\t\t\t\t\t\tvar oldValue = $gameVariables.value(_existActorVarID);\r\n\t\t\t\t\t\t$gameVariables.setValue(_existActorVarID, oldValue + 1);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar oldValue = $gameVariables.value(_existEnemyVarID);\r\n\t\t\t\t\t\t$gameVariables.setValue(_existEnemyVarID, oldValue + 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tevent.isPendingDeploy = true;\r\n\t\t\t\t\t$statCalc.invalidateAbilityCache(actor);\r\n\t\t\t\t\t$statCalc.applyStatModsToValue(actor, 0, [\"weapon_melee\"]);//force a reeval\r\n\t\t\t\t}\t\r\n\t\t\t\tevent.refreshImage();\t\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.updateWaitMode = function() {\r\n\t\t\tvar waiting = false;\r\n\t\t\tswitch (this._waitMode) {\r\n\t\t\tcase 'message':\r\n\t\t\t\twaiting = $gameMessage.isBusy();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'transfer':\r\n\t\t\t\twaiting = $gamePlayer.isTransferring();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'scroll':\r\n\t\t\t\twaiting = $gameMap.isScrolling();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'route':\r\n\t\t\t\twaiting = this._character.isMoveRouteForcing();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'animation':\r\n\t\t\t\twaiting = this._character.isAnimationPlaying();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'balloon':\r\n\t\t\t\twaiting = this._character.isBalloonPlaying();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'gather':\r\n\t\t\t\twaiting = $gamePlayer.areFollowersGathering();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'action':\r\n\t\t\t\twaiting = BattleManager.isActionForced();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'video':\r\n\t\t\t\twaiting = Graphics.isVideoPlaying();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'image':\r\n\t\t\t\twaiting = !ImageManager.isReady();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'enemy_appear':\r\n\t\t\t\twaiting = $gameTemp.enemyAppearQueueIsProcessing || $gameTemp.disappearQueueIsProcessing;\r\n\t\t\t\tbreak;\t\r\n\t\t\tcase 'manual_deploy':\r\n\t\t\t\twaiting = $gameTemp.doingManualDeploy;\r\n\t\t\t\tbreak;\t\r\n\t\t\tcase 'mode_selection':\r\n\t\t\t\twaiting = $gameTemp.doingModeSelection;\r\n\t\t\t\tbreak;\t\t\r\n\t\t\tcase 'move_to_point':\r\n\t\t\t\twaiting = $gameSystem.srpgWaitMoving();\r\n\t\t\t\tbreak;\t\r\n\t\t\tcase 'battle_demo':\r\n\t\t\t\twaiting = $gameTemp.playingBattleDemo;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'spirit_activation':\r\n\t\t\t\twaiting = $gameTemp.playingSpiritAnimations;\r\n\t\t\t\tbreak;\t\r\n\t\t\tcase 'text_script_loading':\r\n\t\t\t\twaiting = this._isLoadingTextScript;\r\n\t\t\t\tbreak;\t\t\r\n\t\t\tcase 'opening_crawl':\r\n\t\t\t\twaiting = $gameTemp.doingOpeningCrawl;\r\n\t\t\t\tbreak;\t\t\r\n\t\t\tcase 'stage_conditions':\r\n\t\t\t\twaiting = $gameTemp.showingStageConditions;\r\n\t\t\t\tbreak;\t\r\n\t\t\tcase 'custom_wait':\r\n\t\t\t\twaiting = $gameTemp.isCustomWait;\r\n\t\t\t\tbreak;\t\r\n\t\t\tcase 'sound_effect':\r\n\t\t\t\twaiting = AudioManager.isPlayingSE();\r\n\t\t\t\tbreak;\t\r\n\t\t\t} \r\n\t\t\t\r\n\t\t\tif (!waiting) {\r\n\t\t\t\tif(this._waitMode == \"route\"){\r\n\t\t\t\t\t$gameTemp.movingCursorByScript = false;\r\n\t\t\t\t}\r\n\t\t\t\tthis._waitMode = '';\r\n\t\t\t}\r\n\t\t\treturn waiting;\r\n\t\t};\r\n\r\n\t\tGame_Interpreter.prototype.applyActorSpirits = function(actorId, spiritIds){\r\n\t\t\tthis.applyEventSpirits($gameActors.actor(actorId).event.eventId(), spiritIds);\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.applyEventSpirits = function(eventId, spiritIds){\r\n\t\t\tvar spirits = [];\r\n\t\t\tvar event = $gameMap.event(eventId);\r\n\t\t\t$gamePlayer.locate(event.posX(), event.posY());\r\n\t\t\tvar actor = $gameSystem.EventToUnit(eventId)[1];\r\n\t\t\tspiritIds.forEach(function(spiritId){\r\n\t\t\t\tspirits.push({\r\n\t\t\t\t\tidx: spiritId,\r\n\t\t\t\t\tlevel: 1,\r\n\t\t\t\t\tcost: 0,\r\n\t\t\t\t\tcaster: actor,\r\n\t\t\t\t\ttarget: actor\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\t$gameTemp.playingSpiritAnimations = true;\r\n\t\t\tthis.setWaitMode(\"spirit_activation\");\r\n\t\t\t$gameTemp.eventSpirits = spirits;\r\n\t\t\t$gameTemp.eventSpiritPhaseContext = $gameSystem.isSubBattlePhase();\r\n\t\t\t$gameSystem.setSubBattlePhase(\"event_spirits\");\t\t\t\r\n\t\t\t//this._index++;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\tGame_Interpreter.prototype.setCustomWait = function(){\r\n\t\t\t$gameTemp.isCustomWait = true;\r\n\t\t\tthis.setWaitMode(\"custom_wait\");\r\n\t\t}\r\n\t\t\r\n\t\tGame_Interpreter.prototype.setSEWait = function(){\r\n\t\t\tthis.setWaitMode(\"sound_effect\");\r\n\t\t}\r\n\t\t\r\n\t\tGame_Interpreter.prototype.clearCustomWait = function(){\r\n\t\t\t$gameTemp.isCustomWait = false;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.requestImages = function(list, commonList){\r\n\t\t\tif(!list) return;\r\n\t\t\tlet _this = this;\r\n\r\n\t\t\tlist.forEach(function(command){\r\n\t\t\t\tvar params = command.parameters;\r\n\t\t\t\tswitch(command.code){\r\n\t\t\t\t\t// Show Text\r\n\t\t\t\t\tcase 101:\r\n\t\t\t\t\t\tImageManager.requestFace(params[0]);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Common Event\r\n\t\t\t\t\tcase 117:\r\n\t\t\t\t\t\tvar commonEvent = $dataCommonEvents[params[0]];\r\n\t\t\t\t\t\tif (commonEvent) {\r\n\t\t\t\t\t\t\tif (!commonList) {\r\n\t\t\t\t\t\t\t\tcommonList = [];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (!commonList.contains(params[0])) {\r\n\t\t\t\t\t\t\t\tcommonList.push(params[0]);\r\n\t\t\t\t\t\t\t\tGame_Interpreter.requestImages(commonEvent.list, commonList);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Change Party Member\r\n\t\t\t\t\tcase 129:\r\n\t\t\t\t\t\tvar actor = $gameActors.actor(params[0]);\r\n\t\t\t\t\t\tif (actor && params[1] === 0) {\r\n\t\t\t\t\t\t\tvar name = actor.characterName();\r\n\t\t\t\t\t\t\tImageManager.requestCharacter(name);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Set Movement Route\r\n\t\t\t\t\tcase 205:\r\n\t\t\t\t\t\tif(params[1]){\r\n\t\t\t\t\t\t\tparams[1].list.forEach(function(command){\r\n\t\t\t\t\t\t\t\tvar params = command.parameters;\r\n\t\t\t\t\t\t\t\tif(command.code === Game_Character.ROUTE_CHANGE_IMAGE){\r\n\t\t\t\t\t\t\t\t\tImageManager.requestCharacter(params[0]);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Show Animation, Show Battle Animation\r\n\t\t\t\t\tcase 212: case 337:\r\n\t\t\t\t\t\tif(params[1]) {\r\n\t\t\t\t\t\t\tvar animation = $dataAnimations[params[1]];\r\n\t\t\t\t\t\t\tvar name1 = animation.animation1Name;\r\n\t\t\t\t\t\t\tvar name2 = animation.animation2Name;\r\n\t\t\t\t\t\t\tvar hue1 = animation.animation1Hue;\r\n\t\t\t\t\t\t\tvar hue2 = animation.animation2Hue;\r\n\t\t\t\t\t\t\tImageManager.requestAnimation(name1, hue1);\r\n\t\t\t\t\t\t\tImageManager.requestAnimation(name2, hue2);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Change Player Followers\r\n\t\t\t\t\tcase 216:\r\n\t\t\t\t\t\tif (params[0] === 0) {\r\n\t\t\t\t\t\t\t$gamePlayer.followers().forEach(function(follower) {\r\n\t\t\t\t\t\t\t\tvar name = follower.characterName();\r\n\t\t\t\t\t\t\t\tImageManager.requestCharacter(name);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Show Picture\r\n\t\t\t\t\tcase 231:\r\n\t\t\t\t\t\tImageManager.loadPicture(params[1]); //make show picture awaitable by the interpreter\r\n\t\t\t\t\t\tif($gameMap && $gameMap._interpreter){\r\n\t\t\t\t\t\t\t$gameMap._interpreter.setWaitMode('image');\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Change Tileset\r\n\t\t\t\t\tcase 282:\r\n\t\t\t\t\t\tvar tileset = $dataTilesets[params[0]];\r\n\t\t\t\t\t\ttileset.tilesetNames.forEach(function(tilesetName){\r\n\t\t\t\t\t\t\tImageManager.requestTileset(tilesetName);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Change Battle Back\r\n\t\t\t\t\tcase 283:\r\n\t\t\t\t\t\tif ($gameParty.inBattle()) {\r\n\t\t\t\t\t\t\tImageManager.requestBattleback1(params[0]);\r\n\t\t\t\t\t\t\tImageManager.requestBattleback2(params[1]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Change Parallax\r\n\t\t\t\t\tcase 284:\r\n\t\t\t\t\t\tif (!$gameParty.inBattle()) {\r\n\t\t\t\t\t\t\tImageManager.requestParallax(params[0]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Change Actor Images\r\n\t\t\t\t\tcase 322:\r\n\t\t\t\t\t\tImageManager.requestCharacter(params[1]);\r\n\t\t\t\t\t\tImageManager.requestFace(params[3]);\r\n\t\t\t\t\t\tImageManager.requestSvActor(params[5]);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Change Vehicle Image\r\n\t\t\t\t\tcase 323:\r\n\t\t\t\t\t\tvar vehicle = $gameMap.vehicle(params[0]);\r\n\t\t\t\t\t\tif(vehicle){\r\n\t\t\t\t\t\t\tImageManager.requestCharacter(params[1]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Enemy Transform\r\n\t\t\t\t\tcase 336:\r\n\t\t\t\t\t\tvar enemy = $dataEnemies[params[1]];\r\n\t\t\t\t\t\tvar name = enemy.battlerName;\r\n\t\t\t\t\t\tvar hue = enemy.battlerHue;\r\n\t\t\t\t\t\tif ($gameSystem.isSideView()) {\r\n\t\t\t\t\t\t\tImageManager.requestSvEnemy(name, hue);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tImageManager.requestEnemy(name, hue);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\tGame_Interpreter.prototype.processEnemyAppearQueue = function(){\r\n\t\t\tthis.setWaitMode(\"enemy_appear\");\r\n\t\t\t$gameTemp.enemyAppearQueueIsProcessing = true;\r\n\t\t\t$gameTemp.unitAppearTimer = 0;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.processUnitAppearQueue = function(){\r\n\t\t\tthis.setWaitMode(\"enemy_appear\");\r\n\t\t\t$gameTemp.enemyAppearQueueIsProcessing = true;\r\n\t\t\t$gameTemp.unitAppearTimer = 0;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.processDisappearQueue = function(){\r\n\t\t\tif($gameTemp.disappearQueue && $gameTemp.disappearQueue.length){\r\n\t\t\t\tthis.setWaitMode(\"enemy_appear\");\r\n\t\t\t\t$gameTemp.disappearQueueIsProcessing = true;\r\n\t\t\t\t$gameTemp.unitAppearTimer = 0;\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\r\n\t\t//clears the twin state for all pilots referenced on the deploy list to avoid crashes due to lingering twin state\r\n\t\t// (depending on unit init order they can create self reference loops)\r\n\t\tGame_Interpreter.prototype.cleanDeployListTwinState = function(unlockedOnly){\r\n\t\t\tfor(let entry of $gameSystem.getDeployList()){\r\n\t\t\t\tif(entry.main != null){\r\n\t\t\t\t\t$statCalc.cleanTwinState($gameActors.actor(entry.main));\t\t\r\n\t\t\t\t}\r\n\t\t\t\tif(entry.sub != null){\r\n\t\t\t\t\t$statCalc.cleanTwinState($gameActors.actor(entry.sub));\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.manualDeploy = function(unlockedOnly){\r\n\t\t\tthis.setWaitMode(\"manual_deploy\");\r\n\t\t\t$gameTemp.deployContextState = \"start_srpg\";\r\n\t\t\t$gameTemp.deployContextSubState = \"wait\";\r\n\t\t\t$gameTemp.deployMode = \"\";\r\n\t\t\t$gameTemp.manualDeployType = unlockedOnly ? \"unlocked\" : \"all\";\r\n\t\t\t$gameTemp.doingManualDeploy = true;\r\n\t\t\t$gameTemp.disableHighlightGlow = true;\r\n\t\t\t$gameSystem.setSubBattlePhase(\"deploy_selection_window\");\r\n\t\t\t$gameTemp.pushMenu = \"in_stage_deploy\";\r\n\t\t\t$gameTemp.originalDeployInfo = JSON.parse(JSON.stringify($gameSystem.getDeployList()));\r\n\t\t\tthis.cleanDeployListTwinState();\r\n\t\t}\r\n\t\t\r\n\t\tGame_Interpreter.prototype.manualDeployOnActorTurn = function(unlockedOnly){\r\n\t\t\tthis.setWaitMode(\"manual_deploy\");\r\n\t\t\t$gameTemp.deployContextState = \"actor_phase\";\r\n\t\t\t$gameTemp.deployContextSubState = \"normal\";\r\n\t\t\t$gameTemp.deployMode = \"\";\r\n\t\t\t$gameTemp.manualDeployType = unlockedOnly ? \"unlocked\" : \"all\";\r\n\t\t\t$gameTemp.doingManualDeploy = true;\r\n\t\t\t$gameTemp.disableHighlightGlow = true;\r\n\t\t\t$gameSystem.setSubBattlePhase(\"deploy_selection_window\");\r\n\t\t\t$gameTemp.pushMenu = \"in_stage_deploy\";\r\n\t\t\t$gameTemp.originalDeployInfo = JSON.parse(JSON.stringify($gameSystem.getDeployList()));\r\n\t\t\tthis.cleanDeployListTwinState();\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.manualShipDeploy = function(){\r\n\t\t\tthis.setWaitMode(\"manual_deploy\");\r\n\t\t\t$gameTemp.deployMode = \"ships\";\r\n\t\t\t$gameTemp.doingManualDeploy = true;\r\n\t\t\t$gameTemp.disableHighlightGlow = true;\r\n\t\t\t$gameSystem.setSubBattlePhase(\"deploy_selection_window\");\r\n\t\t\t$gameTemp.pushMenu = \"in_stage_deploy\";\r\n\t\t\t$gameTemp.originalDeployInfo = JSON.parse(JSON.stringify($gameSystem.getDeployList()));\r\n\t\t}\r\n\t\t\r\n\t\tGame_Interpreter.prototype.showModeSelection = function(allowCancel){\r\n\t\t\tthis.setWaitMode(\"mode_selection\");\r\n\t\t\t$gameTemp.doingModeSelection = true;\r\n\t\t\t$gameTemp.pushMenu = \"mode_selection\";\r\n\t\t\tif(allowCancel){\r\n\t\t\t\t$gameTemp.modeSelectionWindowCallback = function(){\r\n\t\t\t\t\t$gameTemp.modeSelectionWindowCallback = null;\r\n\t\t\t\t\tSceneManager.goto(Scene_Title);\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_Interpreter.prototype.showTextCrawl = function(id, canCancel, speed){\r\n\t\t\tthis.setWaitMode(\"opening_crawl\");\t\r\n\t\t\t$gameTemp.textCrawlId = id;\t\r\n\t\t\t$gameTemp.textCrawlSpeed = speed || 1;\t\r\n\t\t\t$gameTemp.pushMenu = \"opening_crawl\";\t\t\r\n\t\t\t$gameTemp.canCancelTextCrawl = canCancel;\t\r\n\t\t\t$gameTemp.doingOpeningCrawl = true;\r\n\t\t}\r\n\r\n\t\t// 指定した座標にプレイヤーを移動する\r\n\t\tGame_Interpreter.prototype.playerMoveTo = function(x, y) {\r\n\t\t\t$gameTemp.setAutoMoveDestinationValid(true);\r\n\t\t\t$gameTemp.setAutoMoveDestination(x, y);\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\tGame_Interpreter.prototype.cursorMoveTo = function(x, y, freeCam) {\r\n\t\t\t$gamePlayer.locate(x, y, freeCam);\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\tGame_Interpreter.prototype.isActorInRegion = function(actorId, regionId) {\r\n\t\t\treturn $statCalc.isActorInRegion(actorId, regionId);\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.isEnemyInRegion = function(enemyId, regionId) {\r\n\t\t\treturn $statCalc.isEnemyInRegion(enemyId, regionId);\r\n\t\t}\r\n\t\t\r\n\t\tGame_Interpreter.prototype.isEventInRegion = function(eventId, regionId) {\r\n\t\t\treturn $statCalc.isEventInRegion(eventId, regionId);\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.getActorKillCount = function(actorId) {\r\n\t\t\treturn $statCalc.getKills($gameActors.actor(actorId));\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.setBattleModes = function(startId, endId, mode) {\r\n\t\t\tfor(var i = startId; i <= endId; i++){\r\n\t\t\t\tthis.setBattleMode(i, mode);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 指定したイベントの戦闘モードを設定する\r\n\t\tGame_Interpreter.prototype.setBattleMode = function(eventId, mode, applyToSquad) {\r\n\t\t\tvar battlerArray = $gameSystem.EventToUnit(eventId);\r\n\t\t\tif (battlerArray && (battlerArray[0] === 'actor' || battlerArray[0] === 'enemy')) {\r\n\t\t\t\tbattlerArray[1].setBattleMode(mode, true);\t\t\t\r\n\t\t\t}\r\n\t\t\t/*if(battlerArray[0] === 'enemy' && applyToSquad){\r\n\t\t\t\tif(battlerArray[1].squadId != -1){\r\n\t\t\t\t\tthis.setSquadMode(squadId, mode);\r\n\t\t\t\t}\r\n\t\t\t}\t*/\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\tGame_Interpreter.prototype.setTargetRegion = function(eventId, targetRegion) {\r\n\t\t\tvar battlerArray = $gameSystem.EventToUnit(eventId);\r\n\t\t\tif (battlerArray && (battlerArray[0] === 'actor' || battlerArray[0] === 'enemy')) {\r\n\t\t\t\tbattlerArray[1].targetRegion = targetRegion;\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\tGame_Interpreter.prototype.setActorTargetRegion = function(actorId, targetRegion) {\t\r\n\t\t\treturn this.setTargetRegion($gameActors.actor(actorId).event.eventId(), targetRegion);\r\n\t\t};\r\n\r\n\t\t// 指定したイベントの戦闘モードを設定する\r\n\t\tGame_Interpreter.prototype.setActorBattleMode = function(actorId, mode) {  \r\n\t\t\t$gameActors.actor(actorId).setBattleMode(mode, true);\t\t\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\tGame_Interpreter.prototype.setSquadMode = function(squadId, mode) {\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif (event.isType() === 'enemy') {\r\n\t\t\t\t\tvar enemy = $gameSystem.EventToUnit(event.eventId())[1];\t\r\n\t\t\t\t\tif(enemy.squadId == squadId){\r\n\t\t\t\t\t\tenemy.setBattleMode(mode, true);\r\n\t\t\t\t\t}\t\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.isDeployed = function(actorId) {\r\n\t\t\tvar isDeployed = false;\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif (event.isType() === 'actor') {\r\n\t\t\t\t\tvar battlerArray = $gameSystem.EventToUnit(event.eventId());\r\n\t\t\t\t\tif(battlerArray){\r\n\t\t\t\t\t\tvar actor = battlerArray[1];\r\n\t\t\t\t\t\tif(actor.actorId() == actorId){\r\n\t\t\t\t\t\t\tisDeployed = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn isDeployed;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.isSquadWiped = function(squadId) {\r\n\t\t\tvar isWiped = true;\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif (event.isType() === 'enemy') {\r\n\t\t\t\t\tvar enemy = $gameSystem.EventToUnit(event.eventId())[1];\t\r\n\t\t\t\t\tif(enemy.squadId == squadId && !event.isErased()){\r\n\t\t\t\t\t\tisWiped = false;\r\n\t\t\t\t\t}\t\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn isWiped;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.canObtainSRPoint = function() {\r\n\t\t\treturn !$SRWSaveManager.isMapSRPointLocked($gameMap.mapId());\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.activeFaction = function() {\r\n\t\t\treturn $gameTemp.currentFaction;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.lastActorAttack = function() {\r\n\t\t\treturn $gameTemp.lastActorAttack;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.didEnemyAttack = function() {\r\n\t\t\treturn !!$gameTemp.didEnemyAttack;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.isActorHitBy = function(actorId, weaponId, includeSupport) {\r\n\t\t\tvar result = false;\r\n\t\t\tif($gameTemp.unitHitInfo && $gameTemp.unitHitInfo.actor){\r\n\t\t\t\tif($gameTemp.unitHitInfo.actor[actorId] && $gameTemp.unitHitInfo.actor[actorId][weaponId]){\r\n\t\t\t\t\tvar hitInfo = $gameTemp.unitHitInfo.actor[actorId][weaponId];\r\n\t\t\t\t\tif(includeSupport || !hitInfo.isSupport) {\r\n\t\t\t\t\t\tresult = true;\r\n\t\t\t\t\t} \r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.isEnemyHitBy = function(enemyId, weaponId, includeSupport) {\r\n\t\t\tvar result = false;\r\n\t\t\tif($gameTemp.unitHitInfo && $gameTemp.unitHitInfo.enemy){\r\n\t\t\t\tif($gameTemp.unitHitInfo.enemy[enemyId] && $gameTemp.unitHitInfo.enemy[enemyId][weaponId]){\r\n\t\t\t\t\tvar hitInfo = $gameTemp.unitHitInfo.enemy[enemyId][weaponId];\r\n\t\t\t\t\tif(includeSupport || !hitInfo.isSupport) {\r\n\t\t\t\t\t\tresult = true;\r\n\t\t\t\t\t} \r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.isEventHitBy = function(eventId, weaponId, includeSupport) {\r\n\t\t\tvar result = false;\r\n\t\t\tif($gameTemp.unitHitInfo && $gameTemp.unitHitInfo.event){\r\n\t\t\t\tif($gameTemp.unitHitInfo.event[eventId] && $gameTemp.unitHitInfo.event[eventId][weaponId]){\r\n\t\t\t\t\tvar hitInfo = $gameTemp.unitHitInfo.event[eventId][weaponId];\r\n\t\t\t\t\tif(includeSupport || !hitInfo.isSupport) {\r\n\t\t\t\t\t\tresult = true;\r\n\t\t\t\t\t} \r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.isActorInBattle = function(actorId, checkSubPilots) {\r\n\t\t\tvar result = false;\r\n\t\t\t\r\n\t\t\tfunction checkActorSubPilots(actor){\r\n\t\t\t\tif(actor && checkSubPilots){\r\n\t\t\t\t\tconst subPilots = $statCalc.getSubPilots(actor);\r\n\t\t\t\t\tfor(let subPilotId of subPilots){\r\n\t\t\t\t\t\tif(subPilotId == actorId){\r\n\t\t\t\t\t\t\tresult = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\t\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\t\t\tif($gameTemp.currentBattleActor && $gameTemp.currentBattleActor.isActor()){\r\n\t\t\t\tif($gameTemp.currentBattleActor.actorId() == actorId){\r\n\t\t\t\t\tresult = true;\r\n\t\t\t\t}\t\t\r\n\t\t\t\tcheckActorSubPilots($gameTemp.currentBattleActor);\r\n\t\t\t\tif($gameTemp.currentBattleActor.subTwin && $gameTemp.currentBattleActor.subTwin.actorId() == actorId){\r\n\t\t\t\t\tresult = true;\r\n\t\t\t\t}\r\n\t\t\t\tcheckActorSubPilots($gameTemp.currentBattleActor.subTwin);\r\n\t\t\t}\r\n\t\t\tif($gameTemp.currentBattleEnemy && $gameTemp.currentBattleEnemy.isActor()){\r\n\t\t\t\tif($gameTemp.currentBattleEnemy.actorId() == actorId){\r\n\t\t\t\t\tresult = true;\r\n\t\t\t\t}\r\n\t\t\t\tcheckActorSubPilots($gameTemp.currentBattleEnemy);\r\n\t\t\t\tif($gameTemp.currentBattleEnemy.subTwin && $gameTemp.currentBattleEnemy.subTwin.actorId() == actorId){\r\n\t\t\t\t\tresult = true;\r\n\t\t\t\t}\r\n\t\t\t\tcheckActorSubPilots($gameTemp.currentBattleEnemy.subTwin);\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.isEnemyInBattle = function(enemyId) {\r\n\t\t\tvar result = false;\r\n\t\t\tif($gameTemp.currentBattleActor && $gameTemp.currentBattleActor.isEnemy()){\r\n\t\t\t\tif($gameTemp.currentBattleActor.enemyId() == enemyId){\r\n\t\t\t\t\tresult = true;\r\n\t\t\t\t}\t\t\r\n\t\t\t\tif($gameTemp.currentBattleActor.subTwin && $gameTemp.currentBattleActor.subTwin.enemyId() == enemyId){\r\n\t\t\t\t\tresult = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif($gameTemp.currentBattleEnemy && $gameTemp.currentBattleEnemy.isEnemy()){\r\n\t\t\t\tif($gameTemp.currentBattleEnemy.enemyId() == enemyId){\r\n\t\t\t\t\tresult = true;\r\n\t\t\t\t}\r\n\t\t\t\tif($gameTemp.currentBattleEnemy.subTwin && $gameTemp.currentBattleEnemy.subTwin.enemyId() == enemyId){\r\n\t\t\t\t\tresult = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.isEventInBattle = function(eventId) {\r\n\t\t\tvar result = false;\r\n\t\t\tif($gameTemp.currentBattleActor && $gameTemp.currentBattleActor.event && $gameTemp.currentBattleActor.event.eventId() == eventId){\r\n\t\t\t\tresult = true;\r\n\t\t\t}\r\n\t\t\tif($gameTemp.currentBattleEnemy && $gameTemp.currentBattleEnemy.event && $gameTemp.currentBattleEnemy.event.eventId() == eventId){\r\n\t\t\t\tresult = true;\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\tGame_Interpreter.prototype.setEventAbilityZone = function(eventId, params) {\r\n\t\t\t$gameSystem.setEventAbilityZone(eventId, params);\r\n\t\t}\r\n\t\t\r\n\t\tGame_Interpreter.prototype.clearEventAbilityZones = function(eventId) {\r\n\t\t\t$gameSystem.clearEventAbilityZones(eventId);\r\n\t\t}\r\n\t\t\r\n\r\n\t\tGame_Interpreter.prototype.applyFadeState = function() {\r\n\t\t\tif(this.isTextSkipMode){\r\n\t\t\t\tif(this._lastFadeState == 0){\r\n\t\t\t\t\t$gameScreen.startFadeOut(this.fadeSpeed());\r\n\t\t\t\t\tthis.wait(this.fadeSpeed());\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$gameScreen.startFadeIn(this.fadeSpeed());\r\n\t\t\t\t\tthis.wait(this.fadeSpeed());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.executeCommand = function() {\r\n\t\t\tvar command = this.currentCommand();\r\n\t\t\t\r\n\t\t\tif (command) {\r\n\t\t\t\t//Input.update();\r\n\t\t\t\tif(!this.isHaltingCommand(command) && Input.isPressed(\"ok\") && Input.isPressed(\"pagedown\") && Input.isPressed(\"pageup\")){\r\n\t\t\t\t\tif(!this.isTextSkipMode){\r\n\t\t\t\t\t\t$gameScreen.startFadeOut(this.fadeSpeed());\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.isTextSkipMode = true;\t\t\r\n\t\t\t\t\t$gameTemp.isSkippingEvents = true;\t\r\n\t\t\t\t\tthis._lastBGM = AudioManager._currentBgm;\r\n\t\t\t\t\t//AudioManager.fadeOutBgm(2);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(this.isHaltingCommand(command)){\r\n\t\t\t\t\tthis.applyFadeState();\r\n\t\t\t\t\tthis.isTextSkipMode = false;\t\t\r\n\t\t\t\t\tthis._lastFadeState = null;\r\n\t\t\t\t\tif(this._lastBGM){\r\n\t\t\t\t\t\tAudioManager.playBgm(this._lastBGM);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis._lastBGM = null;\r\n\t\t\t\t\t$gameTemp.isSkippingEvents = false;\t\r\n\t\t\t\t}\r\n\t\t\t\tthis._params = command.parameters;\r\n\t\t\t\tthis._indent = command.indent;\r\n\t\t\t\tvar methodName = 'command' + command.code;\r\n\t\t\t\tif (typeof this[methodName] === 'function') {\r\n\t\t\t\t\tif (!this[methodName]()) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis._index++;\r\n\t\t\t} else {\r\n\t\t\t\tthis.applyFadeState();\r\n\t\t\t\tthis.isTextSkipMode = false;\t\t\r\n\t\t\t\tthis._lastFadeState = null;\r\n\t\t\t\tif(this._lastBGM){\r\n\t\t\t\t\tAudioManager.playBgm(this._lastBGM);\r\n\t\t\t\t}\r\n\t\t\t\tthis._lastBGM = null;\r\n\t\t\t\t$gameTemp.isSkippingEvents = false;\t\r\n\t\t\t\tthis.terminate();\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t// Fadeout Screen\r\n\t\tGame_Interpreter.prototype.command221 = function() {\r\n\t\t\tif (!$gameMessage.isBusy()) {\r\n\t\t\t\tthis._lastFadeState = 0;\r\n\t\t\t\tif(!this.isTextSkipMode){\r\n\t\t\t\t\t$gameScreen.startFadeOut(this.fadeSpeed());\r\n\t\t\t\t\tthis.wait(this.fadeSpeed());\r\n\t\t\t\t}\r\n\t\t\t\tthis._index++;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t};\r\n\r\n\t\t// Fadein Screen\r\n\t\tGame_Interpreter.prototype.command222 = function() {\r\n\t\t\tif (!$gameMessage.isBusy()) {\r\n\t\t\t\tthis._lastFadeState = 1;\r\n\t\t\t\tif(!this.isTextSkipMode){\r\n\t\t\t\t\t$gameScreen.startFadeIn(this.fadeSpeed());\r\n\t\t\t\t\tthis.wait(this.fadeSpeed());\r\n\t\t\t\t}\r\n\t\t\t\tthis._index++;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t};\r\n\r\n\t\t//Wait\r\n\t\tGame_Interpreter.prototype.command230 = function() {\r\n\t\t\tif(!this.isTextSkipMode){\r\n\t\t\t\tthis.wait(this._params[0]);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t// Show Animation\r\n\t\tGame_Interpreter.prototype.command212 = function() {\r\n\t\t\tthis._character = this.character(this._params[0]);\r\n\t\t\tif (this._character && !this.isTextSkipMode) {\r\n\t\t\t\tthis._character.requestAnimation(this._params[1]);\r\n\t\t\t\tif (this._params[2]) {\r\n\t\t\t\t\tthis.setWaitMode('animation');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\tGame_Interpreter.prototype.convertToLogString = function(text) {\r\n\t\t\ttext = text.replace(/\\\\/g, '\\x1b');\r\n\t\t\ttext = text.replace(/\\x1b\\x1b/g, '\\\\');\r\n\t\t\ttext = text.replace(/\\x1bV\\[(\\d+)\\]/gi, function() {\r\n\t\t\t\treturn $gameVariables.value(parseInt(arguments[1]));\r\n\t\t\t}.bind(this));\r\n\t\t\ttext = text.replace(/\\x1bV\\[(\\d+)\\]/gi, function() {\r\n\t\t\t\treturn $gameVariables.value(parseInt(arguments[1]));\r\n\t\t\t}.bind(this));\r\n\t\t\ttext = text.replace(/\\x1bN\\[(\\d+)\\]/gi, function() {\r\n\t\t\t\treturn this.actorName(parseInt(arguments[1]));\r\n\t\t\t}.bind(this));\r\n\t\t\ttext = text.replace(/\\x1bP\\[(\\d+)\\]/gi, function() {\r\n\t\t\t\treturn this.partyMemberName(parseInt(arguments[1]));\r\n\t\t\t}.bind(this));\r\n\t\t\ttext = text.replace(/\\x1bG/gi, TextManager.currencyUnit);\r\n\t\t\t\r\n\t\t\tvar index = 0;\r\n\t\t\tvar tmp = [];\r\n\t\t\twhile(index < text.length){\r\n\t\t\t\tif(text[index] == \"\\x1b\"){\r\n\t\t\t\t\tindex++;\r\n\t\t\t\t\tvar regExp = /^[\\$\\.\\|\\^!><\\{\\}\\\\]|^[A-Z]+/i;\r\n\t\t\t\t\tvar arr = regExp.exec(text.slice(index));\r\n\t\t\t\t\tif(arr){\r\n\t\t\t\t\t\tindex+=arr[0].length;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar arr = /^\\[\\d+\\]/.exec(text.slice(index));\r\n\t\t\t\t\tif (arr) {\r\n\t\t\t\t\t\tindex += arr[0].length;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttmp.push(text[index++]);\r\n\t\t\t\t}\r\n\t\t\t}\t\t\r\n\t\t\t\r\n\t\t\treturn tmp.join(\"\");\r\n\t\t};\r\n\r\n\t\tGame_Interpreter.prototype.command101 = function() {\r\n\t\t\tif (!$gameMessage.isBusy()) {\t\t\t\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tvar nextText = \"\";\r\n\t\t\t\t\r\n\t\t\t\t$gameMessage.setFaceImage(this._params[0], this._params[1]);\r\n\t\t\t\t$gameMessage.setBackground(this._params[2]);\r\n\t\t\t\t$gameMessage.setPositionType(this._params[3]);\r\n\t\t\t\twhile (this.nextEventCode() === 401) {  // Text data\r\n\t\t\t\t\tthis._index++;\r\n\t\t\t\t\t$gameMessage.add(this.currentCommand().parameters[0]);\r\n\t\t\t\t}\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t$gameSystem.pushTextLog(ImageManager.getTranslationInfo(this._params[0]), this._params[1], this.convertToLogString($gameMessage.allText()));\r\n\t\t\t\t\r\n\t\t\t\tswitch (this.nextEventCode()) {\r\n\t\t\t\tcase 102:  // Show Choices\r\n\t\t\t\t\tthis._index++;\r\n\t\t\t\t\tthis.setupChoices(this.currentCommand().parameters);\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.applyFadeState();\r\n\t\t\t\t\tthis.isTextSkipMode = false;\r\n\t\t\t\t\t$gameTemp.isSkippingEvents = false;\t\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 103:  // Input Number\r\n\t\t\t\t\tthis._index++;\r\n\t\t\t\t\tthis.setupNumInput(this.currentCommand().parameters);\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.applyFadeState();\r\n\t\t\t\t\tthis.isTextSkipMode = false;\r\n\t\t\t\t\t$gameTemp.isSkippingEvents = false;\t\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 104:  // Select Item\r\n\t\t\t\t\tthis._index++;\r\n\t\t\t\t\tthis.setupItemChoice(this.currentCommand().parameters);\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.applyFadeState();\r\n\t\t\t\t\tthis.isTextSkipMode = false;\r\n\t\t\t\t\t$gameTemp.isSkippingEvents = false;\t\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault: // Regular text \r\n\t\t\t\t\tif(this.isTextSkipMode){\r\n\t\t\t\t\t\t$gameMessage.clear();\r\n\t\t\t\t\t}\t\t\t\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tthis._index++;\r\n\t\t\t\tthis.setWaitMode('message');\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t};\r\n\t\t\r\n\t\t// Play SE\r\n\t\tGame_Interpreter.prototype.command250 = function() {\r\n\t\t\tif(!this.isTextSkipMode){\r\n\t\t\t\tAudioManager.playSe(this._params[0]);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\t\t\r\n\t\t// Play BGM\r\n\t\tGame_Interpreter.prototype.command241 = function() {\r\n\t\t\tif(!this.isTextSkipMode){\r\n\t\t\t\tAudioManager.playBgm(this._params[0]);\r\n\t\t\t} else {\r\n\t\t\t\tthis._lastBGM = this._params[0];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t};\r\n\t\t\r\n\t\t// Play BGS\r\n\t\tGame_Interpreter.prototype.command245 = function() {\r\n\t\t\tif(!this.isTextSkipMode){\r\n\t\t\t\tAudioManager.playBgs(this._params[0]);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\r\n\t\t/**************************************\r\n\t\tSample:\r\n\t\t\tthis.playBattleScene({\r\n\t\t\t\teventId: 0, // if included the matching event text will be used for the scene(see BattleText.conf.js).\r\n\t\t\t\tenemyFirst: 0, // if 0 the actor will move first, if 1 the enemy will move first. This also affects the supports. If 0, the actor support will be attacking otherwise defending. If 1, the enemy support will be attacking otherwise defending.\r\n\t\t\t\tsongId: \"Battle1\", // the id of the song that should be played during the battle scene\r\n\t\t\t\tactor: {\r\n\t\t\t\t\tid: 1, // the id of the actor pilot\r\n\t\t\t\t\taction: \"attack\", // the action the actor will take: \"attack\", \"defend\", \"evade\". \r\n\t\t\t\t\tweapon: 1, // the id of the attack the actor will use. Only used if the action is \"attack\".\r\n\t\t\t\t\thits: 1, // if 0 the attack performed by this unit will miss, if 1 the attack will hit \r\n\t\t\t\t\tstartHP: 20, // the start HP of the actor in percent\r\n\t\t\t\t\ttargetEndHP: 5, // the end HP of the target in percent\r\n\t\t\t\t\tposX: 0, // the x coordinate of the position on the map where this unit stands(optional)\r\n\t\t\t\t\tposY: 0, // the y coordinate of the position on the map where this unit stands(optional)\r\n\t\t\t\t\treferenceEventId: 21 // if provided posX, posY and startHP will be derived from this event instead\r\n\t\t\t\t},\r\n\t\t\t\tactorTwin: {\r\n\t\t\t\t\tid: 2, // the id of the actor pilot\r\n\t\t\t\t\taction: \"attack\", // the action the actor will take: \"attack\", \"defend\", \"evade\". \r\n\t\t\t\t\tweapon: 3, // the id of the attack the actor will use. Only used if the action is \"attack\".\r\n\t\t\t\t\thits: 1, // if 0 the attack performed by this unit will miss, if 1 the attack will hit \r\n\t\t\t\t\tstartHP: 20, // the start HP of the actor in percent\r\n\t\t\t\t\ttargetEndHP: 5, // the end HP of the target in percent\r\n\t\t\t\t\tposX: 0, // the x coordinate of the position on the map where this unit stands(optional)\r\n\t\t\t\t\tposY: 0, // the y coordinate of the position on the map where this unit stands(optional)\r\n\t\t\t\t\treferenceEventId: 21 // if provided posX, posY and startHP will be derived from this event instead\r\n\t\t\t\t},\r\n\t\t\t\tactorSupport: { // ommit this section if there is no actor supporter\r\n\t\t\t\t\tid: 3, // the id of the actor pilot\r\n\t\t\t\t\taction: \"attack\", // the action the actor will take: \"attack\", \"defend\", \"evade\". \r\n\t\t\t\t\tweapon: 5, // the id of the attack the actor will use. Only used if the action is \"attack\".\r\n\t\t\t\t\thits: 1, // if 0 the attack performed by this unit will miss, if 1 the attack will hit \r\n\t\t\t\t\tstartHP: 100, // the start HP of the actor in percent\r\n\t\t\t\t\ttargetEndHP: 0, // the end HP of the target in percent\r\n\t\t\t\t},\r\n\t\t\t\tenemy: {\r\n\t\t\t\t\tid: 1, // the id of the enemy pilot\r\n\t\t\t\t\tmechId: 10, // the id of the enemy mech\r\n\t\t\t\t\tweapon: 6, // the id of the attack the actor will use. Only used if the action is \"attack\".\r\n\t\t\t\t\taction: \"attack\", // the action the enemy will take: \"attack\", \"defend\", \"evade\". \r\n\t\t\t\t\thits: 1, // if 0 the attack performed by this unit will miss, if 1 the attack will hit \r\n\t\t\t\t\tstartHP: 80, // the start HP of the enemy in percent\r\n\t\t\t\t\ttargetEndHP: 5, // the end HP of the target in percent\r\n\t\t\t\t},\r\n\t\t\t\tenemyTwin: {\r\n\t\t\t\t\tid: 1, // the id of the enemy pilot\r\n\t\t\t\t\tmechId: 10, // the id of the enemy mech\r\n\t\t\t\t\tweapon: 6, // the id of the attack the actor will use. Only used if the action is \"attack\".\r\n\t\t\t\t\taction: \"attack\", // the action the enemy will take: \"attack\", \"defend\", \"evade\". \r\n\t\t\t\t\thits: 1, // if 0 the attack performed by this unit will miss, if 1 the attack will hit \r\n\t\t\t\t\tstartHP: 80, // the start HP of the enemy in percent\r\n\t\t\t\t\ttargetEndHP: 5, // the end HP of the target in percent\r\n\t\t\t\t},\r\n\t\t\t\tenemySupport: { // ommit this section if there is no enemy supporter\r\n\t\t\t\t\tid: 3, // the id of the enemy pilot\r\n\t\t\t\t\tmechId: 11,\r\n\t\t\t\t\taction: \"defend\", // the action the enemy will take: \"attack\", \"defend\", \"evade\". \r\n\t\t\t\t\thits: 1, // if 0 the attack performed by this unit will miss, if 1 the attack will hit \r\n\t\t\t\t\tweapon: -1, // the id of the attack the actor will use. Only used if the action is \"attack\".\r\n\t\t\t\t\tstartHP: 100, // the start HP of the enemy in percent\r\n\t\t\t\t\ttargetEndHP: 0, // the end HP of the target in percent\r\n\t\t\t\t}\t\t\t\r\n\t\t\t});\r\n\r\n\t\t**************************************/\r\n\t\tGame_Interpreter.prototype.prepareBattleSceneActor = function(params) {\r\n\t\t\tvar actor = new Game_Actor(params.id, 0, 0);\r\n\t\t\t$statCalc.initSRWStats(actor);\r\n\t\t\tif(params.mechId){\r\n\t\t\t\tactor._mechClass = params.mechId;\t\r\n\t\t\t\t$statCalc.initSRWStats(actor);\r\n\t\t\t}\r\n\t\t\tparams.unit = actor;\r\n\t\t\tif(params.referenceEventId != null){\r\n\t\t\t\tactor.event = $gameMap.event(params.referenceEventId)\r\n\t\t\t} else {\r\n\t\t\t\tactor.event = {\r\n\t\t\t\t\teventId: function(){return 1;}, \r\n\t\t\t\t\tposX: function(){return params.posX || 0},\r\n\t\t\t\t\tposY: function(){return params.posY || 0},\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\treturn {actor: actor, action: this.prepareBattleSceneAction(params), params: params};\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.prepareBattleSceneSupportActor = function(params) {\r\n\t\t\tvar actor = new Game_Actor(params.id, 0, 0);\r\n\t\t\t$statCalc.initSRWStats(actor);\r\n\t\t\tif(params.mechId){\r\n\t\t\t\tactor._mechClass = params.mechId;\t\r\n\t\t\t\t$statCalc.initSRWStats(actor);\r\n\t\t\t}\r\n\t\t\tparams.unit = actor;\r\n\t\t\tif(params.referenceEventId != null){\r\n\t\t\t\tactor.event = $gameMap.event(params.referenceEventId)\r\n\t\t\t} else {\r\n\t\t\t\tactor.event = {\r\n\t\t\t\t\teventId: function(){return 3;},\r\n\t\t\t\t\tposX: function(){return params.posX || 0},\r\n\t\t\t\t\tposY: function(){return params.posY || 0},\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn {actor: actor, action: this.prepareBattleSceneAction(params), params: params};\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.prepareBattleSceneActorTwin = function(params) {\r\n\t\t\tvar actor = new Game_Actor(params.id, 0, 0);\r\n\t\t\t$statCalc.initSRWStats(actor);\r\n\t\t\tactor.isEventSubTwin = true;\r\n\t\t\tactor.isSubTwin = true;\r\n\t\t\tif(params.mechId){\r\n\t\t\t\tactor._mechClass = params.mechId;\t\r\n\t\t\t\t$statCalc.initSRWStats(actor);\r\n\t\t\t}\r\n\t\t\tparams.unit = actor;\r\n\t\t\tif(params.referenceEventId != null){\r\n\t\t\t\tactor.event = $gameMap.event(params.referenceEventId)\r\n\t\t\t} else {\r\n\t\t\t\tactor.event = {\r\n\t\t\t\t\teventId: function(){return 5;},\r\n\t\t\t\t\tposX: function(){return params.posX || 0},\r\n\t\t\t\t\tposY: function(){return params.posY || 0},\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn {actor: actor, action: this.prepareBattleSceneAction(params), params: params};\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.prepareBattleSceneEnemy = function(params) {\r\n\t\t\tvar enemy = new Game_Enemy(params.id, 0, 0);\r\n\t\t\t$statCalc.initSRWStats(enemy);\r\n\t\t\tparams.unit = enemy;\r\n\t\t\tenemy._mechClass = params.mechId;\t\r\n\t\t\tenemy.factionId = 0;\r\n\t\t\t$statCalc.initSRWStats(enemy);\r\n\t\t\tif(params.referenceEventId != null){\r\n\t\t\t\tenemy.event = $gameMap.event(params.referenceEventId)\r\n\t\t\t} else {\r\n\t\t\t\tenemy.event = {\r\n\t\t\t\t\teventId: function(){return 2;},\r\n\t\t\t\t\tposX: function(){return params.posX || 0},\r\n\t\t\t\t\tposY: function(){return params.posY || 0},\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\treturn {actor: enemy, action: this.prepareBattleSceneAction(params), params: params};\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.prepareBattleSceneSupportEnemy = function(params) {\r\n\t\t\tvar enemy = new Game_Enemy(params.id, 0, 0);\r\n\t\t\t$statCalc.initSRWStats(enemy);\r\n\t\t\tparams.unit = enemy;\r\n\t\t\tenemy._mechClass = params.mechId;\t\r\n\t\t\t$statCalc.initSRWStats(enemy);\r\n\t\t\tif(params.referenceEventId != null){\r\n\t\t\t\tenemy.event = $gameMap.event(params.referenceEventId)\r\n\t\t\t} else {\r\n\t\t\t\tenemy.event = {\r\n\t\t\t\t\teventId: function(){return 4;},\r\n\t\t\t\t\tposX: function(){return params.posX || 0},\r\n\t\t\t\t\tposY: function(){return params.posY || 0},\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\treturn {actor: enemy, action: this.prepareBattleSceneAction(params), params: params};\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.prepareBattleSceneEnemyTwin = function(params) {\r\n\t\t\tvar enemy = new Game_Enemy(params.id, 0, 0);\r\n\t\t\t$statCalc.initSRWStats(enemy);\r\n\t\t\tenemy.isEventSubTwin = true;\r\n\t\t\tenemy.isSubTwin = true;\r\n\t\t\tparams.unit = enemy;\r\n\t\t\tenemy._mechClass = params.mechId;\t\r\n\t\t\t$statCalc.initSRWStats(enemy);\r\n\t\t\tif(params.referenceEventId != null){\r\n\t\t\t\tenemy.event = $gameMap.event(params.referenceEventId)\r\n\t\t\t} else {\r\n\t\t\t\tenemy.event = {\r\n\t\t\t\t\teventId: function(){return 6;},\r\n\t\t\t\t\tposX: function(){return params.posX || 0},\r\n\t\t\t\t\tposY: function(){return params.posY || 0},\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\treturn {actor: enemy, action: this.prepareBattleSceneAction(params), params: params};\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.prepareBattleSceneAction = function(params) {\r\n\t\t\tvar unit = params.unit;\r\n\t\t\t\r\n\t\t\tvar weapon;\r\n\t\t\tif(params.weapon != null){\r\n\t\t\t\tif(typeof params.weapon == \"object\"){\r\n\t\t\t\t\tweapon = params.weapon;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tweapon = $statCalc.getActorMechWeapon(unit, params.weapon)\r\n\t\t\t\t}\r\n\t\t\t\tif(weapon == null){\r\n\t\t\t\t\tconst weaponDefinition = $dataWeapons[params.weapon];\r\n\t\t\t\t\tconst weaponProperties = weaponDefinition.meta;\r\n\t\t\t\t\tweapon = $statCalc.parseWeaponDef(null, false, weaponDefinition, weaponProperties);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tvar action;\r\n\t\t\tif(params.action == \"attack\"){\t\t\r\n\t\t\t\taction = {\r\n\t\t\t\t\ttype: \"attack\",\r\n\t\t\t\t\tattack: weapon,\r\n\t\t\t\t\ttarget: 0\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(params.action == \"defend\"){\t\t\r\n\t\t\t\taction = {\r\n\t\t\t\t\ttype: \"defend\",\r\n\t\t\t\t\tattack: -1,\r\n\t\t\t\t\ttarget: 0\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(params.action == \"evade\"){\t\t\r\n\t\t\t\taction = {\r\n\t\t\t\t\ttype: \"evade\",\r\n\t\t\t\t\tattack: -1,\r\n\t\t\t\t\ttarget: 0\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn action;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.setBattleSceneHP = function(actor, params) {\r\n\t\t\tif(actor && params){\r\n\t\t\t\tvar mechStats = $statCalc.getCalculatedMechStats(actor);\r\n\t\t\t\tmechStats.currentHP = Math.floor(mechStats.maxHP * (params.startHP / 100));\r\n\t\t\t}\t\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.playBattleScene = function(params) {\r\n\t\t\tthis.setWaitMode(\"battle_demo\");\r\n\t\t\t$gameTemp.playingBattleDemo = true;\r\n\t\t\t$gameTemp.returnState = $gameSystem.isSubBattlePhase();\r\n\t\t\t$gameTemp.battleEffectCache = {};\r\n\t\t\t\r\n\t\t\tvar actorInfo;\r\n\t\t\tif(params.actor.isEnemy){\r\n\t\t\t\tactorInfo = this.prepareBattleSceneEnemy(params.actor);\r\n\t\t\t} else {\r\n\t\t\t\tactorInfo = this.prepareBattleSceneActor(params.actor);\r\n\t\t\t}\r\n\t\t\tvar enemyInfo = this.prepareBattleSceneEnemy(params.enemy);\r\n\t\t\t\t\r\n\t\t\tvar actorTwinInfo;\r\n\t\t\tif(params.actorTwin){\r\n\t\t\t\tactorTwinInfo = this.prepareBattleSceneActorTwin(params.actorTwin);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar enemyTwinInfo;\r\n\t\t\tif(params.enemyTwin){\r\n\t\t\t\tenemyTwinInfo = this.prepareBattleSceneEnemyTwin(params.enemyTwin);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar actor = actorInfo.actor;\r\n\t\t\tvar enemy = enemyInfo.actor;\r\n\t\t\t\r\n\t\t\tvar attacker;\r\n\t\t\tvar attackerTwin;\r\n\t\t\tvar defender;\r\n\t\t\tvar defenderTwin;\r\n\t\t\tvar attackerSide;\r\n\t\t\tvar defenderSide;\r\n\t\t\tif(params.enemyFirst){\r\n\t\t\t\tattackerSide = \"enemy\";\r\n\t\t\t\tdefenderSide = \"actor\";\r\n\t\t\t\tattacker = enemyInfo;\r\n\t\t\t\tdefender = actorInfo;\r\n\t\t\t\tattackerTwin = enemyTwinInfo;\r\n\t\t\t\tdefenderTwin = actorTwinInfo;\r\n\t\t\t} else {\r\n\t\t\t\tattackerSide = \"actor\";\r\n\t\t\t\tdefenderSide = \"enemy\";\r\n\t\t\t\tattacker = actorInfo;\r\n\t\t\t\tdefender = enemyInfo;\r\n\t\t\t\tattackerTwin = actorTwinInfo;\r\n\t\t\t\tdefenderTwin = enemyTwinInfo;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t$battleCalc.prepareBattleCache(attacker, \"initiator\");\r\n\t\t\t$battleCalc.prepareBattleCache(defender, \"defender\");\r\n\t\t\t\r\n\t\t\tif(attackerTwin){\r\n\t\t\t\t$battleCalc.prepareBattleCache(attackerTwin, \"twin attack\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(defenderTwin){\r\n\t\t\t\t$battleCalc.prepareBattleCache(defenderTwin, \"twin defend\");\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\r\n\t\t\tvar actorCacheEntry = $gameTemp.battleEffectCache[actor._cacheReference];\r\n\t\t\tvar enemyCacheEntry = $gameTemp.battleEffectCache[enemy._cacheReference];\r\n\t\t\t\r\n\t\t\tvar supportAttacker;\r\n\t\t\tvar supportDefender;\r\n\t\t\t\r\n\t\t\tvar actorSupportInfo;\t\r\n\t\t\tif(params.actorSupport){\r\n\t\t\t\tactorSupportInfo = this.prepareBattleSceneSupportActor(params.actorSupport);\t\t\r\n\t\t\t}\r\n\t\t\tvar actorSupport;\r\n\t\t\tvar actorSupportCacheEntry;\r\n\t\t\tif(actorSupportInfo){\r\n\t\t\t\tactorSupport = actorSupportInfo.actor;\r\n\t\t\t\tif(params.enemyFirst){\r\n\t\t\t\t\tsupportDefender = actorSupportInfo;\r\n\t\t\t\t\t$battleCalc.prepareBattleCache(actorSupportInfo, \"support defend\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsupportAttacker = actorSupportInfo;\r\n\t\t\t\t\t$battleCalc.prepareBattleCache(actorSupportInfo, \"support attack\");\r\n\t\t\t\t}\t\r\n\t\t\t\tactorSupportCacheEntry = $gameTemp.battleEffectCache[actorSupport._cacheReference];\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar enemySupportInfo;\t\r\n\t\t\tif(params.enemySupport){\r\n\t\t\t\tenemySupportInfo = this.prepareBattleSceneSupportEnemy(params.enemySupport);\t\t\r\n\t\t\t}\r\n\t\t\tvar enemySupport;\r\n\t\t\tvar enemySupportCacheEntry;\r\n\t\t\tif(enemySupportInfo){\r\n\t\t\t\tenemySupport = enemySupportInfo.actor;\r\n\t\t\t\tif(params.enemyFirst){\r\n\t\t\t\t\tsupportAttacker = enemySupportInfo;\r\n\t\t\t\t\t$battleCalc.prepareBattleCache(enemySupportInfo, \"support attack\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsupportDefender = enemySupportInfo;\r\n\t\t\t\t\t$battleCalc.prepareBattleCache(enemySupportInfo, \"support defend\");\r\n\t\t\t\t}\t\r\n\t\t\t\tenemySupportCacheEntry = $gameTemp.battleEffectCache[enemySupport._cacheReference];\t\r\n\t\t\t}\t\r\n\t\t\t\r\n\t\t\t\t\r\n\t\t\tthis.setBattleSceneHP(actor, params.actor);\r\n\t\t\tthis.setBattleSceneHP(enemy, params.enemy);\r\n\t\t\tthis.setBattleSceneHP(actorSupport, params.actorSupport);\r\n\t\t\tthis.setBattleSceneHP(enemySupport, params.enemySupport);\r\n\r\n\t\t\tfunction BattleAction(attacker, defender, supportDefender, side, isSupportAttack){\r\n\t\t\t\tthis._attacker = attacker;\r\n\t\t\t\tthis._defender = defender;\r\n\t\t\t\tthis._supportDefender = supportDefender;\r\n\t\t\t\tthis._side = side;\r\n\t\t\t\tthis._isSupportAttack = isSupportAttack;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tBattleAction.prototype.execute = function(orderIdx){\r\n\t\t\t\tvar aCache = $gameTemp.battleEffectCache[this._attacker.actor._cacheReference];\r\n\t\t\t\tif(this._isSupportAttack){\r\n\t\t\t\t\taCache =  $gameTemp.battleEffectCache[this._attacker.actor._supportCacheReference];\r\n\t\t\t\t}\r\n\t\t\t\taCache.damageInflicted = 0;\r\n\t\t\t\taCache.side = this._side;\r\n\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tvar defenders = [this._defender];\r\n\t\t\t\tif(this._attacker.action.attack && this._attacker.action.attack.isAll){\r\n\t\t\t\t\tif(this._side == \"actor\"){ \r\n\t\t\t\t\t\tif(this._attacker.actor.isSubTwin && params.enemyTwin){\r\n\t\t\t\t\t\t\tdefenders.push(enemyInfo);\r\n\t\t\t\t\t\t} else if(params.enemy && enemyTwinInfo){\r\n\t\t\t\t\t\t\tdefenders.push(enemyTwinInfo);\r\n\t\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(this._side == \"enemy\"){\t\t\t\t\r\n\t\t\t\t\t\tif(this._attacker.actor.isSubTwin && params.actorTwin){\r\n\t\t\t\t\t\t\tdefenders.push(actorInfo);\r\n\t\t\t\t\t\t} else if(params.actor && actorTwinInfo){\r\n\t\t\t\t\t\t\tdefenders.push(actorTwinInfo);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tfor(var i = 0; i < defenders.length; i++){\t\r\n\t\t\t\t\tvar attackedRef = \"\";\r\n\t\t\t\t\tif(i == 1){\r\n\t\t\t\t\t\tattackedRef = \"_all_sub\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar dCache = $gameTemp.battleEffectCache[defenders[i].actor._cacheReference];\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar activeDefender = this._defender;\r\n\t\t\t\t\tif(this._supportDefender) {\r\n\t\t\t\t\t\tvar sCache = $gameTemp.battleEffectCache[this._supportDefender.actor._supportCacheReference];\r\n\t\t\t\t\t\tif(!sCache.hasActed){\r\n\t\t\t\t\t\t\tactiveDefender = this._supportDefender;\r\n\t\t\t\t\t\t\tdCache = sCache;\r\n\t\t\t\t\t\t\tdCache.defended = defenders[i].actor;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tdCache.damageTaken = 0;\r\n\t\t\t\t\tif(!aCache.isDestroyed && !dCache.isDestroyed){\t\t\r\n\t\t\t\t\t\taCache.actionOrder = orderIdx;\r\n\t\t\t\t\t\taCache[\"attacked\"+attackedRef] = dCache;\r\n\t\t\t\t\t\taCache.originalTarget = dCache;\r\n\t\t\t\t\t\taCache.hasActed = true;\r\n\t\t\t\t\t\tdCache.hasActed = true;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(this._side == \"actor\"){\r\n\t\t\t\t\t\t\tdCache.side = \"enemy\";\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tdCache.side = \"actor\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar isHit = this._attacker.params.hits;\r\n\t\t\t\t\t\tif(isHit){\r\n\t\t\t\t\t\t\taCache[\"hits\"+attackedRef] = isHit;\r\n\t\t\t\t\t\t\taCache.inflictedCritical = this._attacker.params.isCrit;\r\n\t\t\t\t\t\t\tdCache.isHit = isHit;\r\n\t\t\t\t\t\t\tdCache.tookCritical = this._attacker.params.isCrit;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tvar mechStats = $statCalc.getCalculatedMechStats(activeDefender.actor);\r\n\t\t\t\t\t\t\tvar startHP = 100;\r\n\t\t\t\t\t\t\tvar endHP = this._attacker.params.targetEndHP;\r\n\t\t\t\t\t\t\tif(activeDefender.params.startHP){\r\n\t\t\t\t\t\t\t\tstartHP = activeDefender.params.startHP;\r\n\t\t\t\t\t\t\t} else if(activeDefender.params.referenceEventId){\r\n\t\t\t\t\t\t\t\tvar unitInfo = $gameSystem.EventToUnit(activeDefender.params.referenceEventId);\r\n\t\t\t\t\t\t\t\tif(unitInfo){\r\n\t\t\t\t\t\t\t\t\tmechStats = $statCalc.getCalculatedMechStats(unitInfo[1]);//replace mechstats with live value\r\n\t\t\t\t\t\t\t\t\tconst referenceMaxHP = mechStats.currentHP / mechStats.maxHP;\r\n\t\t\t\t\t\t\t\t\tstartHP = startHP * referenceMaxHP;\r\n\t\t\t\t\t\t\t\t\tendHP = endHP * referenceMaxHP;\r\n\t\t\t\t\t\t\t\t\tdCache.currentAnimHP = mechStats.currentHP;\r\n\t\t\t\t\t\t\t\t\tdCache.currentAnimEN = mechStats.currentEN;\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t//hack to ensure displayed stats during the battle scene match the stats feteched from the reference event\r\n\t\t\t\t\t\t\t\t\tdCache.ref.SRWStats.mech.stats.calculated.maxHP = mechStats.maxHP;\r\n\t\t\t\t\t\t\t\t\tdCache.ref.SRWStats.mech.stats.calculated.maxEN = mechStats.maxEN;\r\n\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tvar damagePercent = startHP - endHP;\r\n\t\t\t\t\t\t\tif(this._attacker.params.damageInflicted){\r\n\t\t\t\t\t\t\t\tdamagePercent = this._attacker.params.damageInflicted;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tvar damage = Math.floor(mechStats.maxHP * (damagePercent / 100));\r\n\t\t\t\t\t\t\taCache[\"damageInflicted\"+attackedRef] = damage;\r\n\t\t\t\t\t\t\taCache.statusEffects =  this._attacker.params.statusEffects || {};\t\t\r\n\t\t\t\t\t\t\tdCache.damageTaken+= damage;\r\n\t\t\t\t\t\t\tif(this._attacker.params.targetEndHP <= 0){\r\n\t\t\t\t\t\t\t\tdCache.isDestroyed = true;\r\n\t\t\t\t\t\t\t\tdCache.destroyer = aCache.ref;\r\n\t\t\t\t\t\t\t\tdCache.destroyedOrderIdx = orderIdx;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} \r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar currentTargetingSettings = {\r\n\t\t\t\tattacker: defender,\r\n\t\t\t\tattackerTwin: defenderTwin,\r\n\t\t\t\tdefender: attacker,\r\n\t\t\t\tdefenderTwin: attackerTwin\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tif(params.actor){\r\n\t\t\t\tvar target;\r\n\t\t\t\tif(params.actor.target == \"twin\" && params.enemyTwin){\r\n\t\t\t\t\ttarget = \"twin\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttarget = \"main\";\r\n\t\t\t\t}\r\n\t\t\t\tif(params.enemyFirst){\r\n\t\t\t\t\tif(target == \"twin\"){\r\n\t\t\t\t\t\tcurrentTargetingSettings.defender = attackerTwin;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcurrentTargetingSettings.defender = attacker;\r\n\t\t\t\t\t}\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif(target == \"twin\"){\r\n\t\t\t\t\t\tcurrentTargetingSettings.attacker = defenderTwin;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcurrentTargetingSettings.attacker = defender;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} \r\n\t\t\t\r\n\t\t\tif(params.actorTwin){\r\n\t\t\t\tvar target;\r\n\t\t\t\tif(params.actorTwin.target == \"twin\" && params.enemyTwin){\r\n\t\t\t\t\ttarget = \"twin\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttarget = \"main\";\r\n\t\t\t\t}\r\n\t\t\t\tif(params.enemyFirst){\r\n\t\t\t\t\tif(target == \"twin\"){\r\n\t\t\t\t\t\tcurrentTargetingSettings.defenderTwin = attackerTwin;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcurrentTargetingSettings.defenderTwin = attacker;\r\n\t\t\t\t\t}\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif(target == \"twin\"){\r\n\t\t\t\t\t\tcurrentTargetingSettings.attackerTwin = defenderTwin;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcurrentTargetingSettings.attackerTwin = defender;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(params.enemy){\r\n\t\t\t\tvar target;\r\n\t\t\t\tif(params.enemy.target == \"twin\" && params.actorTwin){\r\n\t\t\t\t\ttarget = \"twin\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttarget = \"main\";\r\n\t\t\t\t}\r\n\t\t\t\tif(params.enemyFirst){\r\n\t\t\t\t\tif(target == \"twin\"){\r\n\t\t\t\t\t\tcurrentTargetingSettings.attacker = defenderTwin;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcurrentTargetingSettings.attacker = defender;\r\n\t\t\t\t\t}\t\t\r\n\t\t\t\t} else {\t\t\t\r\n\t\t\t\t\tif(target == \"twin\"){\r\n\t\t\t\t\t\tcurrentTargetingSettings.defender = attackerTwin;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcurrentTargetingSettings.defender = attacker;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} \r\n\t\t\t\r\n\t\t\tif(params.enemyTwin){\r\n\t\t\t\tvar target;\r\n\t\t\t\tif(params.enemyTwin.target == \"twin\" && params.actorTwin){\r\n\t\t\t\t\ttarget = \"twin\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttarget = \"main\";\r\n\t\t\t\t}\r\n\t\t\t\tif(params.enemyFirst){\r\n\t\t\t\t\tif(target == \"twin\"){\r\n\t\t\t\t\t\tcurrentTargetingSettings.attackerTwin = defenderTwin;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcurrentTargetingSettings.attackerTwin = defender;\r\n\t\t\t\t\t}\t\t\r\n\t\t\t\t} else {\t\t\t\r\n\t\t\t\t\tif(target == \"twin\"){\r\n\t\t\t\t\t\tcurrentTargetingSettings.defenderTwin = attackerTwin;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcurrentTargetingSettings.defenderTwin = attacker;\r\n\t\t\t\t\t}\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tvar actions = [];\r\n\t\t\tif(!ENGINE_SETTINGS.USE_SRW_SUPPORT_ORDER && supportAttacker){\t\t\t\r\n\t\t\t\tactions.push(new BattleAction(supportAttacker, currentTargetingSettings.attacker, supportDefender, attackerSide, true));\t\t\t\t\t\t\t\t\r\n\t\t\t}\t\r\n\t\t\tif(attackerTwin){\r\n\t\t\t\tactions.push(new BattleAction(attackerTwin, currentTargetingSettings.attackerTwin, supportDefender, attackerSide));\t\r\n\t\t\t}\r\n\t\t\tactions.push(new BattleAction(attacker, currentTargetingSettings.attacker, supportDefender, attackerSide));\t\r\n\t\t\t\r\n\t\t\tif(ENGINE_SETTINGS.USE_SRW_SUPPORT_ORDER && supportAttacker){\t\t\t\r\n\t\t\t\tactions.push(new BattleAction(supportAttacker, currentTargetingSettings.attacker, supportDefender, attackerSide, true));\t\t\t\t\t\t\t\t\r\n\t\t\t}\t\r\n\t\t\t\r\n\t\t\tif(defenderTwin){\r\n\t\t\t\tactions.push(new BattleAction(defenderTwin, currentTargetingSettings.defenderTwin, supportDefender, defenderSide));\t\r\n\t\t\t}\r\n\t\t\tactions.push(new BattleAction(defender, currentTargetingSettings.defender, null, defenderSide));\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tfor(var i = 0; i < actions.length; i++){\r\n\t\t\t\tactions[i].execute(i);\r\n\t\t\t}\r\n\t\t\tif(params.eventId != null){\r\n\t\t\t\t$gameTemp.scriptedBattleDemoId = params.eventId;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t$gameSystem.setSubBattlePhase('halt');\r\n\t\t\t//SceneManager.stop();\t\r\n\t\t\t$battleSceneManager.playBattleScene();\r\n\t\t\tif(params.songId){\r\n\t\t\t\t$songManager.playSong(params.songId);\r\n\t\t\t}\t\r\n\t\t}\r\n\r\n\t\t// 指定したイベントのターゲットＩＤを設定する（戦闘モードが'aimingEvent'または'aimingActor'でのみ機能する）\r\n\t\tGame_Interpreter.prototype.setTargetId = function(eventId, targetId) {\r\n\t\t\tvar battlerArray = $gameSystem.EventToUnit(eventId);\r\n\t\t\tif (battlerArray && (battlerArray[0] === 'actor' || battlerArray[0] === 'enemy')) {\r\n\t\t\t\tbattlerArray[1].setTargetId(targetId);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t// 指定したイベントが戦闘不能か指定したスイッチに返す\r\n\t\tGame_Interpreter.prototype.isUnitDead = function(switchId, eventId) {\r\n\t\t\t$gameSwitches.setValue(switchId, false);\r\n\t\t\tvar battlerArray = $gameSystem.EventToUnit(eventId);\r\n\t\t\tif (battlerArray && (battlerArray[0] === 'actor' || battlerArray[0] === 'enemy')) {\r\n\t\t\t\t$gameSwitches.setValue(switchId, battlerArray[1].isDead());\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t// 指定した座標のイベントＩＤを取得する\r\n\t\tGame_Interpreter.prototype.isEventIdXy = function(variableId, x, y) {\r\n\t\t\t$gameVariables.setValue(variableId, 0);\r\n\t\t\t$gameMap.eventsXy(x, y).forEach(function(event) {\r\n\t\t\t\tvar battlerArray = $gameSystem.EventToUnit(event.eventId());\r\n\t\t\t\tif (battlerArray && (battlerArray[0] === 'actor' || battlerArray[0] === 'enemy')) {\r\n\t\t\t\t\t$gameVariables.setValue(variableId, event.eventId());\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t// 指定したイベントＩＤのユニットを全回復する\r\n\t\tGame_Interpreter.prototype.unitRecoverAll = function(eventId) {\r\n\t\t\tvar battlerArray = $gameSystem.EventToUnit(eventId);\r\n\t\t\tif (battlerArray && (battlerArray[0] === 'actor' || battlerArray[0] === 'enemy')) {\r\n\t\t\t\tif (battlerArray[1].isAlive()) {\r\n\t\t\t\t\tbattlerArray[1].recoverAll();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t// 指定したイベントＩＤのユニットを復活する\r\n\t\tGame_Interpreter.prototype.unitRevive = function(eventId) {\r\n\t\t\tvar battlerArray = $gameSystem.EventToUnit(eventId);\r\n\t\t\tvar event = $gameMap.event(eventId);\r\n\t\t\tif (battlerArray && (battlerArray[0] === 'actor' || battlerArray[0] === 'enemy')) {\r\n\t\t\t\tif (battlerArray[1].isAlive()) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tbattlerArray[1].removeState(battlerArray[1].deathStateId());\r\n\t\t\t\tvar oldValue = $gameVariables.value(_existEnemyVarID);\r\n\t\t\t\t$gameVariables.setValue(_existEnemyVarID, oldValue + 1);\r\n\t\t\t\tvar xy = event.makeAppearPoint(event, event.posX(), event.posY())\r\n\t\t\t\tevent.setPosition(xy[0], xy[1]);\r\n\t\t\t\tevent.appear();\r\n\t\t\t\t$gameMap.setEventImages();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// 指定したイベントＩＤのユニットを指定したステートにする\r\n\t\tGame_Interpreter.prototype.unitAddState = function(eventId, stateId) {\r\n\t\t\tvar battlerArray = $gameSystem.EventToUnit(eventId);\r\n\t\t\tvar event = $gameMap.event(eventId);\r\n\t\t\tif (battlerArray && event && (battlerArray[0] === 'actor' || battlerArray[0] === 'enemy')) {\r\n\t\t\t\tvar alreadyDead = battlerArray[1].isDead();\r\n\t\t\t\tbattlerArray[1].addState(stateId);\r\n\t\t\t\tif (battlerArray[1].isDead() && !alreadyDead) {\r\n\t\t\t\t\tif (!event.isErased()) {\r\n\t\t\t\t\t\tevent.erase();\r\n\t\t\t\t\t\tif (battlerArray[0] === 'actor') {\r\n\t\t\t\t\t\t\tvar oldValue = $gameVariables.value(_existActorVarID);\r\n\t\t\t\t\t\t\t$gameVariables.setValue(_existActorVarID, oldValue - 1);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tvar oldValue = $gameVariables.value(_actorsDestroyed);\r\n\t\t\t\t\t\t\t$gameVariables.setValue(_actorsDestroyed, oldValue + 1);\r\n\t\t\t\t\r\n\t\t\t\t\t\t} else if (battlerArray[0] === 'enemy') {\r\n\t\t\t\t\t\t\tvar oldValue = $gameVariables.value(_existEnemyVarID);\r\n\t\t\t\t\t\t\t$gameVariables.setValue(_existEnemyVarID, oldValue - 1);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tvar oldValue = $gameVariables.value(_enemiesDestroyed);\r\n\t\t\t\t\t\t\t$gameVariables.setValue(_enemiesDestroyed, oldValue + 1);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbattlerArray[1].clearResult();\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t// ターン終了を行う（メニューの「ターン終了」と同じ）\r\n\t\t\tGame_Interpreter.prototype.turnEnd = function() {\r\n\t\t\t\t$gameTemp.setTurnEndFlag(true);\r\n\t\t\t\treturn true;\r\n\t\t\t};\r\n\r\n\t\t// プレイヤーの操作を受け付けるかの判定（操作できるサブフェーズか？）\r\n\t\t\tGame_Interpreter.prototype.isSubPhaseNormal = function(id) {\r\n\t\t\t\tif ($gameSystem.isBattlePhase() === 'actor_phase' && $gameSystem.isSubBattlePhase() === 'normal') {\r\n\t\t\t\t\t$gameSwitches.setValue(id, true);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$gameSwitches.setValue(id, false);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tGame_Interpreter.prototype.runSubEvent = function(id) {\r\n\t\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\t\tif (event.event().meta.function == id) {\r\n\t\t\t\t\t\tif (event.pageIndex() >= 0){\r\n\t\t\t\t\t\t\t$gameMap._interpreter.setupChild(event.list(), 0);\r\n\t\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tGame_Interpreter.prototype.getEventWill = function(eventId) {\r\n\t\t\t\tvar actor = $gameSystem.EventToUnit(eventId)[1];\r\n\t\t\t\tvar result = 0;\r\n\t\t\t\tif(actor){\r\n\t\t\t\t\tresult = $statCalc.getCurrentWill(actor);\r\n\t\t\t\t}\r\n\t\t\t\treturn result;\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tGame_Interpreter.prototype.getActorWill = function(actorId) {\r\n\t\t\t\tvar actor = $gameActors.actor(actorId);\r\n\t\t\t\tvar result = 0;\r\n\t\t\t\tif(actor){\r\n\t\t\t\t\tresult = $statCalc.getCurrentWill(actor);\r\n\t\t\t\t}\r\n\t\t\t\treturn result;\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\t// Set Movement Route\r\n\t\t\tGame_Interpreter.prototype.command205 = function() {\r\n\t\t\t\t$gameMap.refreshIfNeeded();\r\n\t\t\t\tthis._character = this.character(this._params[0]);\r\n\t\t\t\tif(/actor\\:.*/.exec(this._params[0])){\r\n\t\t\t\t\tthis._character = null;\r\n\t\t\t\t\tvar actorId = this._params[0].replace(\"actor:\", \"\");\r\n\t\t\t\t\tvar actor = $gameActors.actor(actorId);\r\n\t\t\t\t\tif(actor){\r\n\t\t\t\t\t\tvar event = $statCalc.getReferenceEvent(actor);\r\n\t\t\t\t\t\tif(event){\r\n\t\t\t\t\t\t\tthis._character = this.character(event.eventId());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\tif (this._character) {\r\n\t\t\t\t\tthis._character.forceMoveRoute(this._params[1]);\r\n\t\t\t\t\tif (this._params[1].wait) {\r\n\t\t\t\t\t\tthis.setWaitMode('route');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(this._params[0] == -1){//cursor\r\n\t\t\t\t\t$gameTemp.movingCursorByScript = true;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\treturn true;\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tGame_Interpreter.prototype.runTextScript = async function(scriptId) {\r\n\t\t\t\tthis.setWaitMode(\"text_script_loading\");\r\n\t\t\t\tthis._isLoadingTextScript = true;\r\n\t\t\t\tlet eventList = await DataManager.interpretTextScript(scriptId);\r\n\t\t\t\t$gameMap._interpreter.setupChild(eventList, 0);\t\r\n\t\t\t\tthis._isLoadingTextScript = false;\r\n\t\t\t}\t\t\r\n\t\t\t\r\n\t\tGame_Interpreter.prototype.reloadRelativeUnits = function(params) {\r\n\t\t\t$statCalc.applyRelativeTransforms();\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.getFactionCount = function(factionId) {\r\n\t\t\tlet result = 0;\r\n\t\t\t$statCalc.iterateAllActors(null, function(actor, event){\r\n\t\t\t\tif(actor && event && !event.isErased()){\r\n\t\t\t\t\tif($gameSystem.getFactionId(actor) == factionId){\r\n\t\t\t\t\t\tresult++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn result;\r\n\t\t}\r\n\t}\n\n//# sourceURL=webpack://src/./js/SRW_Core/GameInterpreter.js?");

/***/ }),

/***/ "./js/SRW Core/GameMessage.js":
/*!************************************!*\
  !*** ./js/SRW Core/GameMessage.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n\t/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n\t\tpatches: patches,\r\n\t}); \r\n\t\r\n\tfunction patches(){};\r\n\t\r\n\tpatches.apply = function(){\r\n\t\t\r\n\t\r\n\t}\n\n//# sourceURL=webpack://src/./js/SRW_Core/GameMessage.js?");

/***/ }),

/***/ "./js/SRW Core/GameSystem.js":
/*!***********************************!*\
  !*** ./js/SRW Core/GameSystem.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n\t/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n\t\tpatches: patches,\r\n\t}); \r\n\t\r\n\tfunction patches(){};\r\n\t\r\n\tpatches.apply = function(){\r\n\t\t\r\n\t//====================================================================\r\n\t// ●Game_System\r\n\t//====================================================================\r\n\t\tvar _SRPG_Game_System_initialize = Game_System.prototype.initialize;\r\n\t\tGame_System.prototype.initialize = function() {\r\n\t\t\t_SRPG_Game_System_initialize.call(this);\r\n\t\t\tthis._SRPGMode = false;\r\n\t\t\tthis._isBattlePhase = 'initialize';\r\n\t\t\tthis._isSubBattlePhase = 'initialize';\r\n\t\t\tthis._AutoUnitId = 0;\r\n\t\t\tthis._EventToUnit = [];\r\n\t\t\tthis._SrpgStatusWindowRefreshFlag = [false, null];\r\n\t\t\tthis._SrpgBattleWindowRefreshFlag = [false, null, null];\r\n\t\t\tthis._SrpgWaitMoving = false;\r\n\t\t\tthis._SrpgActorCommandWindowRefreshFlag = [false, null];\r\n\t\t\tthis._SrpgActorCommandStatusWindowRefreshFlag = [false, null];\r\n\t\t\tthis._srpgAllActors = []; //SRPGモードに参加する全てのアクターの配列\r\n\t\t\tthis._searchedItemList = [];\r\n\t\t\tthis._pilotFallbackInfo = {};\r\n\t\t\tthis.initOptions();\r\n\t\t\tthis.purchasableAbilities = structuredClone(ENGINE_SETTINGS.PURCHASABLE_ABILITIES);\r\n\t\t\tthis._controlSet = \"mkb\";\r\n\t\t};\r\n\t\t\r\n\t\tGame_System.prototype.initOptions = function() {\r\n\t\t\tif(this.optionDisableGrid == null){\r\n\t\t\t\tthis.optionDisableGrid = false;\r\n\t\t\t}\r\n\t\t\tif(this.showWillIndicator == null){\r\n\t\t\t\tthis.showWillIndicator = false;\r\n\t\t\t}\r\n\t\t\tif(this.optionDefaultSupport == null){\r\n\t\t\t\tthis.optionDefaultSupport = true;\r\n\t\t\t}\r\n\t\t\tif(this.optionSkipUnitMoving == null){\r\n\t\t\t\tthis.optionSkipUnitMoving = false;\r\n\t\t\t}\r\n\t\t\tif(this.optionBattleBGM == null){\r\n\t\t\t\tthis.optionBattleBGM = true;\r\n\t\t\t}\r\n\t\t\tif(this.optionAfterBattleBGM == null){\r\n\t\t\t\tthis.optionAfterBattleBGM = true;\r\n\t\t\t}\r\n\t\t\tif(this.optionInfiniteFunds == null){\r\n\t\t\t\tthis.optionInfiniteFunds = false;\r\n\t\t\t}\r\n\t\t\tif(this.optionInfinitePP == null){\r\n\t\t\t\tthis.optionInfinitePP = false;\r\n\t\t\t}\r\n\t\t\tif(this.optionPadSet == null){\r\n\t\t\t\tthis.optionPadSet = \"xbox\";\r\n\t\t\t}\r\n\t\t\tif(this.optionPadSet == null){\r\n\t\t\t\tthis.optionPadSet = \"xbox\";\r\n\t\t\t}\r\n\t\t\tif(this.optionMapHints == null){\r\n\t\t\t\tthis.optionMapHints = true;\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tGame_System.prototype.getOptionMapHints = function() {\r\n\t\t\tif(this.optionMapHints == null){\r\n\t\t\t\tthis.optionMapHints = true;\r\n\t\t\t}\r\n\t\t\treturn this.optionMapHints;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.setOptionMapHints = function(value) {\t\t\t\r\n\t\t\tthis.optionMapHints = value;\t\t\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getControllerIconSets = function() {\r\n\t\t\treturn [\"xbox\", \"ds\", \"nin\"];\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getOptionPadSet = function() {\r\n\t\t\treturn ConfigManager[\"padSet\"];\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.setControlSet = function(newSet) {\r\n\t\t\tif(this._controlSet != newSet){\r\n\t\t\t\tif($gameTemp.buttonHintManager){\r\n\t\t\t\t\t$gameTemp.buttonHintManager.redraw();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._controlSet = newSet;\t\t\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getActiveGlyphSet = function() {\r\n\t\t\tif(this._controlSet == \"mkb\"){\r\n\t\t\t\treturn this._controlSet;\r\n\t\t\t}\r\n\t\t\tif(this._controlSet == \"controller\"){\r\n\t\t\t\treturn ConfigManager[\"padSet\"];\r\n\t\t\t}\r\n\t\t\treturn \"mkb\";\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getActionGlyphs = function(action) {\r\n\t\t\tconst activeSet = this.getActiveGlyphSet();\r\n\t\t\tlet glyphs;\r\n\t\t\tif(activeSet == \"mkb\"){\r\n\t\t\t\tglyphs = Input.getActionGlyphs(action);\r\n\t\t\t} else {\r\n\t\t\t\tglyphs = Input.getPadGlyphs(action);\r\n\t\t\t}\r\n\t\t\treturn Input.getGlyphDefinition(activeSet, glyphs);\r\n\t\t}\r\n\r\n\t//変数関係の処理\r\n\t\t//戦闘中かどうかのフラグを返す\r\n\t\tGame_System.prototype.isSRPGMode = function() {\r\n\t\t\treturn this._SRPGMode;\r\n\t\t};\r\n\t\tGame_System.prototype.setTerrainMoveCosts = function(air, land, water, space) {\r\n\t\t\tthis.terrainMoveCosts = {\r\n\t\t\t\tair: air || 0,\r\n\t\t\t\tland: land || 0,\r\n\t\t\t\twater: water || 0,\r\n\t\t\t\tspace: space || 0,\r\n\t\t\t};\r\n\t\t}\r\n\t\tGame_System.prototype.getTerrainMoveCosts = function() {\r\n\t\t\tif(!this.terrainMoveCosts){\r\n\t\t\t\tthis.terrainMoveCosts = {\r\n\t\t\t\t\tair: 0,\r\n\t\t\t\t\tland: 0,\r\n\t\t\t\t\twater: 0,\r\n\t\t\t\t\tspace: 0,\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\treturn this.terrainMoveCosts;\r\n\t\t}\r\n\t\t\r\n\t\t//戦闘のフェーズを返す\r\n\t\t// initialize：初期化状態\r\n\t\t// actor_phase：アクター行動フェーズ\r\n\t\t// auto_actor_phase：アクター自動行動フェーズ\r\n\t\t// enemy_phase：エネミー行動フェーズ\r\n\t\tGame_System.prototype.isBattlePhase = function() {\r\n\t\t\treturn this._isBattlePhase;\r\n\t\t};\r\n\r\n\t\t//戦闘のフェーズを変更する\r\n\t\tGame_System.prototype.setBattlePhase = function(phase) {\r\n\t\t\tthis._isBattlePhase = phase;\r\n\t\t};\r\n\r\n\t\t//戦闘のサブフェーズを返す。各BattlePhase内で使用され、処理の進行を制御する。\r\n\t\t// initialize：初期化を行う状態\r\n\t\t// normal：行動アクターが選択されていない状態\r\n\t\t// actor_move：移動範囲が表示され、移動先を選択している状態\r\n\t\t// actor_target：行動対象を選択している状態\r\n\t\t// status_window：ステータスウィンドウが開かれている状態\r\n\t\t// actor_command_window：アクターコマンドウィンドウが開かれている状態\r\n\t\t// battle_window：攻撃確認ウィンドウが開かれている状態\r\n\t\t// auto_actor_command：自動行動アクターをイベント順に行動決定する状態\r\n\t\t// auto_actor_move : 自動行動アクターが移動先を決定し、移動する状態\r\n\t\t// auto_actor_action：自動行動アクターの実際の行動を行う状態\r\n\t\t// enemy_command：エネミーをイベント順に行動決定する状態\r\n\t\t// enemy_move : エネミーが移動先を決定し、移動する状態\r\n\t\t// enemy_action：エネミーの実際の行動を行う状態\r\n\t\t// invoke_action：戦闘を実行している状態\r\n\t\t// after_battle：戦闘終了後の処理を呼び出す状態\r\n\t\tGame_System.prototype.isSubBattlePhase = function() {\r\n\t\t\treturn this._isSubBattlePhase;\r\n\t\t};\r\n\r\n\t\t//戦闘のサブフェーズを変更する\r\n\t\tGame_System.prototype.setSubBattlePhase = function(phase) {\r\n\t\t\t$SRWGameState.requestNewState(phase);\r\n\t\t\tthis._isSubBattlePhase = phase;\r\n\t\t};\r\n\t\t\r\n\t\tGame_System.prototype.getActiveUnit = function() {\r\n\t\t\treturn this.EventToUnit($gameTemp.activeEvent().eventId())[1]\r\n\t\t};\r\n\r\n\t\t//自動行動・エネミーの実行ＩＤを返す\r\n\t\tGame_System.prototype.isAutoUnitId = function() {\r\n\t\t\treturn this._AutoUnitId;\r\n\t\t};\r\n\r\n\t\t//自動行動・エネミーの実行ＩＤを設定する\r\n\t\tGame_System.prototype.setAutoUnitId = function(num) {\r\n\t\t\tthis._AutoUnitId = num;\r\n\t\t};\r\n\r\n\t\t// ステータスウィンドウのリフレッシュフラグを返す\r\n\t\tGame_System.prototype.srpgStatusWindowNeedRefresh = function() {\r\n\t\t\treturn this._SrpgStatusWindowRefreshFlag;\r\n\t\t};\r\n\r\n\t\t// ステータスウィンドウのリフレッシュフラグを設定する\r\n\t\tGame_System.prototype.setSrpgStatusWindowNeedRefresh = function(battlerArray) {\r\n\t\t\tthis._SrpgStatusWindowRefreshFlag = [true, battlerArray];\r\n\t\t};\r\n\r\n\t\t// ステータスウィンドウのリフレッシュフラグをクリアする\r\n\t\tGame_System.prototype.clearSrpgStatusWindowNeedRefresh = function() {\r\n\t\t\tthis._SrpgStatusWindowRefreshFlag = [false, null];\r\n\t\t};\r\n\r\n\t\t// 予想ウィンドウ・戦闘開始ウィンドウのリフレッシュフラグを返す\r\n\t\tGame_System.prototype.srpgBattleWindowNeedRefresh = function() {\r\n\t\t\treturn this._SrpgBattleWindowRefreshFlag;\r\n\t\t};\r\n\r\n\t\t// 予想ウィンドウ・戦闘開始ウィンドウのリフレッシュフラグを設定する\r\n\t\tGame_System.prototype.setSrpgBattleWindowNeedRefresh = function(actionBattlerArray, targetBattlerArray) {\r\n\t\t\tthis._SrpgBattleWindowRefreshFlag = [true, actionBattlerArray, targetBattlerArray];\r\n\t\t};\r\n\r\n\t\t// 予想ウィンドウ・戦闘開始ウィンドウのリフレッシュフラグをクリアする\r\n\t\tGame_System.prototype.clearSrpgBattleWindowNeedRefresh = function() {\r\n\t\t\tthis._SrpgBattleWindowRefreshFlag = [false, null, null];\r\n\t\t};\r\n\r\n\t\t//移動範囲を表示するスプライトの最大数\r\n\t\tGame_System.prototype.spriteMoveTileMax = function() {\r\n\t\t\treturn Math.min($dataMap.width * $dataMap.height, 1000);\r\n\t\t};\r\n\r\n\t\t// 移動中のウェイトフラグを返す\r\n\t\tGame_System.prototype.srpgWaitMoving = function() {\r\n\t\t\treturn this._SrpgWaitMoving;\r\n\t\t};\r\n\r\n\t\t// 移動中のウェイトフラグを設定する\r\n\t\tGame_System.prototype.setSrpgWaitMoving = function(flag) {\r\n\t\t\tthis._SrpgWaitMoving = flag;\r\n\t\t};\r\n\r\n\t\t// アクターコマンドウィンドウのリフレッシュフラグを返す\r\n\t\tGame_System.prototype.srpgActorCommandWindowNeedRefresh = function() {\r\n\t\t\treturn this._SrpgActorCommandWindowRefreshFlag;\r\n\t\t};\r\n\r\n\t\t// アクターコマンドウィンドウのリフレッシュフラグを設定する\r\n\t\tGame_System.prototype.setSrpgActorCommandWindowNeedRefresh = function(battlerArray) {\r\n\t\t\tthis._SrpgActorCommandWindowRefreshFlag = [true, battlerArray];\r\n\t\t};\r\n\r\n\t\t// アクターコマンドウィンドウのリフレッシュフラグをクリアする\r\n\t\tGame_System.prototype.clearSrpgActorCommandWindowNeedRefresh = function() {\r\n\t\t\tthis._SrpgActorCommandWindowRefreshFlag = [false, null];\r\n\t\t};\r\n\r\n\t\t// 行動中アクターの簡易ステータスウィンドウのリフレッシュフラグを返す\r\n\t\tGame_System.prototype.srpgActorCommandStatusWindowNeedRefresh = function() {\r\n\t\t\treturn this._SrpgActorCommandStatusWindowRefreshFlag;\r\n\t\t};\r\n\r\n\t\t// 行動中アクターの簡易ステータスウィンドウのリフレッシュフラグを設定する\r\n\t\tGame_System.prototype.setSrpgActorCommandStatusWindowNeedRefresh = function(battlerArray) {\r\n\t\t\tthis._SrpgActorCommandStatusWindowRefreshFlag = [true, battlerArray];\r\n\t\t};\r\n\r\n\t\t// 行動中アクターの簡易ステータスウィンドウのリフレッシュフラグをクリアする\r\n\t\tGame_System.prototype.clearSrpgActorCommandStatusWindowNeedRefresh = function() {\r\n\t\t\tthis._SrpgActorCommandStatusWindowRefreshFlag = [false, null];\r\n\t\t};\r\n\r\n\t\t//戦闘に参加するアクターのリスト\r\n\t\tGame_System.prototype.srpgAllActors = function() {\r\n\t\t\treturn this._srpgAllActors;\r\n\t\t};\r\n\r\n\t\tGame_System.prototype.clearSrpgAllActors = function() {\r\n\t\t\tthis._srpgAllActors = [];\r\n\t\t};\r\n\r\n\t\tGame_System.prototype.pushSrpgAllActors = function(actor) {\r\n\t\t\tthis._srpgAllActors.push(actor);\r\n\t\t};\r\n\r\n\t\t// 探査済み座標のリスト\r\n\t\tGame_System.prototype.pushSearchedItemList = function(xy) {\r\n\t\t\tif (!this._searchedItemList) {\r\n\t\t\t\tthis._searchedItemList = [];\r\n\t\t\t}\r\n\t\t\tthis._searchedItemList.push(xy);\r\n\t\t};\r\n\r\n\t\tGame_System.prototype.indexOfSearchedItemList = function(xy) {\r\n\t\t\tif (!this._searchedItemList) {\r\n\t\t\t\tthis._searchedItemList = [];\r\n\t\t\t}\r\n\t\t\tvar flag = -1;\r\n\t\t\tfor (var i=0; i < this._searchedItemList.length; i++) {\r\n\t\t\t\tvar xy2 = this._searchedItemList[i];\r\n\t\t\t\tif (xy[0] === xy2[0] && xy[1] === xy2[1]) {\r\n\t\t\t\t\tflag = i;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\treturn flag;\r\n\t\t};\r\n\r\n\t\tGame_System.prototype.resetSearchedItemList = function() {\r\n\t\t\tthis._searchedItemList = [];\r\n\t\t};\r\n\r\n\t\tGame_System.prototype.updateAvailableUnits = function(ignoreEventDeploys, preservePilotTypes, noReload){\r\n\t\t\tconst _this = this;\r\n\t\t\tthis._availableMechs = [];//available mechs must be cleared to avoid conflicts with previously serialized entries in the listing\r\n\t\t\tthis._availableUnits = $gameParty.allMembers();\r\n\t\t\t$statCalc.invalidateAbilityCache();\r\n\t\t\t\r\n\t\t\t//ensure pilots are reset to their default class assignments before constructing the deploy list\r\n\t\t\tvar eventCtr = 0;\r\n\t\t\t\r\n\t\t\tfunction updateUnit(actor){\r\n\t\t\t\t//revert any class changes made during the stage by a deploy action\r\n\t\t\t\tvar refEvent = $statCalc.getReferenceEvent(actor);\r\n\t\t\t\tif(!ignoreEventDeploys || !refEvent || !refEvent.isScriptedDeploy){\r\n\t\t\t\t\t//if(actor._intermissionClassId){\r\n\t\t\t\t\t//\tactor._classId = actor._intermissionClassId;\r\n\t\t\t\t\t\t//actor.isSubPilot = false;\r\n\t\t\t\t\t//\tdelete actor._intermissionClassId;\r\n\t\t\t\t\t//}\r\n\t\t\t\t\tif(_this._pilotFallbackInfo && _this._pilotFallbackInfo[actor.actorId()]){\r\n\t\t\t\t\t\tlet info = _this._pilotFallbackInfo[actor.actorId()];\r\n\t\t\t\t\t\tactor._classId = info.classId;\r\n\t\t\t\t\t\tactor.isSubPilot = info.isSubPilot;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar targetMech = $statCalc.getMechData($dataClasses[actor._classId], true);\t\t\t\t\t\r\n\t\t\t\t\tif(_this._mechFallbackInfo && _this._mechFallbackInfo[actor._classId]){\r\n\t\t\t\t\t\tlet info = _this._mechFallbackInfo[actor._classId];\r\n\t\t\t\t\t\ttargetMech.subPilots = info.subPilots;\r\n\t\t\t\t\t\t$statCalc.storeMechData(targetMech);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t/*if(!preservePilotTypes){\r\n\t\t\t\t\t\tactor.isSubPilot = false;\r\n\t\t\t\t\t}*/\r\n\t\t\t\t\t\r\n\t\t\t\t\t$statCalc.attachDummyEvent(actor, eventCtr++);\r\n\t\t\t\t\t$statCalc.invalidateAbilityCache(actor);\r\n\t\t\t\t\t$statCalc.initSRWStats(actor);\t\r\n\t\t\t\t}\r\n\t\t\t\t$statCalc.applyBattleStartWill(actor);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis._availableUnits.forEach(function(actor){\t\t\r\n\t\t\t\tactor.event = null\t\t\t\t\t\t\t\t\t\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tif(!noReload){\r\n\t\t\t\t//main twin must be initialized first to ensure a reference event is available for their sub twin\r\n\t\t\t\tthis._availableUnits.forEach(function(actor){\r\n\t\t\t\t\tif(!actor.isSubTwin){\r\n\t\t\t\t\t\tupdateUnit(actor);\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tthis._availableUnits.forEach(function(actor){\r\n\t\t\t\t\tif(actor.isSubTwin){\r\n\t\t\t\t\t\tupdateUnit(actor);\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tvar deployList = this.getDeployList();\r\n\t\t\tvar isSubTwin = {};\r\n\t\t\tvar subTwinLookup = {};\r\n\t\t\tif(deployList){\r\n\t\t\t\tdeployList.forEach(function(entry){\r\n\t\t\t\t\tif(entry.sub != null && entry.main != null){\r\n\t\t\t\t\t\tisSubTwin[entry.sub] = true;\r\n\t\t\t\t\t\tsubTwinLookup[entry.main] = entry.sub;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//clean up previous sub twinning state to avoid previous state remaining applied which can lead to crashes due to circular references\r\n\t\t\tthis._availableUnits.forEach(function(actor){\r\n\t\t\t\tvar refEvent = $statCalc.getReferenceEvent(actor);\r\n\t\t\t\tif(!ignoreEventDeploys || !refEvent || !refEvent.isScriptedDeploy){\r\n\t\t\t\t\tactor.isSubTwin = false;\r\n\t\t\t\t\tactor.subTwin = null;\r\n\t\t\t\t\tactor.subTwinId = null;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis.dummyId = 0;\r\n\t\t\tthis._availableUnits.forEach(function(actor){\r\n\t\t\t\tvar refEvent = $statCalc.getReferenceEvent(actor);\r\n\t\t\t\tif(!ignoreEventDeploys || !refEvent || !refEvent.isScriptedDeploy){\r\n\t\t\t\t\t/*if(!preservePilotTypes){\r\n\t\t\t\t\t\tactor.isSubPilot = false;\r\n\t\t\t\t\t}*/\r\n\t\t\t\t\tif(isSubTwin[actor.actorId()]){\r\n\t\t\t\t\t\tactor.isSubTwin = true;\r\n\t\t\t\t\t\tactor.subTwin = null;\r\n\t\t\t\t\t\tactor.subTwinId = null;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tactor.isSubTwin = false;\r\n\t\t\t\t\t\tif(subTwinLookup[actor.actorId()] != null && subTwinLookup[actor.actorId()] != 0){\r\n\t\t\t\t\t\t\tactor.subTwinId = subTwinLookup[actor.actorId()];\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tactor.subTwin = null;\r\n\t\t\t\t\t\t\tactor.subTwinId = null;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t$statCalc.attachDummyEvent(actor, actor.SRWStats.mech.id);\r\n\t\t\t\t\t$statCalc.invalidateAbilityCache(actor);\r\n\t\t\t\t\t$statCalc.initSRWStats(actor);\t\t\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t//sanity sub twin assignments, reset sub twin state if an actor does not have a main twin\r\n\t\t\t//hacky fix for issues where some unts would end up in an instable subtwin state after event slot reassignments\r\n\t\t\tthis._availableUnits.forEach(function(actor){\r\n\t\t\t\tif(actor.isSubTwin){\r\n\t\t\t\t\tif(!$statCalc.getMainTwin(actor)){\r\n\t\t\t\t\t\tactor.isSubTwin = false;\r\n\t\t\t\t\t\tactor.subTwin = null;\r\n\t\t\t\t\t\tactor.subTwinId = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tvar tmp = Object.keys($SRWSaveManager.getUnlockedUnits());\t\t\t\r\n\t\t\tfor(var i = 0; i < tmp.length; i++){\r\n\t\t\t\tlet mechId = tmp[i];\r\n\t\t\t\tvar currentPilot = $statCalc.getCurrentPilot(mechId);\r\n\t\t\t\tif(!currentPilot){\r\n\t\t\t\t\t//wholesale replace evolved units with their targets for availability\r\n\t\t\t\t\tif($SRWSaveManager.isEvolvedMech(mechId)){\r\n\t\t\t\t\t\tmechId = $SRWSaveManager.getEvolutionTarget(mechId);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar mechData = $statCalc.getMechData($dataClasses[mechId], true);\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar result = $statCalc.createEmptyActor();\t\t\t\t\r\n\t\t\t\t\tresult.SRWStats.mech = mechData;\t\t\r\n\t\t\t\t\t$statCalc.attachDummyEvent(result, mechData.id);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tthis._availableMechs.push(result);\r\n\t\t\t\t\t$statCalc.invalidateAbilityCache(result);\t\r\n\t\t\t\t\t$statCalc.calculateSRWMechStats(mechData, false, result);\t\t\r\n\t\t\t\t}\r\n\t\t\t}\t\r\n\t\t\t\r\n\t\t\t//_this._pilotFallbackInfo = {};\r\n\t\t\t//_this._mechFallbackInfo = {};\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.startIntermission = function(){\r\n\t\t\tthis._isIntermission = true;\r\n\t\t\tImageManager.clearFullCache();\r\n\t\t\t//$statCalc.reloadSRWActors();\r\n\t\t\tthis.updateAvailableUnits();\r\n\t\t\t$gameTemp.summaryUnit = null;\r\n\t\t\t$statCalc.invalidateAbilityCache();\r\n\t\t\t$gameTemp.deployMode = \"\";\t\t\r\n\t\t\tthis.setAutomaticDifficultyLevel();\t\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.isIntermission = function(id){\r\n\t\t\treturn this._isIntermission;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getAvailableUnits = function(id){\r\n\t\t\treturn this._availableUnits;\r\n\t\t}\r\n\t\t\r\n\t\t//use $gameActors.actor instead!\r\n\t\tGame_System.prototype.getActorById = function(id){\r\n\t\t\tvar result;\r\n\t\t\tvar ctr = 0; \r\n\t\t\twhile(!result && ctr < this._availableUnits.length){\r\n\t\t\t\tif(this._availableUnits[ctr].actorId() == id){\r\n\t\t\t\t\tresult = this._availableUnits[ctr];\r\n\t\t\t\t}\r\n\t\t\t\tctr++;\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.endIntermission = function(){\r\n\t\t\t$gameTemp.intermissionPending = false;\r\n\t\t\tthis._isIntermission = false;\r\n\t\t}\t\r\n\t\t\r\n\t\tGame_System.prototype.startSRPG = function() {\r\n\t\t\tthis._SRPGMode = true;\r\n\t\t\tthis.enableGrid = true;\r\n\t\t\t\r\n\t\t\tthis.resetAbilitZones();\r\n\t\t\t\t\r\n\t\t\t$gameTemp.listContext = \"actor\";\r\n\t\t\t$gameSwitches.setValue(_srpgBattleSwitchID, true);\r\n\t\t\tthis._isBattlePhase = 'start_srpg';\r\n\t\t\tthis._isSubBattlePhase = 'start_srpg';\r\n\t\t\t$gamePlayer.refresh();\r\n\t\t\t$gameTemp.clearActiveEvent();\r\n\t\t\t$gameTemp.actorAction = {};\r\n\t\t\t$gameTemp.enemyAction = {};\r\n\t\t\tthis.clearData(); \r\n\t\t\tthis.setAllEventType(); \r\n\t\t\tthis._availableUnits = [];\r\n\t\t\tthis.setSrpgActors(); \r\n\t\t\tthis.setSrpgEnemys(); \r\n\t\t\t\r\n\t\t\t$gameMap.setEventImages();  \r\n\t\t\tthis.runBattleStartEvent(); \r\n\t\t\tthis.runAfterDeployEvent();\r\n\t\t\t//clear stage temp variables\r\n\t\t\tfor(var i = 21; i <= 60; i++){\r\n\t\t\t\t$gameVariables.setValue(i, 0);\r\n\t\t\t}\r\n\r\n\t\t\t$gameSystem.incrementSaveTurn();//increment for turn 1\r\n\t\t\t$gameVariables.setValue(_turnVarID, 1); \r\n\t\t\t$gameSystem.resetSearchedItemList();\r\n\t\t\t$gameSystem.textLog = [];\r\n\t\t\t$gameSystem._specialTheme = -1;\r\n\t\t\t$gameSystem.highlightedTiles = [];\r\n\r\n\t\t\t$gameSystem.regionHighlights = {};\r\n\t\t\t\r\n\r\n\t\t\t$gameSystem.enemyUpgradeLevel = 0;\r\n\t\t\t$gameSystem.persuadeOptions = {};\r\n\t\t\t$gameTemp.currentSwapSource = -1;\r\n\t\t\t$gameTemp.enemyAppearQueue = [];\r\n\t\t\t$gameTemp.eventToDeploySlot = null;\r\n\t\t\t$gameSystem.defaultBattleEnv = null;\r\n\t\t\t$gameSystem.skyBattleEnv = null;\r\n\t\t\t$gameSystem.superStateBattleEnv = {};\r\n\t\t\t$gameSystem.regionBattleEnv = structuredClone(ENGINE_SETTINGS.DEFAULT_REGION_ENVS || {});\r\n\t\t\t$gameSystem.regionSkyBattleEnv = {};\r\n\t\t\t$gameSystem.regionSuperStateBattleEnv = {};\r\n\t\t\t$gameSystem.stageTextId = null;\r\n\t\t\t\r\n\t\t\tif($gameSystem.foregroundSpriteToggleState == null){\r\n\t\t\t\t$gameSystem.foregroundSpriteToggleState = 0;\r\n\t\t\t}\r\n\t\t\t//$gameSystem.showWillIndicator = false;\r\n\t\t\t$gameTemp.disappearQueue = [];\r\n\r\n\t\t\t$gameSystem.actorRankLookup = $statCalc.getActorRankLookup();\r\n\t\t\t$gameTemp.AIWaitTimer = 0;\r\n\t\t\t\r\n\t\t\t$gameVariables.setValue(_masteryConditionText, APPSTRINGS.GENERAL.label_default_mastery_condition);\t\r\n\t\t\t$gameVariables.setValue(_victoryConditionText, APPSTRINGS.GENERAL.label_default_victory_condition);\t\r\n\t\t\t$gameVariables.setValue(_defeatConditionText, APPSTRINGS.GENERAL.label_default_defeat_condition);\r\n\t\t\t\r\n\t\t\tthis.initFactionInfo();\r\n\t\t\t\r\n\t\t\t$gameTemp.preventedDeathQuotes = {};\r\n\t\t\t$gameTemp.updatePlayerSpriteVisibility();\r\n\t\t\t\r\n\t\t\tSceneManager._scene.createPauseWindow(); //ensure pause menu is updated to reflect the new mode\r\n\t\t\t\r\n\t\t\tthis.untargetableAllies = {};\r\n\t\t\t\r\n\t\t\t$SRWSaveManager.initMapSRPoint($gameMap.mapId());\r\n\t\t\t\r\n\t\t\tif(ENGINE_SETTINGS.DIFFICULTY_MODS && ENGINE_SETTINGS.DIFFICULTY_MODS.enabled > 0){\r\n\t\t\t\tconst modSet = ENGINE_SETTINGS.DIFFICULTY_MODS.levels[$gameSystem.getCurrentDifficultyLevel()];\r\n\t\t\t\tif(modSet && modSet.autoUpgradesFunc){\r\n\t\t\t\t\tthis.setEnemyUpgradeLevelGlobal(modSet.autoUpgradesFunc($gameMap.mapId()) || 0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif($gameMap){\r\n\t\t\t\t$gameSystem.regionHighlightsRefreshed = true;\r\n\t\t\t\t$gameMap.clearRegionTiles();\r\n\t\t\t\t$gameMap._SRWTileProperties = null;\r\n\t\t\t\t$gameMap.initSRWTileProperties();\r\n\t\t\t}\t\t\t\r\n\t\t};\t\t\r\n\r\n\t\tGame_System.prototype.initFactionInfo = function(id) {\r\n\t\t\tthis.factionConfig = {\r\n\t\t\t\t0: {\r\n\t\t\t\t\tattacksPlayers:true,\r\n\t\t\t\t\tattacksFactions: [1,2],\r\n\t\t\t\t\tactive: true\r\n\t\t\t\t},\r\n\t\t\t\t1: {\r\n\t\t\t\t\tattacksPlayers:false,\r\n\t\t\t\t\tattacksFactions: [0],\r\n\t\t\t\t\tactive: false\r\n\t\t\t\t},\r\n\t\t\t\t2: {\r\n\t\t\t\t\tattacksPlayers:false,\r\n\t\t\t\t\tattacksFactions: [0],\r\n\t\t\t\t\tactive: false\r\n\t\t\t\t}\r\n\t\t\t};\t\t\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.enableFaction = function(id) {\r\n\t\t\tif(this.factionConfig[id]){\r\n\t\t\t\tthis.factionConfig[id].active = true;\r\n\t\t\t}\t\t\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.disableFaction = function(id) {\r\n\t\t\tif(this.factionConfig[id]){\r\n\t\t\t\tthis.factionConfig[id].active = false;\r\n\t\t\t}\t\t\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.setFactionAggro = function(id, aggro) {\r\n\t\t\tif(this.factionConfig[id]){\r\n\t\t\t\tthis.factionConfig[id].attacksFactions = [];\r\n\t\t\t\tfor(var i = 0; i < aggro.length; i++){\r\n\t\t\t\t\tif(aggro[i] == \"player\"){\r\n\t\t\t\t\t\tthis.factionConfig[id].attacksPlayers = true;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.factionConfig[id].attacksFactions.push(aggro[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t\t\r\n\t\tGame_System.prototype.clearFactionAggro = function(id) {\r\n\t\t\tif(this.factionConfig[id]){\r\n\t\t\t\tthis.factionConfig[id].attacksFactions = [];\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getPlayerFactionInfo = function() {\r\n\t\t\t var aggressiveFactions = [];\r\n\t\t\t if(this.factionConfig[0].attacksPlayers){\r\n\t\t\t\t aggressiveFactions.push(0);\r\n\t\t\t }\r\n\t\t\t if(this.factionConfig[1].attacksPlayers){\r\n\t\t\t\t aggressiveFactions.push(1);\r\n\t\t\t }\r\n\t\t\t if(this.factionConfig[2].attacksPlayers){\r\n\t\t\t\t aggressiveFactions.push(2);\r\n\t\t\t }\r\n\t\t\t return {\r\n\t\t\t\tattacksPlayers:false,\r\n\t\t\t\tattacksFactions: aggressiveFactions,\r\n\t\t\t\tactive: true,\r\n\t\t\t\townFaction: \"player\"\r\n\t\t\t };\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getFactionId = function(actor) {\r\n\t\t\tif(actor.isActor()){\r\n\t\t\t\treturn \"player\";\r\n\t\t\t} else {\r\n\t\t\t\treturn actor.factionId;\r\n\t\t\t}\t\t\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getEnemyFactionInfo = function(enemy) {\r\n\t\t\t let result = this.factionConfig[enemy.factionId] || {};\r\n\t\t\t result.ownFaction = enemy.factionId;\r\n\t\t\t return result;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.areUnitsFriendly = function(actor, other) {\r\n\t\t\treturn this.isFriendly(actor, this.getFactionId(other))\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.isFriendly = function(actor, factionId) {\r\n\t\t\tvar factionInfo = this.getUnitFactionInfo(actor);\r\n\t\t\tif(factionId == \"player\"){\r\n\t\t\t\treturn !factionInfo.attacksPlayers;\r\n\t\t\t} else {\r\n\t\t\t\treturn factionInfo.attacksFactions.indexOf(factionId) == -1;\r\n\t\t\t}\r\n\t\t}\t\r\n\t\t\r\n\t\tGame_System.prototype.getUnitFactionInfo = function(actor) {\r\n\t\t\tif(actor.isActor()){\r\n\t\t\t\treturn this.getPlayerFactionInfo();\r\n\t\t\t} else {\r\n\t\t\t\treturn this.getEnemyFactionInfo(actor);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.isEnemy = function(actor) {\r\n\t\t\tif(!actor.isActor){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif(actor.isActor()){\r\n\t\t\t\treturn false;\r\n\t\t\t} else {\r\n\t\t\t\treturn this.getEnemyFactionInfo(actor).attacksPlayers;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.isEnemyPhase = function(actor) {\r\n\t\t\treturn $gameSystem.factionConfig[$gameTemp.currentFaction].attacksPlayers;\r\n\t\t}\r\n\r\n\t\t//イベントＩＤに対応するアクター・エネミーデータを初期化する\r\n\t\tGame_System.prototype.clearData = function() {\r\n\t\t\tthis._EventToUnit = [];\r\n\t\t\t$gameSystem.clearSrpgAllActors();\r\n\t\t};\r\n\r\n\t\t//イベントＩＤに対応するアクター・エネミーデータをセットする\r\n\t\tGame_System.prototype.setEventToUnit = function(event_id, type, data) {\r\n\t\t\tthis._EventToUnit[event_id] = [type, data];\r\n\t\t};\r\n\t\t\r\n\t\tGame_System.prototype.clearEventToUnit = function(event_id) {\r\n\t\t\tdelete this._EventToUnit[event_id];\r\n\t\t}\r\n\r\n\t\t//イベントＩＤから対応するアクター・エネミーデータを返す\r\n\t\tGame_System.prototype.EventToUnit = function(event_id) {\r\n\t\t\t//return this._EventToUnit[event_id];\r\n\t\t\tvar battlerArray = this._EventToUnit[event_id];\r\n\t\t\tif (battlerArray) {\r\n\t\t\t\tif (battlerArray[0] === 'actor') {\r\n\t\t\t\t\tvar actor = $gameActors.actor(battlerArray[1]);\r\n\t\t\t\t\treturn [battlerArray[0], actor]\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn battlerArray;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t//アクターＩＤから対応するイベントＩＤを返す\r\n\t\tGame_System.prototype.ActorToEvent = function(actor_id) {\r\n\t\t\tvar eventId = 0;\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif (event.isType() === 'actor' || event.isType() === 'ship' || event.isType() === 'ship_event') {\r\n\t\t\t\t\tvar unit =  $gameSystem.EventToUnit(event.eventId());\r\n\t\t\t\t\tif(unit){\r\n\t\t\t\t\t\tvar actor = unit[1];\r\n\t\t\t\t\t\tif (actor && actor.actorId() == actor_id) {\r\n\t\t\t\t\t\t\teventId = event.eventId();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}              \r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn eventId;\r\n\t\t};\r\n\t\t\r\n\r\n\t\t// イベントのメモからイベントのタイプを設定する\r\n\t\tGame_System.prototype.setAllEventType = function() {\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif (event.event().meta.type) {\r\n\t\t\t\t\tevent.setType(event.event().meta.type);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getActorsWithAction = function(){\r\n\t\t\tvar _this = this;\t\t\r\n\t\t\tvar result = [];\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tvar battlerArray = _this.EventToUnit(event.eventId());\r\n\t\t\t\tif(!event.isErased() && battlerArray){\r\n\t\t\t\t\tvar actor = battlerArray[1];\r\n\t\t\t\t\tif(actor.isActor() && !actor.srpgTurnEnd() && !$statCalc.isAI(actor)){\r\n\t\t\t\t\t\tresult.push(actor);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\t// イベントのメモからアクターを読み込み、対応するイベントＩＤに紐づけする\r\n\t\tGame_System.prototype.setSrpgActors = function() {\r\n\t\t\tconst _this = this;\r\n\t\t\t$gameVariables.setValue(_existActorVarID, 0);\r\n\t\t\t$gameVariables.setValue(_actorsDestroyed, 0);\r\n\t\t\t$gameVariables.setValue(_existShipVarId, 0);\t\r\n\t\t\t\r\n\t\t\tthis._availableUnits = $gameParty.allMembers();\r\n\t\t\tthis._availableUnits.forEach(function(actor){\r\n\t\t\t\t$statCalc.initSRWStats(actor);\r\n\t\t\t\tactor.event = null;\r\n\t\t\t\tactor.reversalInfo = {};\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif (event.isType() === 'actor' || event.isType() === 'ship' || event.isType() === 'ship_event') {\r\n\t\t\t\t\tevent.erase();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\t\t\r\n\t\tGame_System.prototype.registerPilotFallbackInfo = function(actor) {\r\n\t\t\tconst _this = this;\r\n\t\t\tif(_this._pilotFallbackInfo[actor.actorId()] == null){\r\n\t\t\t\t_this._pilotFallbackInfo[actor.actorId()] = {\r\n\t\t\t\t\tclassId: actor._classId,\r\n\t\t\t\t\tisSubPilot: actor.isSubPilot\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.overwritePilotFallbackInfo = function(actor) {\r\n\t\t\tconst _this = this;\r\n\t\t\tif(!_this._pilotFallbackInfo){\r\n\t\t\t\t_this._pilotFallbackInfo = {};\r\n\t\t\t}\r\n\t\t\t_this._pilotFallbackInfo[actor.actorId()] = {\r\n\t\t\t\tclassId: actor._classId,\r\n\t\t\t\tisSubPilot: actor.isSubPilot\r\n\t\t\t};\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.registerMechFallbackInfo = function(mechId, subPilots) {\r\n\t\t\tconst _this = this;\r\n\t\t\tif(!_this._mechFallbackInfo){\r\n\t\t\t\t_this._mechFallbackInfo = {};\r\n\t\t\t}\r\n\t\t\tif(_this._mechFallbackInfo[mechId] == null){\r\n\t\t\t\t_this._mechFallbackInfo[mechId] = {\r\n\t\t\t\t\tsubPilots: subPilots\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\t\r\n\r\n\t\tGame_System.prototype.overwriteMechFallbackInfo = function(mechId, subPilots) {\r\n\t\t\tconst _this = this;\r\n\t\t\tif(!_this._mechFallbackInfo){\r\n\t\t\t\t_this._mechFallbackInfo = {};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t_this._mechFallbackInfo[mechId] = {\r\n\t\t\t\tsubPilots: subPilots\r\n\t\t\t};\t\t\t\r\n\t\t}\t\t\t\r\n\t\t\r\n\t\tGame_System.prototype.getPilotFallbackInfo = function(actor) {\r\n\t\t\tconst _this = this;\r\n\t\t\tif(!_this._pilotFallbackInfo){\r\n\t\t\t\t_this._pilotFallbackInfo = {};\r\n\t\t\t}\r\n\t\t\tif(_this._pilotFallbackInfo[actor.actorId()]){\r\n\t\t\t\treturn _this._pilotFallbackInfo[actor.actorId()];\r\n\t\t\t} else {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tclassId: actor._classId,\r\n\t\t\t\t\tisSubPilot: actor.isSubPilot\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getMechFallbackInfo = function(mechId) {\r\n\t\t\tconst _this = this;\r\n\t\t\tif(!_this._mechFallbackInfo){\r\n\t\t\t\t_this._mechFallbackInfo = {};\r\n\t\t\t}\r\n\t\t\tif(_this._mechFallbackInfo[mechId]){\r\n\t\t\t\treturn _this._mechFallbackInfo[mechId];\r\n\t\t\t} else {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tsubPilots: $statCalc.getMechData($dataClasses[mechId], true).subPilots\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getPilotFallbackInfoFull = function() {\r\n\t\t\tconst _this = this;\r\n\t\t\tif(!_this._pilotFallbackInfo){\r\n\t\t\t\t_this._pilotFallbackInfo = {};\r\n\t\t\t}\r\n\t\t\treturn _this._pilotFallbackInfo;\r\n\t\t}\r\n\r\n\t\tGame_System.prototype.deployShips = function(toAnimQueue) {\t\t\r\n\t\t\tvar _this = this;\r\n\t\t\tvar deployInfo = _this.getDeployInfo();\r\n\t\t\tvar deployList = _this.getActiveShipDeployList();\t\t\t\r\n\t\t\t\r\n\t\t\tvar shipCtr = 0;\t\t\r\n\t\t\t$gameMap.events().forEach(function(event) { //ensure to spawn ships first so that are drawn below the other actor sprites\r\n\t\t\t\tif (event.isType() === 'ship' && !event.isDeployed) {\r\n\t\t\t\t\tvar actor_unit;\r\n\t\t\t\t\tvar entry = deployList[shipCtr] || {};\r\n\t\t\t\t\tvar actorId = entry.main;\t\t\t\t\t\r\n\t\t\t\t\tif(typeof actorId != \"undefined\"){\r\n\t\t\t\t\t\tactor_unit = $gameActors.actor(actorId);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (actor_unit) {\r\n\t\t\t\t\t\t_this.deployActor(actor_unit, event, toAnimQueue);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tevent.erase();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tshipCtr++;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.deployActor = function(actor_unit, event, toAnimQueue, subId, isScriptedDeploy) {\r\n\t\t\tvar _this = this;\r\n\t\t\tactor_unit.event = event;\r\n\t\t\tevent._lastModsPosition = null;\r\n\t\t\tevent.isDropBox = false;\r\n\t\t\tdelete event.dropBoxItems;\r\n\t\t\t_this.pushSrpgAllActors(event.eventId());\r\n\t\t\tevent.isDeployed = true;\r\n\t\t\tevent.manuallyErased = false;\r\n\t\t\tevent.isScriptedDeploy = isScriptedDeploy ? true : false;\r\n\t\t\tvar bitmap = ImageManager.loadFace(actor_unit.faceName()); //顔グラフィックをプリロードする\r\n\t\t\tvar oldValue = $gameVariables.value(_existActorVarID);\r\n\t\t\t\r\n\t\t\tactor_unit.isSubPilot = false;\t\t\t\r\n\t\t\tactor_unit.isSubTwin = false;\t\r\n\t\t\tactor_unit.subTwin = null;\r\n\t\t\tactor_unit.subTwinId = null;\r\n\t\t\t\r\n\t\t\t$statCalc.initSRWStats(actor_unit);\r\n\t\t\t\r\n\t\t\tvar increment = 1;\r\n\t\t\tif(actor_unit.SRWStats.mech.combinesFrom){\r\n\t\t\t\tincrement = actor_unit.SRWStats.mech.combinesFrom.length;\r\n\t\t\t}\r\n\t\t\t$gameVariables.setValue(_existActorVarID, oldValue + increment);\r\n\t\t\t_this.setEventToUnit(event.eventId(), 'actor', actor_unit.actorId());\r\n\t\t\t\r\n\t\t\t$statCalc.applyDeployActions(actor_unit.SRWStats.pilot.id, actor_unit.SRWStats.mech.id);\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tif($statCalc.isShip(actor_unit)){\r\n\t\t\t\tvar oldValue = $gameVariables.value(_existShipVarId);\r\n\t\t\t\t$gameVariables.setValue(_existShipVarId, oldValue + 1);\r\n\t\t\t}\t\t\r\n\t\t\t\r\n\t\t\tactor_unit.SRPGActionTimesSet($statCalc.applyStatModsToValue(actor_unit, 1, [\"extra_action\"]));\r\n\t\t\tactor_unit.setSrpgTurnEnd(false);\t\r\n\t\t\tactor_unit.setBattleMode(\"\");\r\n\r\n\t\t\tvar position = $statCalc.getAdjacentFreeSpace({x: event.posX(), y: event.posY()}, null, event.eventId());\r\n\t\t\tevent.locate(position.x, position.y);\r\n\t\t\t\r\n\t\t\tif(!$gameTemp.enemyAppearQueue){\r\n\t\t\t\t$gameTemp.enemyAppearQueue = [];\r\n\t\t\t}\t\r\n\t\t\tif(toAnimQueue){\t\t\t\t\r\n\t\t\t\t$gameTemp.enemyAppearQueue.push(event);\r\n\t\t\t\tevent.erase();\r\n\t\t\t\tevent.isPendingDeploy = true;\r\n\t\t\t} else {\r\n\t\t\t\tevent.appear();\r\n\t\t\t\t//event.refreshImage();\r\n\t\t\t\t$gameMap.setEventImages();\t\t\t\r\n\t\t\t}\r\n\t\t\r\n\t\t\t\r\n\t\t\tif(subId != null && subId != actor_unit.actorId()){\r\n\t\t\t\tactor_unit.subTwinId = subId;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t$statCalc.invalidateAbilityCache(actor_unit);\r\n\t\t\t$statCalc.initSRWStats(actor_unit);\r\n\t\t\t$statCalc.applyBattleStartWill(actor_unit);\r\n\t\t\tlet preferredSuperState = this.getPreferredSuperState(actor_unit);\r\n\t\t\tif(preferredSuperState){\r\n\t\t\t\t$statCalc.setSuperState(actor_unit, preferredSuperState);\r\n\t\t\t}\r\n\t\t\t$statCalc.updateSuperState(actor_unit, true);\r\n\t\t\t//call refresh to clear any lingering states of the actor\r\n\t\t\tactor_unit.refresh();\r\n\t\t\t\r\n\t\t\tlet parts = $dataClasses[actor_unit.SRWStats.mech.id].meta.srpgOverworld.split(\",\");\r\n\t\t\tImageManager.loadCharacter(parts[0]);\r\n\t\t\t\r\n\t\t\t$statCalc.applyRelativeTransforms();\r\n\t\t\t\r\n\t\t\tevent.isShip = $statCalc.isShip(actor_unit);\r\n\r\n\t\t\tif(actor_unit.subTwin){\r\n\t\t\t\tactor_unit.subTwin.SRPGActionTimesSet($statCalc.applyStatModsToValue(actor_unit.subTwin, 1, [\"extra_action\"]));\r\n\t\t\t\tactor_unit.subTwin.setSrpgTurnEnd(false);\t\r\n\t\t\t\tactor_unit.subTwin.setBattleMode(\"\");\r\n\t\t\t}\r\n\t\t\tconst subPilots = $statCalc.getSubPilots(actor_unit);\r\n\t\t\tfor(let subPilotId of subPilots){\r\n\t\t\t\tconst subPilot = $gameActors.actor(subPilotId);\r\n\t\t\t\tif(subPilot){\r\n\t\t\t\t\tsubPilot.SRPGActionTimesSet($statCalc.applyStatModsToValue(subPilot, 1, [\"extra_action\"]));\r\n\t\t\t\t\tsubPilot.setSrpgTurnEnd(false);\t\r\n\t\t\t\t\tsubPilot.setBattleMode(\"\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.deployItemBox = function(event, items) {\r\n\t\t\tvar _this = this;\r\n\t\t\t//\r\n\t\t\tevent.isDropBox = true;\r\n\t\t\tevent.setType(\"\");\r\n\t\t\tevent.dropBoxItems = items;\t\t\t\r\n\t\t\tevent.setImage(ENGINE_SETTINGS.ITEM_BOX_SPRITE.characterName, ENGINE_SETTINGS.ITEM_BOX_SPRITE.characterIndex);\r\n\t\t\tevent.appear();\t\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.finalizeItemBox = function(event){\r\n\t\t\tif(event.isDropBox){\r\n\t\t\t\tthis.clearEventToUnit(event.eventId());\r\n\t\t\t\tevent.visible = true;\r\n\t\t\t\tevent.appear();\t\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getEventDeploySlot = function(event) {\r\n\t\t\tvar _this = this;\r\n\t\t\tif(!$gameTemp.eventToDeploySlot){\r\n\t\t\t\t$gameTemp.eventToDeploySlot = {};\r\n\t\t\t\tvar i = 0;\r\n\t\t\t\tvar deployInfo = _this.getDeployInfo();\r\n\t\t\t\twhile(deployInfo.doNotDeploySlots[i]){\r\n\t\t\t\t\ti++;\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\t\tif(event.isType() === 'actor' && !event.isScriptedDeploy) {\r\n\t\t\t\t\t\t$gameTemp.eventToDeploySlot[event.eventId()] = i++;\r\n\t\t\t\t\t\twhile(deployInfo.doNotDeploySlots[i]){\r\n\t\t\t\t\t\t\ti++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn $gameTemp.eventToDeploySlot[event.eventId()];\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.highlightDeployTiles = function() {\r\n\t\t\tvar _this = this;\r\n\t\t\tif(!$gameSystem.highlightedTiles){\r\n\t\t\t\t$gameSystem.highlightedTiles = [];\r\n\t\t\t}\r\n\t\t\tthis.removeDeployTileHighlights();\r\n\t\t\t$gameTemp.currentDeployTileHighlights = [];\r\n\t\t\tvar deployInfo = _this.getDeployInfo();\r\n\t\t\tvar i = 0;\r\n\t\t\twhile(deployInfo.doNotDeploySlots[i]){\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t\tvar deployList = $gameSystem.getDeployList();\t\r\n\t\t\t\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif(event.isType() === 'actor' && !event.isScriptedDeploy) {\r\n\t\t\t\t\tif(i == $gameTemp.currentSwapSource){\r\n\t\t\t\t\t\t$gameSystem.highlightedTiles.push({x: event.posX(), y: event.posY(), color: \"#00FF00\"});\r\n\t\t\t\t\t} else if(deployInfo.lockedSlots[i]){\r\n\t\t\t\t\t\t$gameSystem.highlightedTiles.push({x: event.posX(), y: event.posY(), color: \"yellow\"});\r\n\t\t\t\t\t} else if(deployList[i] && deployList[i].main !=null && !$statCalc.canStandOnTile($gameActors.actor(deployList[i].main), {x: event.posX(), y: event.posY()})){\r\n\t\t\t\t\t\t$gameSystem.highlightedTiles.push({x: event.posX(), y: event.posY(), color: \"red\"});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t$gameSystem.highlightedTiles.push({x: event.posX(), y: event.posY(), color: \"white\"});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$gameTemp.currentDeployTileHighlights.push({x: event.posX(), y: event.posY()});\r\n\t\t\t\t\ti++;\r\n\t\t\t\t\twhile(deployInfo.doNotDeploySlots[i]){\r\n\t\t\t\t\t\ti++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t$gameSystem.highlightsRefreshed = true;\r\n\t\t}\t\r\n\t\t\r\n\t\tGame_System.prototype.removeDeployTileHighlights = function() {\r\n\t\t\tvar _this = this;\r\n\t\t\tif($gameTemp.currentDeployTileHighlights && $gameSystem.highlightedTiles){\r\n\t\t\t\tvar tileLookup = {};\r\n\t\t\t\t$gameTemp.currentDeployTileHighlights.forEach(function(coords){\r\n\t\t\t\t\tif(!tileLookup[coords.x]){\r\n\t\t\t\t\t\ttileLookup[coords.x] = {};\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttileLookup[coords.x][coords.y] = true;\r\n\t\t\t\t});\r\n\t\t\t\t\t\t\t\r\n\t\t\t\tvar tmp = [];\r\n\t\t\t\tfor(var i = 0; i < $gameSystem.highlightedTiles.length; i++){\r\n\t\t\t\t\tif(!tileLookup[$gameSystem.highlightedTiles[i].x] || !tileLookup[$gameSystem.highlightedTiles[i].x][$gameSystem.highlightedTiles[i].y]){\r\n\t\t\t\t\t\ttmp.push($gameSystem.highlightedTiles);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t$gameSystem.highlightedTiles = tmp;\r\n\t\t\t\t$gameSystem.highlightsRefreshed = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.undeployActors = function(preserveScripted){\r\n\t\t\t$gameVariables.setValue(_existActorVarID, 0);\r\n\t\t\t$gameSystem.clearSrpgAllActors();\r\n\t\t\t$gameMap.events().forEach(function(event) {\t\t\t\r\n\t\t\t\tif (event.isType() === 'actor' && (!event.isScriptedDeploy || !preserveScripted)) {\r\n\t\t\t\t\tvar battlerArray = $gameSystem.EventToUnit(event.eventId());\r\n\t\t\t\t\tif (battlerArray && (battlerArray[0] === 'actor')) {\r\n\t\t\t\t\t\tconst actor_unit = battlerArray[1];\r\n\t\t\t\t\t\tif(actor_unit){\r\n\t\t\t\t\t\t\tactor_unit.isSubPilot = false;\t\t\t\r\n\t\t\t\t\t\t\tactor_unit.isSubTwin = false;\t\r\n\t\t\t\t\t\t\tactor_unit.subTwin = null;\r\n\t\t\t\t\t\t\tactor_unit.subTwinId = null;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$gameSystem.clearEventToUnit(event.eventId());\r\n\t\t\t\t\tevent.isDeployed = false;\r\n\t\t\t\t\tevent.erase();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.redeployActors = function(validatePositions, forceRefresh){                                                                                                                                                                                                                             \r\n\t\t\t$gameVariables.setValue(_existActorVarID, 0);\r\n\t\t\t$gameSystem.clearSrpgAllActors();\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif (event.isType() === 'actor' && !event.isScriptedDeploy) {\r\n\t\t\t\t\t$gameSystem.clearEventToUnit(event.eventId());\r\n\t\t\t\t\tevent.isDeployed = false;\r\n\t\t\t\t}\r\n\t\t\t });\r\n\t\t\t if(!forceRefresh){\r\n\t\t\t\t$statCalc.externalLockUnitUpdates(); \r\n\t\t\t }\t\t\t \r\n\t\t\t this.deployActors(false, $gameTemp.manualDeployType, validatePositions);\r\n\t\t\t $statCalc.externalUnlockUnitUpdates();\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.redeployActor = function(actorId, toAnimQueue){  \r\n\t\t\tvar actor = $gameActors.actor(actorId);\t\t\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif (event.eventId() === actor.event.eventId()) {\r\n\t\t\t\t\t$gameSystem.clearEventToUnit(event.eventId());\r\n\t\t\t\t\tevent.isDeployed = false;\r\n\t\t\t\t\tvar oldValue = $gameVariables.value(_existActorVarID);\r\n\t\t\t\t\t$gameVariables.setValue(_existActorVarID, oldValue - 1);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tthis.deployActor(actor, actor.event, toAnimQueue);\r\n\t\t\tactor.initImages(actor.SRWStats.mech.classData.meta.srpgOverworld.split(\",\"));\r\n\t\t\tif(!toAnimQueue){\r\n\t\t\t\tactor.event.refreshImage();\r\n\t\t\t}\t\t \r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.deployActors = function(toAnimQueue, lockedOnly, validatePositions) {\r\n\t\t\tvar _this = this;\r\n\t\t\tif(lockedOnly == null){\r\n\t\t\t\tlockedOnly = \"all\";\r\n\t\t\t}\r\n\t\t\tconsole.log(\"===deployActors===\");\r\n\t\t\tvar deployInfo = _this.getDeployInfo();\r\n\t\t\tvar deployList = _this.getActiveDeployList();\r\n\t\t\tvar i = 0;\r\n\t\t\twhile(deployInfo.doNotDeploySlots[i]){\r\n\t\t\t\ti++;\r\n\t\t\t}\t\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif (event.isType() === 'actor' && !event.isDeployed) {\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tif(i < deployList.length){\t\r\n\t\t\t\t\t\tconsole.log(\"found target event, deploying \"+i+\"...\");\t\r\n\t\t\t\t\t\tvar actor_unit;\r\n\t\t\t\t\t\tvar entry = deployList[i] || {};\r\n\t\t\t\t\t\tvar actorId = entry.main;\t\t\r\n\t\t\t\t\t\tif(lockedOnly == \"all\" || (lockedOnly == \"locked\" && deployInfo.lockedSlots[i]) || (lockedOnly == \"unlocked\" && !deployInfo.lockedSlots[i])){\r\n\t\t\t\t\t\t\tif(typeof actorId != \"undefined\"){\r\n\t\t\t\t\t\t\t\tactor_unit = $gameActors.actor(actorId);\r\n\t\t\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t\t\t\tif (actor_unit) {\r\n\t\t\t\t\t\t\t\tvar validPosition;\r\n\t\t\t\t\t\t\t\tif(validatePositions && !deployInfo.lockedSlots[i]){\r\n\t\t\t\t\t\t\t\t\tvalidPosition = $statCalc.canStandOnTile(actor_unit, {x: event.posX(), y: event.posY()})\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tvalidPosition = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif(validPosition){\r\n\t\t\t\t\t\t\t\t\tconsole.log(\"Deployed: actor \"+actorId+\" to event \"+event.eventId()+\" (queued: \"+(!!toAnimQueue)+\")\");\r\n\t\t\t\t\t\t\t\t\t_this.deployActor(actor_unit, event, toAnimQueue, entry.sub);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tconsole.log(\"!!!Invalid position - the actor can't stand on the target tile!\");\r\n\t\t\t\t\t\t\t\t\tevent.erase();\r\n\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tconsole.log(\"!!!Invalid actor - no defined actor found for id: \"+actorId);\r\n\t\t\t\t\t\t\t\tevent.erase();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\ti++;\t\r\n\t\t\t\t\twhile(deployInfo.doNotDeploySlots[i]){\r\n\t\t\t\t\t\ti++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\r\n\t\t\t});\r\n\t\t\tconsole.log(\"===deployActors finished===\");\r\n\t\t}\r\n\t\t\r\n\t\t// イベントのメモからエネミーを読み込み、対応するイベントＩＤに紐づけする\r\n\t\tGame_System.prototype.setSrpgEnemys = function() {\r\n\t\t\t$gameVariables.setValue(_existEnemyVarID, 0);\r\n\t\t\t$gameVariables.setValue(_enemiesDestroyed, 0);\r\n\t\t\tvar i = 0;\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif (event.isType() === 'enemy') {\r\n\t\t\t\t\tvar enemyId = event.event().meta.id ? Number(event.event().meta.id) : 1;\r\n\t\t\t\t\tvar enemy_unit = new Game_Enemy(enemyId, 0, 0);\t\t\t\t\r\n\t\t\t\t\tenemy_unit._mechClass = parseInt(event.event().meta.mechClass)\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (enemy_unit) {\r\n\t\t\t\t\t\tenemy_unit.event = event;\r\n\t\t\t\t\t\tif (event.event().meta.mode) {\r\n\t\t\t\t\t\t\tenemy_unit.setBattleMode(event.event().meta.mode);\r\n\t\t\t\t\t\t\tif (event.event().meta.targetId) {\r\n\t\t\t\t\t\t\t\tenemy_unit.setTargetId(event.event().meta.targetId);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tenemy_unit.initTp(); //TPを初期化\r\n\t\t\t\t\t\tvar faceName = enemy_unit.enemy().meta.faceName; //顔グラフィックをプリロードする\r\n\t\t\t\t\t\tif (faceName) {\r\n\t\t\t\t\t\t\tvar bitmap = ImageManager.loadFace(faceName);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tif ($gameSystem.isSideView()) {\r\n\t\t\t\t\t\t\t\tvar bitmap = ImageManager.loadSvEnemy(enemy_unit.battlerName(), enemy_unit.battlerHue());\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tvar bitmap = ImageManager.loadEnemy(enemy_unit.battlerName(), enemy_unit.battlerHue());\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar oldValue = $gameVariables.value(_existEnemyVarID);\r\n\t\t\t\t\t\t$gameVariables.setValue(_existEnemyVarID, oldValue + 1);\r\n\t\t\t\t\t\t$gameSystem.setEventToUnit(event.eventId(), 'enemy', enemy_unit);\r\n\t\t\t\t\t\t$statCalc.initSRWStats(enemy_unit);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t//２イベント間の距離を返す\r\n\t\tGame_System.prototype.unitDistance = function(event1, event2) {\r\n\t\t\tvar minDisX = Math.abs(event1.posX() - event2.posX());\r\n\t\t\tvar minDisY = Math.abs(event1.posY() - event2.posY());\r\n\t\t\tif ($gameMap.isLoopHorizontal() == true) {\r\n\t\t\t\tvar event1X = event1.posX() > event2.posX() ? event1.posX() - $gameMap.width() : event1.posX() + $gameMap.width();\r\n\t\t\t\tvar disX = Math.abs(event1X - event2.posX());\r\n\t\t\t\tminDisX = minDisX < disX ? minDisX : disX;\r\n\t\t\t}\r\n\t\t\tif ($gameMap.isLoopVertical() == true) {\r\n\t\t\t\tvar event1Y = event1.posY() > event2.posY() ? event1.posY() - $gameMap.height() : event1.posY() + $gameMap.height();\r\n\t\t\t\tvar disY = Math.abs(event1Y - event2.posY());\r\n\t\t\t\tminDisY = minDisY < disY ? minDisY : disY;\r\n\t\t\t}\r\n\t\t\treturn minDisX + minDisY;\r\n\t\t};\r\n\r\n\t//戦闘終了に関係する処理\r\n\t\t//戦闘終了するためのプラグイン・コマンド\r\n\t\tGame_System.prototype.endSRPG = function() {\r\n\t\t\t$gameTemp.clearActiveEvent();\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tvar battlerArray = $gameSystem.EventToUnit(event.eventId());\r\n\t\t\t\tif (battlerArray && (battlerArray[0] === 'actor' || battlerArray[0] === 'enemy')) {\r\n\t\t\t\t\tif (_srpgBattleEndAllHeal == 'true') {\r\n\t\t\t\t\t\tbattlerArray[1].recoverAll();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbattlerArray[1].onTurnEnd();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tthis._SRPGMode = false;\r\n\t\t\t$gameSwitches.setValue(_srpgBattleSwitchID, false);\r\n\t\t\tthis._isBattlePhase = 'initialize';\r\n\t\t\tthis._isSubBattlePhase = 'initialize';\r\n\t\t\t$gamePlayer.refresh();\r\n\t\t\tthis.clearData(); //データの初期化\r\n\t\t\t$gameMap.setEventImages();   // ユニットデータに合わせてイベントのグラフィックを変更する\r\n\t\t\t\r\n\t\t\t$gameTemp.updatePlayerSpriteVisibility();\r\n\t\t\tSceneManager._scene.createPauseWindow(); //ensure pause menu is updated to reflect the new mode\r\n\t\t};\r\n\r\n\t//戦闘の進行に関係する処理\r\n\t\t// 戦闘開始時のイベントを起動する\r\n\t\tGame_System.prototype.runBattleStartEvent = function() {\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif (event.isType() === 'battleStart') {\r\n\t\t\t\t\tif (event.pageIndex() >= 0) event.start();\r\n\t\t\t\t\t$gameTemp.pushSrpgEventList(event);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\t\t\r\n\t\tGame_System.prototype.runAfterDeployEvent = function() {\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif (event.isType() === 'afterDeploy') {\r\n\t\t\t\t\tif (event.pageIndex() >= 0) event.start();\r\n\t\t\t\t\t$gameTemp.pushSrpgEventList(event);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t//次のカーソル移動先のアクターを取得する(R)\r\n\t\tGame_System.prototype.getNextRActor = function() {\r\n\t\t\tvar candidates =  $statCalc.getAllCandidates(\"actor\", true);\r\n\t\t\tthis.actorLRId++;\r\n\t\t\tif(this.actorLRId >= candidates.length){\r\n\t\t\t\tthis.actorLRId = 0;\r\n\t\t\t}\r\n\t\t\tvar candidate = candidates[this.actorLRId];\r\n\t\t\tif(candidate){\r\n\t\t\t\t$gamePlayer.locate(candidate.pos.x, candidate.pos.y);\r\n\t\t\t}  \r\n\t\t}\r\n\r\n\t\t//次のカーソル移動先のアクターを取得する(L)\r\n\t\tGame_System.prototype.getNextLActor = function() {       \r\n\t\t\tvar candidates =  $statCalc.getAllCandidates(\"actor\", true);\r\n\t\t\tthis.actorLRId--;\r\n\t\t\tif(this.actorLRId < 0){\r\n\t\t\t\tthis.actorLRId = candidates.length-1;\r\n\t\t\t}\r\n\t\t\tvar candidate = candidates[this.actorLRId];\r\n\t\t\tif(candidate){\r\n\t\t\t\t$gamePlayer.locate(candidate.pos.x, candidate.pos.y);\r\n\t\t\t}        \r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.isValidAttackTarget = function(candidate){\r\n\t\t\tvar actionBattlerArray = $gameSystem.EventToUnit($gameTemp.activeEvent().eventId());\r\n\t\t\tvar targetBattlerArray = $gameSystem.EventToUnit(candidate.event.eventId());\r\n\t\t   \r\n\t\t\tvar isInRange = $battleCalc.isTargetInRange({x: $gameTemp.activeEvent()._x, y: $gameTemp.activeEvent()._y}, {x: candidate.event.posX(), y: candidate.event.posY()}, $statCalc.getRealWeaponRange(actionBattlerArray[1], $gameTemp.actorAction.attack), $gameTemp.actorAction.attack.minRange);\r\n\t\t\tvar validTarget = $statCalc.canUseWeapon(actionBattlerArray[1], $gameTemp.actorAction.attack, false, targetBattlerArray[1]);\r\n\t\t\t\r\n\t\t\treturn isInRange && validTarget;\r\n\t\t}                               \r\n\t\t\r\n\t\tGame_System.prototype.getNextRTarget = function(all) {\r\n\t\t\tvar candidates =  $statCalc.getAllCandidates(\"enemy\");\r\n\t\t\tvar candidate;\r\n\t\t\tvar ctr = 0;\r\n\t\t\twhile(ctr < candidates.length && !candidate){\r\n\t\t\t\tthis.targetLRId++;\r\n\t\t\t\tif(this.targetLRId >= candidates.length){\r\n\t\t\t\t\tthis.targetLRId = 0;\r\n\t\t\t\t}\r\n\t\t\t\tif(all || this.isValidAttackTarget(candidates[this.targetLRId])){\r\n\t\t\t\t\tcandidate = candidates[this.targetLRId];\r\n\t\t\t\t}\t\t\t\r\n\t\t\t\tctr++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(candidate){\r\n\t\t\t\t$gamePlayer.locate(candidate.pos.x, candidate.pos.y);\r\n\t\t\t}  \r\n\t\t}\r\n\r\n\t\t//次のカーソル移動先のアクターを取得する(L)\r\n\t\tGame_System.prototype.getNextLTarget = function(all) {       \r\n\t\t\tvar candidates =  $statCalc.getAllCandidates(\"enemy\");\r\n\t\t\tvar candidate;\r\n\t\t\tvar ctr = 0;\r\n\t\t\twhile(ctr < candidates.length && !candidate){\r\n\t\t\t\tthis.targetLRId--;\r\n\t\t\t\tif(this.targetLRId < 0){\r\n\t\t\t\t\tthis.targetLRId = candidates.length-1;\r\n\t\t\t\t}\r\n\t\t\t\tif(all || this.isValidAttackTarget(candidates[this.targetLRId])){\r\n\t\t\t\t\tcandidate = candidates[this.targetLRId];\r\n\t\t\t\t}\t\t\t\r\n\t\t\t\tctr++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(candidate){\r\n\t\t\t\t$gamePlayer.locate(candidate.pos.x, candidate.pos.y);\r\n\t\t\t}  \t\t\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getNextRSpiritTarget = function() {\r\n\t\t\tvar spiritDef;\r\n\t\t\tif(this.targetSpiritLRId == null){\r\n\t\t\t\tthis.targetSpiritLRId = 0;\r\n\t\t\t}\r\n\t\t\tif($gameTemp.currentTargetingSpirit){\r\n\t\t\t\tspiritDef = $spiritManager.getSpiritDef($gameTemp.currentTargetingSpirit.idx);\r\n\t\t\t\tif(spiritDef.targetType == \"ally\"){\r\n\t\t\t\t\tvar candidates =  $statCalc.getAllCandidates(\"actor\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar candidates =  $statCalc.getAllCandidates(\"enemy\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar candidate;\r\n\t\t\tvar ctr = 0;\r\n\t\t\twhile(ctr < candidates.length && !candidate){\r\n\t\t\t\tthis.targetSpiritLRId++;\r\n\t\t\t\tif(this.targetSpiritLRId >= candidates.length){\r\n\t\t\t\t\tthis.targetSpiritLRId = 0;\r\n\t\t\t\t}\r\n\t\t\t\tvar target = candidates[this.targetSpiritLRId].actor;\r\n\t\t\t\tif (($gameSystem.isFriendly(target, \"player\") && spiritDef.targetType == \"ally\") || (!$gameSystem.isFriendly(target, \"player\")  && spiritDef.targetType == \"enemy\")) {\t\t\t\t\t\t\r\n\t\t\t\t\tif(spiritDef.singleTargetEnabledHandler(target)){\r\n\t\t\t\t\t\tcandidate = candidates[this.targetSpiritLRId];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\r\n\t\t\t\tctr++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(candidate){\r\n\t\t\t\t$gamePlayer.locate(candidate.pos.x, candidate.pos.y);\r\n\t\t\t}  \r\n\t\t}\r\n\r\n\t\t//次のカーソル移動先のアクターを取得する(L)\r\n\t\tGame_System.prototype.getNextLSpiritTarget = function() {       \r\n\t\t\tvar spiritDef;\r\n\t\t\tif(this.targetSpiritLRId == null){\r\n\t\t\t\tthis.targetSpiritLRId = 0;\r\n\t\t\t}\r\n\t\t\tif($gameTemp.currentTargetingSpirit){\r\n\t\t\t\tspiritDef = $spiritManager.getSpiritDef($gameTemp.currentTargetingSpirit.idx);\r\n\t\t\t\tif(spiritDef.targetType == \"ally\"){\r\n\t\t\t\t\tvar candidates =  $statCalc.getAllCandidates(\"actor\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar candidates =  $statCalc.getAllCandidates(\"enemy\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar candidate;\r\n\t\t\tvar ctr = 0;\r\n\t\t\twhile(ctr < candidates.length && !candidate){\r\n\t\t\t\tthis.targetSpiritLRId--;\r\n\t\t\t\tif(this.targetSpiritLRId < 0){\r\n\t\t\t\t\tthis.targetSpiritLRId = candidates.length-1;\r\n\t\t\t\t}\r\n\t\t\t\tvar target = candidates[this.targetSpiritLRId].actor;\r\n\t\t\t\tif (($gameSystem.isFriendly(target, \"player\") && spiritDef.targetType == \"ally\") || (!$gameSystem.isFriendly(target, \"player\")  && spiritDef.targetType == \"enemy\")) {\t\t\t\t\t\t\r\n\t\t\t\t\tif(spiritDef.singleTargetEnabledHandler(target)){\r\n\t\t\t\t\t\tcandidate = candidates[this.targetSpiritLRId];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\r\n\t\t\t\tctr++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(candidate){\r\n\t\t\t\t$gamePlayer.locate(candidate.pos.x, candidate.pos.y);\r\n\t\t\t} \t\t\r\n\t\t}\r\n\r\n\r\n\t\t//アクターターンの開始\r\n\t\tGame_System.prototype.srpgStartActorTurn = function() {\r\n\t\t\tvar _this = this;\r\n\t\t\t$statCalc.invalidateAbilityCache();\r\n\t\t\t\r\n\t\t\t$gameTemp.currentFaction = -1;\r\n\t\t\t$songManager.playStageSong();\r\n\t\t\tthis.aliveActorIdList = [];\r\n\t\t\tthis.actorLRId = 0;\r\n\t\t\tthis.targetLRId = 0;\r\n\t\t\tthis.targetSpiritLRId = 0;\r\n\t\t\tvar spiritActivations = [];\r\n\t\t\tvar AIActors = [];\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif (event.isType() === 'actorTurn') {\r\n\t\t\t\t\tif (event.pageIndex() >= 0) event.start();\r\n\t\t\t\t\t$gameTemp.pushSrpgEventList(event);\r\n\t\t\t\t}\r\n\t\t\t\tvar battlerArray = $gameSystem.EventToUnit(event.eventId());\r\n\t\t\t\tif (battlerArray && battlerArray[0] === 'actor' && battlerArray[1].isAlive() && !event.isErased()) {\r\n\t\t\t\t\t$gameSystem.aliveActorIdList.push(event.eventId());\r\n\t\t\t\t\tbattlerArray[1].SRPGActionTimesSet($statCalc.applyStatModsToValue(battlerArray[1], 1, [\"extra_action\"]));\r\n\t\t\t\t\tvar SPRegen = 0;\r\n\t\t\t\t\tSPRegen = $statCalc.applyStatModsToValue(battlerArray[1], SPRegen, [\"SP_regen\"]);\r\n\t\t\t\t\tif(ENGINE_SETTINGS.VXT_SP){\r\n\t\t\t\t\t\tSPRegen+=5;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(ENGINE_SETTINGS.DEFAULT_SP_REGEN){\r\n\t\t\t\t\t\tSPRegen+=ENGINE_SETTINGS.DEFAULT_SP_REGEN;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif($gameVariables.value(_turnVarID) != 1){\r\n\t\t\t\t\t\t$statCalc.recoverSP(battlerArray[1], SPRegen);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar autoSpirits = $statCalc.getModDefinitions(battlerArray[1], [\"auto_spirit\"]);\r\n\t\t\t\t\t\r\n\t\t\t\t\tautoSpirits.forEach(function(autoSpirit){\t\t\r\n\t\t\t\t\t\t$statCalc.setAbilityUsed(battlerArray[1], \"auto_spirit_\"+autoSpirit.stackId);\r\n\t\t\t\t\t\tspiritActivations.push({actor: battlerArray[1], spirit: autoSpirit.value});\t\t\t\t\r\n\t\t\t\t\t});\t\t\t\t\r\n\t\t\t\t\tconst actor = battlerArray[1];\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(actor && !actor.isSubPilot){\r\n\t\t\t\t\t\tvar subPilots = $statCalc.getSubPilots(actor);\r\n\t\t\t\t\t\tvar mainPilot = actor;\r\n\t\t\t\t\t\tvar ctr = 0;\r\n\t\t\t\t\t\tsubPilots.forEach(function(pilotId){\r\n\t\t\t\t\t\t\tvar subPilot = $gameActors.actor(pilotId);\r\n\t\t\t\t\t\t\tif(subPilot){\r\n\t\t\t\t\t\t\t\tvar SPRegen = 0;\r\n\t\t\t\t\t\t\t\tSPRegen = $statCalc.applyStatModsToValue(subPilot, SPRegen, [\"SP_regen\"]);\r\n\t\t\t\t\t\t\t\tif(ENGINE_SETTINGS.VXT_SP){\r\n\t\t\t\t\t\t\t\t\tSPRegen+=5;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif(ENGINE_SETTINGS.DEFAULT_SP_REGEN){\r\n\t\t\t\t\t\t\t\t\tSPRegen+=ENGINE_SETTINGS.DEFAULT_SP_REGEN;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif($gameVariables.value(_turnVarID) != 1){\r\n\t\t\t\t\t\t\t\t\t$statCalc.recoverSP(subPilot, SPRegen);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif($statCalc.isAI(battlerArray[1])){\r\n\t\t\t\t\t\tAIActors.push(event);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (battlerArray && battlerArray[0] === 'enemy' && battlerArray[1].isAlive()) {\r\n\t\t\t\t\tbattlerArray[1].SRPGActionTimesSet(1);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t});\r\n\t\t\t$statCalc.clearSpiritOnAll(\"actor\", \"strike\");\r\n\t\t\t$statCalc.clearSpiritOnAll(\"actor\", \"wall\");\r\n\t\t\t$statCalc.clearSpiritOnAll(\"actor\", \"focus\");\r\n\t\t\t$statCalc.clearSpiritOnAll(\"enemy\", \"disrupt\");\r\n\t\t\t$statCalc.clearSpiritOnAll(\"enemy\", \"analyse\");\r\n\t\t\t$statCalc.clearSpiritOnAll(\"actor\", \"taunt\");\r\n\t\t\t$statCalc.clearTempEffectsOnAll();\r\n\t\t\t$gameSystem.expireAbilityZones();\r\n\t\t\t$statCalc.resetAllBattleTemp();\r\n\t\t\t$statCalc.resetAllStatus(\"enemy\");\r\n\t\t\tif($gameVariables.value(_turnVarID) != 1){\r\n\t\t\t\t$statCalc.applyTurnStartWill(\"actor\");\r\n\t\t\t}\r\n\t\t\t$statCalc.applyMPRegen(\"actor\");\r\n\t\t\t$statCalc.applyENRegen(\"actor\");\r\n\t\t\t$statCalc.applyAmmoRegen(\"actor\");\r\n\t\t\t$statCalc.applyHPRegen(\"actor\");\r\n\t\t\tthis.aliveActorIdList.sort(function(a, b) {\r\n\t\t\t\treturn a - b;\r\n\t\t\t});\r\n\t\t\tvar actor1 = $gameMap.event(this.aliveActorIdList[0]);\r\n\t\t\tif (actor1) {\r\n\t\t\t\t$gamePlayer.locate(actor1.posX(), actor1.posY());\r\n\t\t\t}\r\n\t\t\t$gameTemp.autoSpirits = spiritActivations;\r\n\t\t\t$gameTemp.autoSpiritsDelay = 150;\r\n\t\t\t\r\n\t\t\t_this.setBattlePhase('actor_phase');\r\n\t\t\t\r\n\t\t\t$gameTemp.AIActors = AIActors;\r\n\t\t\t\r\n\t\t\t$statCalc.invalidateAbilityCache();\r\n\t\t\t\r\n\t\t\tif(spiritActivations.length){\t\t\t\t\t\r\n\t\t\t\t_this.setSubBattlePhase('auto_spirits');\r\n\t\t\t} else if($gameTemp.AIActors.length){\r\n\t\t\t\t_this.setBattlePhase('AI_phase');\r\n\t\t\t\t_this.setSubBattlePhase('enemy_command');\r\n\t\t\t} else {\t\t\t\r\n\t\t\t\t_this.setSubBattlePhase('initialize');\r\n\t\t\t}\t\r\n\t\t};\r\n\r\n\t\t//自動行動アクターターンの開始\r\n\t\tGame_System.prototype.srpgStartAutoActorTurn = function() {\r\n\t\t\tthis.setBattlePhase('auto_actor_phase');\r\n\t\t\tthis.setSubBattlePhase('auto_actor_command');\r\n\t\t};\r\n\r\n\t\t//エネミーターンの開始\r\n\t\tGame_System.prototype.srpgStartEnemyTurn = function(factionId) {\r\n\t\t\tvar _this = this;\r\n\t\t\t$gameTemp.buttonHintManager.hide();\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t$gameTemp.showAllyAttackIndicator = false;\r\n\t\t\t$gameTemp.showAllyDefendIndicator = false;\r\n\t\t\t$gameTemp.showEnemyAttackIndicator = false;\r\n\t\t\t$gameTemp.showEnemyDefendIndicator = false;\r\n\t\t\t$gameTemp.currentFaction = factionId;\r\n\t\t\tif(factionId > 2){\r\n\t\t\t\t$gameSystem.expireAbilityZones();\r\n\t\t\t\t$gameSystem.srpgTurnEnd();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(!$gameSystem.factionConfig[factionId].active){\r\n\t\t\t\t$gameTemp.currentFaction++;\r\n\t\t\t\tthis.srpgStartEnemyTurn($gameTemp.currentFaction);\r\n\t\t\t\treturn;\r\n\t\t\t}\t\t\r\n\t\t\t$songManager.playStageSong();\r\n\t\t\tvar spiritActivations = [];\r\n\t\t\t$gameTemp.AIActors = [];\r\n\t\t\t\t\t\r\n\t\t\t$gameMap.events().forEach(function(event) {\t\t\t\t\r\n\t\t\t\tif (event.isType() === 'enemyTurn') {\r\n\t\t\t\t\tif (event.pageIndex() >= 0) event.start();\r\n\t\t\t\t\t$gameTemp.pushSrpgEventList(event);\r\n\t\t\t\t}\r\n\t\t\t\tvar battlerArray = $gameSystem.EventToUnit(event.eventId());\r\n\t\t\t\tif (battlerArray && battlerArray[0] === 'enemy' && !event.isErased()) {\r\n\t\t\t\t\tbattlerArray[1].SRPGActionTimesSet($statCalc.applyStatModsToValue(battlerArray[1], 1, [\"extra_action\"]));\r\n\t\t\t\t\tvar SPRegen = 0;\r\n\t\t\t\t\tSPRegen = $statCalc.applyStatModsToValue(battlerArray[1], SPRegen, [\"SP_regen\"]);\r\n\t\t\t\t\t$statCalc.recoverSP(battlerArray[1], SPRegen);\r\n\t\t\t\t\t\r\n\t\t\t\t\t$gameTemp.AIActors.push(event);\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar autoSpirits = $statCalc.getModDefinitions(battlerArray[1], [\"auto_spirit\"]);\r\n\t\t\t\t\t\r\n\t\t\t\t\tautoSpirits.forEach(function(autoSpirit){\t\r\n\t\t\t\t\t\t$statCalc.setAbilityUsed(battlerArray[1], \"auto_spirit_\"+autoSpirit.stackId);\r\n\t\t\t\t\t\tspiritActivations.push({actor: battlerArray[1], spirit: autoSpirit.value});\t\t\t\t\r\n\t\t\t\t\t});\t\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t$statCalc.clearSpiritOnAll(\"enemy\", \"strike\", factionId);\r\n\t\t\t$statCalc.clearSpiritOnAll(\"enemy\", \"wall\", factionId);\r\n\t\t\t$statCalc.clearSpiritOnAll(\"enemy\", \"focus\", factionId);\r\n\t\t\t$statCalc.clearSpiritOnAll(\"actor\", \"disrupt\");\r\n\t\t\t$statCalc.clearSpiritOnAll(\"actor\", \"analyse\");\r\n\t\t\t$statCalc.clearTempEffectsOnAll();\r\n\t\t\t\r\n\t\t\t$statCalc.applyTurnStartWill(\"enemy\", factionId);\r\n\t\t\t$statCalc.applyENRegen(\"enemy\", factionId);\r\n\t\t\t$statCalc.applyMPRegen(\"enemy\", factionId);\r\n\t\t\t$statCalc.applyAmmoRegen(\"enemy\", factionId);\r\n\t\t\t$statCalc.applyHPRegen(\"enemy\", factionId);\r\n\t\t\t$statCalc.resetAllBattleTemp(null, factionId);\r\n\t\t\t$statCalc.resetAllStatus(\"actor\");\r\n\t\t\t$gameTemp.AIWaitTimer = 0;\r\n\t\t\t\r\n\t\t\t$gameTemp.autoSpirits = spiritActivations;\r\n\t\t\t$gameTemp.autoSpiritsDelay = 150;\r\n\t\t\t\r\n\t\t\t$statCalc.invalidateAbilityCache();\r\n\t\t\t\r\n\t\t\tif(spiritActivations.length){\t\t\t\t\t\r\n\t\t\t\t_this.setSubBattlePhase('auto_spirits');\r\n\t\t\t} else if($gameTemp.AIActors.length){\r\n\t\t\t\t_this.setBattlePhase('AI_phase');\r\n\t\t\t\t_this.setSubBattlePhase('enemy_command');\r\n\t\t\t} else {\r\n\t\t\t\tthis.setSubBattlePhase('enemy_command');\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//\r\n\t\t};\r\n\r\n\t\t//ターン終了\r\n\t\tGame_System.prototype.srpgTurnEnd = function() {\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tvar battlerArray = $gameSystem.EventToUnit(event.eventId());\r\n\t\t\t\tif (battlerArray && (battlerArray[0] === 'actor' || battlerArray[0] === 'enemy')) {\r\n\t\t\t\t\tbattlerArray[1].onTurnEnd();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif (event.isType() === 'turnEnd') {\r\n\t\t\t\t\tif (event.pageIndex() >= 0) event.start();\r\n\t\t\t\t\t$gameTemp.pushSrpgEventList(event);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tthis.srpgTurnPlus();\r\n\t\t\tthis.srpgStartActorTurn();//アクターターンを開始する\r\n\t\t};\r\n\r\n\t\t//ターン数を増やす\r\n\t\tGame_System.prototype.srpgTurnPlus = function() {\r\n\t\t\tvar oldValue = $gameVariables.value(_turnVarID);\r\n\t\t\t$gameVariables.setValue(_turnVarID, oldValue + 1);\r\n\t\t\t\r\n\t\t\tvar oldValue = $gameVariables.value(_turnCountVariable);\r\n\t\t\t$gameVariables.setValue(_turnCountVariable, oldValue + 1);\r\n\t\t};\r\n\r\n\t\tGame_System.prototype.incrementSaveTurn = function() {\r\n\t\t\tvar oldValue = $gameVariables.value(_turnCountVariable);\r\n\t\t\t$gameVariables.setValue(_turnCountVariable, oldValue + 1);\r\n\t\t};\r\n\r\n\t//戦闘の計算に関係する処理\r\n\t\t// 移動範囲および攻撃範囲を計算・表示する\r\n\t\tGame_System.prototype.srpgMakeMoveTable = function(event, determineEdge, noHighlights) {\r\n\t\t\tvar battlerArray = $gameSystem.EventToUnit(event.eventId());\r\n\t\t\t\r\n\t\t\tvar moveRange = $statCalc.getCurrentMoveRange(battlerArray[1]);\r\n\t\t\t$gameTemp.clearMoveTable();\r\n\t\t\tevent.makeMoveTable(event.posX(), event.posY(), moveRange, [0], battlerArray[1]);\r\n\t\t\tvar list = $gameTemp.moveList();\r\n\t\t\tvar tileLookup = {};\r\n\t\t\tthis.highlightedTiles = [];\r\n\t\t\tthis.highlightsRefreshed = true;\r\n\t\t\tif(!noHighlights){\t\t\t\r\n\t\t\t\t$gameTemp.disableHighlightGlow = true;\r\n\t\t\t\tfor(var i = 0; i < list.length; i++){\t\t\r\n\t\t\t\t\t$gameSystem.highlightedTiles.push({x: list[i][0], y: list[i][1], color: \"#2c57ff\"});\r\n\t\t\t\t\tif(!tileLookup[list[i][0]]){\r\n\t\t\t\t\t\ttileLookup[list[i][0]] = {};\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttileLookup[list[i][0]][list[i][1]] = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._lastMoveRangeHighlights = $gameSystem.highlightedTiles;\r\n\t\t\t$gameTemp.pushRangeListToMoveList();\r\n\t\t\t\r\n\t\t\t$gameSystem.moveEdgeHighlights = [];\r\n\t\t\t$gameSystem.showMoveEdge = [];\r\n\t\t\tif(ENGINE_SETTINGS.ENABLE_QUICK_MOVE && determineEdge){\r\n\t\t\t\tvar centerCoords = {x: event.posX(), y: event.posY()};\r\n\t\t\t\tvar topCoords = JSON.parse(JSON.stringify(centerCoords));\t\t\t\t\r\n\t\t\t\ttopCoords.y-=moveRange;\t\r\n\t\t\t\t\r\n\t\t\t\tvar bottomCoords = JSON.parse(JSON.stringify(centerCoords));\t\t\t\t\r\n\t\t\t\tbottomCoords.y+=moveRange;\t\r\n\t\t\t\t\r\n\t\t\t\tvar leftCoords = JSON.parse(JSON.stringify(centerCoords));\t\t\t\t\r\n\t\t\t\tleftCoords.x-=moveRange;\t\r\n\t\t\t\t\r\n\t\t\t\tvar rightCoords = JSON.parse(JSON.stringify(centerCoords));\t\t\t\t\r\n\t\t\t\trightCoords.x+=moveRange;\t\r\n\t\t\t\t\r\n\t\t\t\t$gameSystem.moveEdgeHighlightsRefreshed = true;\r\n\t\t\t\t\r\n\t\t\t\tvar centerTop = JSON.parse(JSON.stringify(centerCoords));\r\n\t\t\t\tvar centerBottom = JSON.parse(JSON.stringify(centerCoords));\r\n\t\t\t\tvar centerLeft = JSON.parse(JSON.stringify(centerCoords));\r\n\t\t\t\tvar centerRight = JSON.parse(JSON.stringify(centerCoords));\r\n\t\t\t\t\r\n\t\t\t\tvar edgeTiles = [];\r\n\t\t\t\tvar registeredEdgeTiles = {};\r\n\t\t\t\t\r\n\t\t\t\t//the coords of the outer center tiles must be determined before this function is used\r\n\t\t\t\tfunction isValidEdgeTile(i, j){\r\n\t\t\t\t\tvar isValid = true;\r\n\t\t\t\t\t//filter out edge tiles that are on the central axis, except the outer most tiles\r\n\t\t\t\t\tif(i == centerCoords.x){\r\n\t\t\t\t\t\tif(j != centerTop.y && j != centerBottom.y){\r\n\t\t\t\t\t\t\tisValid = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(j == centerCoords.y){\r\n\t\t\t\t\t\tif(i != centerLeft.x && i != centerRight.x){\r\n\t\t\t\t\t\t\tisValid = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\t\r\n\t\t\t\t\treturn isValid;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tfunction registerEdgeTiles(i, j){\t\t\t\t\t\r\n\t\t\t\t\tif(!registeredEdgeTiles[i]){\r\n\t\t\t\t\t\tregisteredEdgeTiles[i] = {};\r\n\t\t\t\t\t\tedgeTiles.push({x: i, y: j});\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!registeredEdgeTiles[i][j]){\r\n\t\t\t\t\t\tregisteredEdgeTiles[i][j] = true;\r\n\t\t\t\t\t\tedgeTiles.push({x: i, y: j});\r\n\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar tileGraphLookup = {};\r\n\t\t\t\tfunction addGraphConnection(i, j, direction, target){\r\n\t\t\t\t\tif(i != target.x || j != target.y){\r\n\t\t\t\t\t\tif(!tileGraphLookup[i]){\r\n\t\t\t\t\t\t\ttileGraphLookup[i] = {};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(!tileGraphLookup[i][j]){\r\n\t\t\t\t\t\t\ttileGraphLookup[i][j] = {\r\n\t\t\t\t\t\t\t\tx: i,\r\n\t\t\t\t\t\t\t\ty: j,\r\n\t\t\t\t\t\t\t\tconnections: {\r\n\t\t\t\t\t\t\t\t\tup: null,\r\n\t\t\t\t\t\t\t\t\tdown: null,\r\n\t\t\t\t\t\t\t\t\tleft: null,\r\n\t\t\t\t\t\t\t\t\tright: null\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(!tileGraphLookup[i][j].connections[direction]){\r\n\t\t\t\t\t\t\ttileGraphLookup[i][j].connections[direction] = target;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tfor(var i = leftCoords.x; i <= rightCoords.x; i++){\r\n\t\t\t\t\tfor(var j = topCoords.y; j <= bottomCoords.y; j++){\r\n\t\t\t\t\t\tif(tileLookup[i] && tileLookup[i][j]){\r\n\t\t\t\t\t\t\tif(isEdgeTile({x: i, y: j})){\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif(i == centerCoords.x){\r\n\t\t\t\t\t\t\t\t\tif(j < centerCoords.y && j < centerTop.y){\r\n\t\t\t\t\t\t\t\t\t\tcenterTop.y = j;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tif(j > centerCoords.y && j > centerBottom.y){\r\n\t\t\t\t\t\t\t\t\t\tcenterBottom.y = j;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif(j == centerCoords.y){\r\n\t\t\t\t\t\t\t\t\tif(i > centerCoords.x && i > centerRight.x){\r\n\t\t\t\t\t\t\t\t\t\tcenterRight.x = i;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tif(i < centerCoords.x && i < centerLeft.x){\r\n\t\t\t\t\t\t\t\t\t\tcenterLeft.x = i;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tvar visited = {};\r\n\t\t\t\t\r\n\t\t\t\tvar offsetCheckOrder = [\r\n\t\t\t\t\t{x: 0, y: -1},\r\n\t\t\t\t\t{x: 1, y: -1},\r\n\t\t\t\t\t{x: 1, y: 0},\r\n\t\t\t\t\t{x: 1, y: 1},\r\n\t\t\t\t\t{x: 0, y: 1},\r\n\t\t\t\t\t{x: -1, y: 1},\r\n\t\t\t\t\t{x: -1, y: 0},\r\n\t\t\t\t\t{x: -1, y: -1},\r\n\t\t\t\t];\r\n\t\t\t\t\r\n\t\t\t\tvar offsetCheckOrderBottom = [\r\n\t\t\t\t\t{x: 0, y: 1},\r\n\t\t\t\t\t{x: -1, y: 1},\r\n\t\t\t\t\t{x: -1, y: 0},\r\n\t\t\t\t\t{x: -1, y: -1},\r\n\t\t\t\t\t{x: 0, y: -1},\r\n\t\t\t\t\t{x: 1, y: -1},\r\n\t\t\t\t\t{x: 1, y: 0},\r\n\t\t\t\t\t{x: 1, y: 1},\r\n\t\t\t\t];\r\n\t\t\t\t\r\n\t\t\t\tfunction isEdgeTile(node){\r\n\t\t\t\t\tvar x = node.x;\r\n\t\t\t\t\tvar y = node.y;\r\n\t\t\t\t\tvar isEdgeTile = false;\r\n\t\t\t\t\tif(!tileLookup[x-1]){\r\n\t\t\t\t\t\tisEdgeTile = true;\r\n\t\t\t\t\t} else if(!tileLookup[x-1][y]){\r\n\t\t\t\t\t\tisEdgeTile = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!tileLookup[x+1]){\r\n\t\t\t\t\t\tisEdgeTile = true;\r\n\t\t\t\t\t} else if(!tileLookup[x+1][y]){\r\n\t\t\t\t\t\tisEdgeTile = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(tileLookup[x]){\r\n\t\t\t\t\t\tif(!tileLookup[x][y+1]){\r\n\t\t\t\t\t\t\tisEdgeTile = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(!tileLookup[x][y-1]){\r\n\t\t\t\t\t\t\tisEdgeTile = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn isEdgeTile;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tfunction getNeighborInfo(node){\r\n\t\t\t\t\tvar x = node.x;\r\n\t\t\t\t\tvar y = node.y;\r\n\t\t\t\t\tvar result = {};\r\n\t\t\t\t\tfor(var i = -1; i < 2; i++){\r\n\t\t\t\t\t\tfor(var j = -1; j < 2; j++){\r\n\t\t\t\t\t\t\tif(!result[x+i]){\r\n\t\t\t\t\t\t\t\tresult[x+i] = {};\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(tileLookup[x+i] && tileLookup[x+i][y+j]){\r\n\t\t\t\t\t\t\t\tresult[x+i][y+j] = \"in_range\";\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tresult[x+i][y+j] = \"out_range\";\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tfunction hasConnection(neighborInfo1, neighborInfo2){\r\n\t\t\t\t\tvar result = false;\r\n\t\t\t\t\tObject.keys(neighborInfo1).forEach(function(x){\r\n\t\t\t\t\t\tObject.keys(neighborInfo1[x]).forEach(function(y){\r\n\t\t\t\t\t\t\tif(neighborInfo1[x][y] == \"out_range\"){\r\n\t\t\t\t\t\t\t\tif(neighborInfo2[x] && neighborInfo2[x][y] && neighborInfo2[x][y] == \"out_range\"){\r\n\t\t\t\t\t\t\t\t\tresult = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tfunction connectNodes(currentNode, nextNode){\r\n\t\t\t\t\tif(nextNode && currentNode){\r\n\t\t\t\t\t\tif(nextNode.x > currentNode.x){\r\n\t\t\t\t\t\t\taddGraphConnection(currentNode.x, currentNode.y, \"right\", {x: nextNode.x, y: nextNode.y});\r\n\t\t\t\t\t\t\taddGraphConnection(nextNode.x, nextNode.y, \"left\", {x: currentNode.x, y: currentNode.y});\r\n\t\t\t\t\t\t} else if(nextNode.x < currentNode.x){\r\n\t\t\t\t\t\t\taddGraphConnection(currentNode.x, currentNode.y, \"left\", {x: nextNode.x, y: nextNode.y});\r\n\t\t\t\t\t\t\taddGraphConnection(nextNode.x, nextNode.y, \"right\", {x: currentNode.x, y: currentNode.y});\r\n\t\t\t\t\t\t} \r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(nextNode.y > currentNode.y){\r\n\t\t\t\t\t\t\taddGraphConnection(currentNode.x, currentNode.y, \"down\", {x: nextNode.x, y: nextNode.y});\r\n\t\t\t\t\t\t\taddGraphConnection(nextNode.x, nextNode.y, \"up\", {x: currentNode.x, y: currentNode.y});\r\n\t\t\t\t\t\t} else if(nextNode.y < currentNode.y){\r\n\t\t\t\t\t\t\taddGraphConnection(currentNode.x, currentNode.y, \"up\", {x: nextNode.x, y: nextNode.y});\r\n\t\t\t\t\t\t\taddGraphConnection(nextNode.x, nextNode.y, \"down\", {x: currentNode.x, y: currentNode.y});\r\n\t\t\t\t\t\t} \r\n\t\t\t\t\t}\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar currentNode = centerTop;\r\n\t\t\t\tvar firstNode = centerTop;\r\n\t\t\t\tvar lastNode;\r\n\t\t\t\t\r\n\t\t\t\twhile(currentNode){\r\n\t\t\t\t\tedgeTiles.push({x: currentNode.x, y: currentNode.y});\t\r\n\t\t\t\t\t//console.log(\"visiting: \"+ currentNode.x+\", \"+ currentNode.y)\r\n\t\t\t\t\tif(!visited[currentNode.x]){\r\n\t\t\t\t\t\tvisited[currentNode.x] = {};\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!visited[currentNode.x][currentNode.y]){\r\n\t\t\t\t\t\tvisited[currentNode.x][currentNode.y] = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet nextNode;\r\n\t\t\t\t\tvar currentNeighborInfo = getNeighborInfo(currentNode);\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar ctr = 0;\r\n\t\t\t\t\twhile(!nextNode && ctr < offsetCheckOrder.length){\r\n\t\t\t\t\t\tvar offset;\r\n\t\t\t\t\t\tif(currentNode.x >= centerCoords.x){\r\n\t\t\t\t\t\t\toffset = offsetCheckOrder[ctr];\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\toffset = offsetCheckOrderBottom[ctr];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(currentNeighborInfo[currentNode.x + offset.x][currentNode.y + offset.y] == \"in_range\" && (!visited[currentNode.x + offset.x] || !visited[currentNode.x + offset.x][currentNode.y + offset.y])){\r\n\t\t\t\t\t\t\tvar candidate = {x: currentNode.x + offset.x, y: currentNode.y + offset.y};\r\n\t\t\t\t\t\t\tif(isEdgeTile(candidate) && hasConnection(currentNeighborInfo, getNeighborInfo(candidate))){\r\n\t\t\t\t\t\t\t\tnextNode = candidate;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tctr++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tconnectNodes(currentNode, nextNode);\t\t\t\t\r\n\t\t\t\t\tif(nextNode){\r\n\t\t\t\t\t\tlastNode = nextNode;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcurrentNode = nextNode;\r\n\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\tif(lastNode) {\r\n\t\t\t\t\tif(Math.abs(lastNode.x - firstNode.x) > 1 || Math.abs(lastNode.y - firstNode.y) > 1){\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t$gameTemp.moveEdgeInfo = null;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconnectNodes(lastNode, firstNode);\t\r\n\t\t\t\t\t\t$gameTemp.moveEdgeInfo = {\r\n\t\t\t\t\t\t\tcorners: {\r\n\t\t\t\t\t\t\t\tup: centerTop,\r\n\t\t\t\t\t\t\t\tdown: centerBottom,\r\n\t\t\t\t\t\t\t\tleft: centerLeft,\t\r\n\t\t\t\t\t\t\t\tright: centerRight\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tgraph: tileGraphLookup\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tedgeTiles.forEach(function(tile){\r\n\t\t\t\t\t\t\t$gameSystem.moveEdgeHighlights.push({x: tile.x, y: tile.y, color: \"#2c57ff\"});\t\t\t\t\t\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\t\t\t\t\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tGame_System.prototype.reloadMoveHighlights = function() {\r\n\t\t\tthis.highlightedTiles = this._lastMoveRangeHighlights;\r\n\t\t\tthis.highlightsRefreshed = true;\r\n\t\t}\r\n\r\n\t\t//移動先にアクターまたはエネミーがいる場合は移動できない（重なりを避ける）\r\n\t\tGame_System.prototype.areTheyNoUnits = function(x, y, type) {\r\n\t\t\tvar flag = true;\r\n\t\t\t$gameMap.eventsXy(x, y).forEach(function(event) {\r\n\t\t\t\tvar battlerArray = $gameSystem.EventToUnit(event._eventId);\r\n\t\t\t\tif (battlerArray && event != $gameTemp.activeEvent() && !event.isErased() &&\r\n\t\t\t\t\tbattlerArray[0] === type || event.isType() === 'playerEvent') {\r\n\t\t\t\t\tflag = false;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn flag;\r\n\t\t};\r\n\r\n\t\t//移動先にイベントユニットがあるかどうか\r\n\t\tGame_System.prototype.isThereEventUnit = function(x, y) {\r\n\t\t\tvar flag = false;\r\n\t\t\t$gameMap.eventsXy(x, y).forEach(function(event) {\r\n\t\t\t\tif (event.isType() === 'unitEvent') {\r\n\t\t\t\t\tflag = true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn flag;\r\n\t\t};\r\n\t\t\r\n\t\tGame_System.prototype.getTwinInfo = function() {\r\n\t\t\tif(!$gameSystem.twinInfo){\r\n\t\t\t\t$gameSystem.twinInfo = {};\r\n\t\t\t} \r\n\t\t\treturn $gameSystem.twinInfo;\r\n\t\t};\r\n\t\t\r\n\t\tGame_System.prototype.getIsTwinInfo = function() {\r\n\t\t\tif(!$gameSystem.isTwinInfo){\r\n\t\t\t\t$gameSystem.isTwinInfo = {};\r\n\t\t\t} \r\n\t\t\treturn $gameSystem.isTwinInfo;\r\n\t\t};\r\n\t\t\r\n\t\tGame_System.prototype.getPreferredSlotInfo = function() {\r\n\t\t\tif(!this.preferredSlotInfo){\r\n\t\t\t\tthis.preferredSlotInfo = {};\r\n\t\t\t} \r\n\t\t\treturn this.preferredSlotInfo;\r\n\t\t};\r\n\t\t\r\n\t\tGame_System.prototype.getPreferredShipSlotInfo = function() {\r\n\t\t\tif(!this.preferredShipSlotInfo){\r\n\t\t\t\tthis.preferredShipSlotInfo = {};\r\n\t\t\t} \r\n\t\t\treturn this.preferredShipSlotInfo;\r\n\t\t};\r\n\t\t\r\n\t\tGame_System.prototype.invalidateDeployList = function() {\r\n\t\t\t$gameSystem.deployList = null;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getDeployList = function() {\r\n\t\t\tif(!$gameSystem.deployList){\r\n\t\t\t\tthis.constructDeployList();\r\n\t\t\t}\r\n\t\t\treturn $gameSystem.deployList;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getShipDeployList = function() {\r\n\t\t\tif(!$gameSystem.shipDeployList){\r\n\t\t\t\tthis.constructShipDeployList();\r\n\t\t\t}\r\n\t\t\treturn $gameSystem.shipDeployList;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getActiveDeployList = function() {\r\n\t\t\treturn this._activeDeploylist;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.setActiveDeployList = function(list) {\r\n\t\t\tthis._activeDeploylist = list;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getActiveShipDeployList = function() {\r\n\t\t\treturn this._activeShipDeploylist;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.setActiveShipDeployList = function(list) {\r\n\t\t\tthis._activeShipDeploylist = list;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.constructDeployList = function(forShips) {\r\n\t\t\t$gameSystem.deployList = [];\r\n\t\t\tvar deployInfo = this.getDeployInfo();\r\n\t\t\tvar usedUnits = {};\r\n\t\t\tvar slotLookup = {};\r\n\t\t\t\r\n\t\t\tvar validActors = {};\r\n\t\t\tvar candidates = $gameSystem.getAvailableUnits();\t\r\n\t\t\tvar tmp = [];\r\n\t\t\tcandidates.forEach(function(candidate){\r\n\t\t\t\tif($statCalc.isValidForDeploy(candidate) && !$statCalc.isShip(candidate)){\r\n\t\t\t\t\tvalidActors[candidate.actorId()] = true;\r\n\t\t\t\t\ttmp.push(candidate);\r\n\t\t\t\t}\r\n\t\t\t});\t\r\n\t\t\tcandidates = tmp;\r\n\t\t\t\r\n\t\t\tvar sortedCandidates = [];\r\n\t\t\tvar usedActors = {};\r\n\t\t\tvar preferredSlotInfo = this.getPreferredSlotInfo();\r\n\t\t\tObject.keys(preferredSlotInfo).forEach(function(slot){\r\n\t\t\t\tvar info = preferredSlotInfo[slot];\t\t\t\r\n\t\t\t\tvar entry = {\r\n\t\t\t\t\tmain: null,\r\n\t\t\t\t\tsub: null\r\n\t\t\t\t};\r\n\t\t\t\tvar isValid = false;\r\n\t\t\t\tif(info){\r\n\t\t\t\t\tif(info.main != -1 && validActors[info.main]){\r\n\t\t\t\t\t\tentry.main = info.main;\r\n\t\t\t\t\t\tisValid = true;\r\n\t\t\t\t\t\tusedActors[entry.main] = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(info.sub != -1 && validActors[info.sub]){\r\n\t\t\t\t\t\tentry.sub = info.sub;\r\n\t\t\t\t\t\tisValid = true;\r\n\t\t\t\t\t\tusedActors[entry.sub] = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t\tif(isValid){\r\n\t\t\t\t\tsortedCandidates.push(entry);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t//if any entries only contain a valid sub move the sub to the main slot\r\n\t\t\tfor(let entry of sortedCandidates){\r\n\t\t\t\tif(entry.sub && entry.main == null){\r\n\t\t\t\t\tentry.main = entry.sub;\r\n\t\t\t\t\tentry.sub = null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\ttmp.forEach(function(candidate){\r\n\t\t\t\tif(!usedActors[candidate.actorId()]){\r\n\t\t\t\t\tsortedCandidates.push({\r\n\t\t\t\t\t\tmain: candidate.actorId(),\r\n\t\t\t\t\t\tsub: null\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\t\r\n\t\t\t\t\t\r\n\t\t\t\r\n\t\t\tvar i = 0;\r\n\t\t\twhile(sortedCandidates.length){\t\r\n\t\t\t\tvar entry = {};\r\n\t\t\t\tif(i < deployInfo.count){\t\t\t\t\r\n\t\t\t\t\tvar isPredefined = false;\r\n\t\t\t\t\tif(deployInfo.assigned[i] && validActors[deployInfo.assigned[i]]){\r\n\t\t\t\t\t\tentry.main = deployInfo.assigned[i];\r\n\t\t\t\t\t\tisPredefined = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(deployInfo.assignedSub[i] && validActors[deployInfo.assigned[i]]){\r\n\t\t\t\t\t\tentry.sub = deployInfo.assignedSub[i];\r\n\t\t\t\t\t\tisPredefined = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!isPredefined){\r\n\t\t\t\t\t\tentry = sortedCandidates.shift();\r\n\t\t\t\t\t} \t\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\tentry = sortedCandidates.shift();\r\n\t\t\t\t}\r\n\t\t\t\tif(usedUnits[entry.main]){\r\n\t\t\t\t\tentry.main = null;\r\n\t\t\t\t}\r\n\t\t\t\tif(usedUnits[entry.sub]){\r\n\t\t\t\t\tentry.sub = null;\r\n\t\t\t\t}\r\n\t\t\t\tif(entry.main || entry.sub){\r\n\t\t\t\t\tif(entry.sub && !entry.main){\r\n\t\t\t\t\t\tentry.main = entry.sub;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$gameSystem.deployList.push(entry);\t\t\t\t\t\t\t\r\n\t\t\t\t\tusedUnits[entry.main] = true;\r\n\t\t\t\t\tusedUnits[entry.sub] = true;\r\n\t\t\t\t}\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.constructShipDeployList = function() {\r\n\t\t\t$gameSystem.shipDeployList = [];\r\n\t\t\tvar deployInfo = this.getDeployInfo();\r\n\t\t\tvar usedUnits = {};\r\n\t\t\t\r\n\t\t\tvar validActors = {};\r\n\t\t\tvar candidates = $gameSystem.getAvailableUnits();\t\r\n\t\t\tvar tmp = [];\r\n\t\t\tcandidates.forEach(function(candidate){\r\n\t\t\t\tif($statCalc.isValidForDeploy(candidate) && $statCalc.isShip(candidate)){\r\n\t\t\t\t\tvalidActors[candidate.actorId()] = true;\r\n\t\t\t\t\ttmp.push(candidate);\r\n\t\t\t\t}\r\n\t\t\t});\t\r\n\t\t\tcandidates = tmp;\r\n\t\t\t\r\n\t\t\tvar sortedCandidates = [];\r\n\t\t\tvar usedActors = {};\r\n\t\t\tvar preferredSlotInfo = this.getPreferredShipSlotInfo();\r\n\t\t\tObject.keys(preferredSlotInfo).forEach(function(slot){\r\n\t\t\t\tvar info = preferredSlotInfo[slot];\t\t\t\r\n\t\t\t\tvar entry = {\r\n\t\t\t\t\tmain: null,\r\n\t\t\t\t\tsub: null\r\n\t\t\t\t};\r\n\t\t\t\tvar isValid = false;\r\n\t\t\t\tif(info.main != -1 && validActors[info.main]){\r\n\t\t\t\t\tentry.main = info.main;\r\n\t\t\t\t\tisValid = true;\r\n\t\t\t\t\tusedActors[entry.main] = true;\r\n\t\t\t\t}\r\n\t\t\t\tif(isValid){\r\n\t\t\t\t\tsortedCandidates.push(entry);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\ttmp.forEach(function(candidate){\r\n\t\t\t\tif(!usedActors[candidate.actorId()]){\r\n\t\t\t\t\tsortedCandidates.push({\r\n\t\t\t\t\t\tmain: candidate.actorId(),\r\n\t\t\t\t\t\tsub: null\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\t\r\n\t\t\t\t\t\r\n\t\t\t\r\n\t\t\tvar i = 0;\r\n\t\t\twhile(sortedCandidates.length){\t\r\n\t\t\t\tvar entry = {};\r\n\t\t\t\tif(i < deployInfo.shipCount){\t\t\t\t\r\n\t\t\t\t\tvar isPredefined = false;\r\n\t\t\t\t\tif(deployInfo.assignedShips[i] && validActors[deployInfo.assignedShips[i]]){\r\n\t\t\t\t\t\tentry.main = deployInfo.assignedShips[i];\r\n\t\t\t\t\t\tisPredefined = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!isPredefined){\r\n\t\t\t\t\t\tentry = sortedCandidates.shift();\r\n\t\t\t\t\t} \t\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\tentry = sortedCandidates.shift();\r\n\t\t\t\t}\r\n\t\t\t\tif(usedUnits[entry.main]){\r\n\t\t\t\t\tentry.main = null;\r\n\t\t\t\t}\r\n\t\t\t\tif(usedUnits[entry.sub]){\r\n\t\t\t\t\tentry.sub = null;\r\n\t\t\t\t}\r\n\t\t\t\tif(entry.main || entry.sub){\r\n\t\t\t\t\t$gameSystem.shipDeployList.push(entry);\t\t\t\t\t\t\t\r\n\t\t\t\t\tusedUnits[entry.main] = true;\r\n\t\t\t\t\tusedUnits[entry.sub] = true;\r\n\t\t\t\t}\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.syncPreferredSlots = function() {\r\n\t\t\tvar deployInfo = this.getDeployList();\r\n\t\t\tthis.preferredSlotInfo = {};\r\n\t\t\tfor(var i = 0; i < deployInfo.length; i++){\r\n\t\t\t\tif(deployInfo[i]){\r\n\t\t\t\t\tthis.preferredSlotInfo[i] = deployInfo[i];\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getDeployInfo = function() {\r\n\t\t\tvar info = $gameVariables.value(_nextMapDeployVariable);\r\n\t\t\tvar defaultInfo = {\r\n\t\t\t\tcount: 0,\r\n\t\t\t\tshipCount: 0,\r\n\t\t\t\tassigned: {},\r\n\t\t\t\tassignedSub: {},\r\n\t\t\t\tassignedShips: {},\r\n\t\t\t\tlockedSlots: {},\t\t\r\n\t\t\t\tlockedShipSlots: {},\t\r\n\t\t\t\tfavorites: {},\r\n\t\t\t\tdoNotDeploySlots: {},\r\n\t\t\t\tminDeployCount: 1\r\n\t\t\t};\r\n\t\t\tif(!info){\r\n\t\t\t\tinfo = defaultInfo;\r\n\t\t\t} else {\r\n\t\t\t\tinfo = JSON.parse(info);\r\n\t\t\t\tObject.keys(defaultInfo).forEach(function(setting){\r\n\t\t\t\t\tif(info[setting] == null){\r\n\t\t\t\t\t\tinfo[setting] = defaultInfo[setting];\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn info;\r\n\t\t};\r\n\t\t\r\n\t\tGame_System.prototype.setDeployInfo = function(info) {\r\n\t\t\tthis.invalidateDeployList();\r\n\t\t\t$gameVariables.setValue(_nextMapDeployVariable, JSON.stringify(info));\r\n\t\t};\r\n\t\t\r\n\t\tGame_System.prototype.clearActorDeployInfo = function(actorId) {\r\n\t\t\tvar deployInfo = this.getDeployInfo();\r\n\t\t\tObject.keys(deployInfo.assigned).forEach(function(slot){\r\n\t\t\t\tif(deployInfo.assigned[slot] == actorId){\r\n\t\t\t\t\tdelete deployInfo.assigned[slot];\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tthis.setDeployInfo(deployInfo);\r\n\t\t};\r\n\t\t\r\n\t\tGame_System.prototype.getPersuadeOption = function(actor) {\r\n\t\t\tif(this.persuadeOptions && actor.isActor()){\r\n\t\t\t\tvar lookup = this.persuadeOptions[actor.actorId()];\r\n\t\t\t\tif(!lookup){\r\n\t\t\t\t\tlookup = this.persuadeOptions[-1];\r\n\t\t\t\t}\r\n\t\t\t\tif(lookup){\r\n\t\t\t\t\tvar event = actor.event;\r\n\t\t\t\t\tvar position = {x: event.posX(), y: event.posY()};\r\n\t\t\t\t\tvar adjacentEvents = $statCalc.getAdjacentEvents(null, position);\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar option;\r\n\t\t\t\t\tvar ctr = 0;\r\n\t\t\t\t\twhile(!option && ctr < adjacentEvents.length){\r\n\t\t\t\t\t\tvar eventId = adjacentEvents[ctr].eventId();\r\n\t\t\t\t\t\tif(lookup[eventId] != null){\r\n\t\t\t\t\t\t\toption = {eventId: eventId, controlVar: lookup[eventId]};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tctr++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn option;\r\n\t\t\t\t}\t\t\t\r\n\t\t\t} \r\n\t\t\treturn null;\t\t\r\n\t\t};\r\n\t\t\r\n\t\tGame_System.prototype.getUnitSceneBgId = function(actor) {\r\n\t\t\tif(actor && actor.commandBgId){\r\n\t\t\t\treturn actor.commandBgId;\r\n\t\t\t} else if($gameTemp.editMode){\r\n\t\t\t\treturn $SRWEditor.getBattleEnvironmentId();\r\n\t\t\t} else {\r\n\t\t\t\tvar event = $statCalc.getReferenceEvent(actor);\r\n\t\t\t\tvar region = $gameMap.regionId(event.posX(), event.posY());\r\n\t\t\t\tlet superState = $statCalc.getSuperState(actor);\r\n\t\t\t\tif(superState == -1){\r\n\t\t\t\t\tif($gameSystem.regionBattleEnv[region] != null){\r\n\t\t\t\t\t\treturn $gameSystem.regionBattleEnv[region];\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif($gameSystem.regionSuperStateBattleEnv[superState] != null && $gameSystem.regionSuperStateBattleEnv[superState][region] != null){\r\n\t\t\t\t\t\treturn $gameSystem.regionSuperStateBattleEnv[superState][region];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif($gameSystem.superStateBattleEnv[superState]){\r\n\t\t\t\t\t\treturn $gameSystem.superStateBattleEnv[superState];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif($gameSystem.regionBattleEnv[region] != null){\r\n\t\t\t\t\t\treturn $gameSystem.regionBattleEnv[region];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t\treturn $gameSystem.defaultBattleEnv;\t\t\t\t\t\t\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tGame_System.prototype.validateAbilityLockInfo = function(actorId, abilityId) {\r\n\t\t\tif(!this.abilityLockInfo){\r\n\t\t\t\tthis.abilityLockInfo = {\r\n\t\t\t\t\tactor: {},\r\n\t\t\t\t\tmech: {}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.setAbilityStatus = function(abilityInfo, id, abilityId, status) {\r\n\t\t\t//status: hidden, locked, \"\"\r\n\t\t\tif(!abilityInfo[id]){\r\n\t\t\t\tabilityInfo[id] = {};\r\n\t\t\t}\r\n\t\t\tabilityInfo[id][abilityId] = status;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getAbilityStatus = function(abilityInfo, id, abilityId) {\r\n\t\t\t//status: hidden, locked, \"\"\t\t\r\n\t\t\tvar result = \"\";\r\n\t\t\tif(abilityInfo[id] && abilityInfo[id][abilityId]){\r\n\t\t\t\tresult = abilityInfo[id][abilityId];\r\n\t\t\t}\t\t\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.setPilotAbilityStatus = function(actorId, abilityId, status) {\t\t\r\n\t\t\tthis.validateAbilityLockInfo();\r\n\t\t\tthis.setAbilityStatus(this.abilityLockInfo.actor, actorId, abilityId, status);\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getPilotAbilityStatus = function(actorId, abilityId) {\t\r\n\t\t\tthis.validateAbilityLockInfo();\r\n\t\t\treturn this.getAbilityStatus(this.abilityLockInfo.actor, actorId, abilityId);\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.isHiddenActorAbility = function(actor, abilityId) {\r\n\t\t\tvar result = false;\r\n\t\t\tif(actor.isActor()){\r\n\t\t\t\tvar status = this.getPilotAbilityStatus(actor.actorId(), abilityId);\r\n\t\t\t\tresult = status == \"hidden\" || status == \"locked\";\r\n\t\t\t}\t\t\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.isLockedActorAbility = function(actor, abilityId) {\r\n\t\t\tvar result = false;\r\n\t\t\tif(actor.isActor()){\r\n\t\t\t\tvar status = this.getPilotAbilityStatus(actor.actorId(), abilityId);\r\n\t\t\t\tresult = status == \"locked\";\r\n\t\t\t}\t\t\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.setMechAbilityStatus = function(mechId, abilityId, status) {\t\t\r\n\t\t\tthis.validateAbilityLockInfo();\r\n\t\t\tthis.setAbilityStatus(this.abilityLockInfo.mech, mechId, abilityId, status);\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getMechAbilityStatus = function(mechId, abilityId) {\t\r\n\t\t\tthis.validateAbilityLockInfo();\r\n\t\t\treturn this.getAbilityStatus(this.abilityLockInfo.mech, mechId, abilityId);\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.isHiddenMechAbility = function(actor, abilityId) {\r\n\t\t\tvar result = false;\r\n\t\t\tif(actor.SRWStats && actor.SRWStats.mech){\r\n\t\t\t\tvar status = this.getMechAbilityStatus(actor.SRWStats.mech.id, abilityId);\r\n\t\t\t\tresult = status == \"hidden\" || status == \"locked\";\r\n\t\t\t}\t\t\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.isLockedMechAbility = function(actor, abilityId) {\r\n\t\t\tvar result = false;\r\n\t\t\tif(actor.SRWStats && actor.SRWStats.mech){\r\n\t\t\t\tvar status = this.getMechAbilityStatus(actor.SRWStats.mech.id, abilityId);\r\n\t\t\t\tresult = status == \"locked\";\r\n\t\t\t}\t\t\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.validateTransformationLockInfo = function() {\r\n\t\t\tif(!this.transformationLockInfo){\r\n\t\t\t\tthis.transformationLockInfo = {}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.isTransformationLocked = function(mechId, index) {\r\n\t\t\tthis.validateTransformationLockInfo();\r\n\t\t\tif(this.transformationLockInfo[mechId]){\r\n\t\t\t\treturn this.transformationLockInfo[mechId][index];\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\t\t\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.lockTransformation = function(mechId, index) {\r\n\t\t\tthis.validateTransformationLockInfo();\r\n\t\t\tif(!this.transformationLockInfo[mechId]){\r\n\t\t\t\tthis.transformationLockInfo[mechId] = {};\r\n\t\t\t}\r\n\t\t\tthis.transformationLockInfo[mechId][index] = true;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.lockAllTransformations = function() {\r\n\t\t\tthis.validateTransformationLockInfo();\r\n\t\t\tfor(var i = 1; i < $dataClasses.length; i++){\r\n\t\t\t\tvar mechProperties = $dataClasses[i].meta;\r\n\t\t\t\tvar transformsInto;\r\n\t\t\t\ttransformsInto = mechProperties.mechTransformsInto * 1 || -1;\t\r\n\t\t\t\tif(transformsInto == -1 && mechProperties.mechTransformsInto != null){\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\ttransformsInto = JSON.parse(mechProperties.mechTransformsInto);\r\n\t\t\t\t\t} catch(e){\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(transformsInto && transformsInto != -1){\r\n\t\t\t\t\tif(!Array.isArray(transformsInto)){\r\n\t\t\t\t\t\ttransformsInto = [transformsInto];\r\n\t\t\t\t\t}\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttransformsInto = [];\r\n\t\t\t\t}\r\n\t\t\t\tthis.transformationLockInfo[i] = {};\r\n\t\t\t\tfor(var j = 0; j < transformsInto.length; j++){\t\t\t\t\r\n\t\t\t\t\tthis.transformationLockInfo[i][j] = true;\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\t\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.unlockTransformation = function(mechId, index) {\r\n\t\t\tthis.validateTransformationLockInfo();\r\n\t\t\tif(this.transformationLockInfo[mechId]){\r\n\t\t\t\tthis.transformationLockInfo[mechId][index] = false;\r\n\t\t\t}\t\t\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.unlockAllTransformations = function() {\r\n\t\t\tthis.validateTransformationLockInfo();\r\n\t\t\tfor(var i = 1; i < $dataClasses.length; i++){\r\n\t\t\t\tdelete this.transformationLockInfo[i];\r\n\t\t\t}\t\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.validateCombineLockInfo = function() {\r\n\t\t\tif(!this.combineLockInfo){\r\n\t\t\t\tthis.combineLockInfo = {}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tGame_System.prototype.isCombineLocked = function(mechId) {\r\n\t\t\tthis.validateCombineLockInfo();\t\r\n\t\t\treturn !!this.combineLockInfo[mechId];\t\t\r\n\t\t}\r\n\r\n\t\tGame_System.prototype.lockCombine = function(mechId) {\r\n\t\t\tthis.validateCombineLockInfo();\r\n\t\t\tthis.combineLockInfo[mechId] = true;\r\n\t\t}\r\n\r\n\t\tGame_System.prototype.lockAllCombines = function() {\r\n\t\t\tthis.validateCombineLockInfo();\r\n\t\t\tfor(var i = 1; i < $dataClasses.length; i++){\r\n\t\t\t\tvar mechProperties = $dataClasses[i].meta;\r\n\t\t\t\tif(mechProperties.mechCombinesTo){\r\n\t\t\t\t\tthis.combineLockInfo[i] = true;\t\r\n\t\t\t\t}\r\n\t\t\t}\t\r\n\t\t}\r\n\r\n\t\tGame_System.prototype.unlockCombine = function(mechId, index) {\r\n\t\t\tthis.validateCombineLockInfo();\t\r\n\t\t\tthis.combineLockInfo[mechId] = false;\t\t\t\r\n\t\t}\r\n\r\n\t\tGame_System.prototype.unlockAllCombines = function() {\r\n\t\t\tthis.validateCombineLockInfo();\r\n\t\t\tthis.combineLockInfo = {}\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.validateAbilityUpgradesInfo = function(type) {\r\n\t\t\tif(!this.abilityUpgradesInfo){\r\n\t\t\t\tthis.abilityUpgradesInfo = {}\r\n\t\t\t}\r\n\t\t\tif(!this.abilityUpgradesInfo[type]){\r\n\t\t\t\tthis.abilityUpgradesInfo[type] = {};\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.setAbilityUpgrade = function(type, baseIdx, upgradeIdx) {\r\n\t\t\tthis.validateAbilityUpgradesInfo(type);\r\n\t\t\tthis.abilityUpgradesInfo[type][baseIdx] = upgradeIdx;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getAbilityUpgrades = function(type) {\r\n\t\t\tthis.validateAbilityUpgradesInfo(type);\r\n\t\t\treturn this.abilityUpgradesInfo[type];\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.pushTextLog = function(faceName, faceIndex, text){\r\n\t\t\tif(!this.textLog){\r\n\t\t\t\tthis.textLog = [];\t\t\t\t\t\r\n\t\t\t}\r\n\t\t\tif(this.textLog.length > 250){\r\n\t\t\t\tthis.textLog.shift();\r\n\t\t\t}\r\n\t\t\tthis.textLog.push({\r\n\t\t\t\tfaceName: faceName,\r\n\t\t\t\tfaceIndex: faceIndex,\r\n\t\t\t\ttext: text\r\n\t\t\t});\r\n\t\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.validateMovesSeenInfo = function() {\r\n\t\t\tif(!this.movesSeen){\r\n\t\t\t\tthis.movesSeen = {}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.setMovesSeen = function(id) {\r\n\t\t\tthis.validateMovesSeenInfo();\r\n\t\t\tthis.movesSeen[id] = true;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.isMoveSeen = function(id) {\r\n\t\t\tthis.validateMovesSeenInfo();\r\n\t\t\treturn this.movesSeen[id];\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getBattleSpeed = function() {\r\n\t\t\tif($gameMap.isEventRunning() && !$gameSystem.isIntermission()){//hacky solution to game speed not being settable during the intermission\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\treturn ConfigManager[\"battleSpeed\"] || 1;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.setBattleSpeed = function(speed) {\r\n\t\t\tConfigManager[\"battleSpeed\"] = speed;\r\n\t\t\tthis._battleSpeed = speed;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getScaledTime = function(time) {\r\n\t\t\treturn time / this.getBattleSpeed();\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.ABI_ZONE_MAX = 8;\r\n\t\t\r\n\t\tGame_System.prototype.validateAbilityZoneInfo = function(id) {\r\n\t\t\tif(!this.abilityZoneInfo){\r\n\t\t\t\tconst initZoneInfo = (id) => {\r\n\t\t\t\t\tthis.abilityZoneInfo[id] = {\r\n\t\t\t\t\t\tpattern: [],\r\n\t\t\t\t\t\tcenter: {x: -1, y: -1},\r\n\t\t\t\t\t\tfollowsOwner: false,\r\n\t\t\t\t\t\tcolor: null,\r\n\t\t\t\t\t\townerEventId: -1,\r\n\t\t\t\t\t\tabilityId: null,\r\n\t\t\t\t\t\tphaseCount: null,\r\n\t\t\t\t\t\texpires: true\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis.abilityZoneInfo = {};\r\n\t\t\t\tfor(var i = 0; i < Game_System.ABI_ZONE_MAX; i++){\r\n\t\t\t\t\tinitZoneInfo(i);\r\n\t\t\t\t};\t\t\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(!this.abilityZoneRefreshInfo){\r\n\t\t\t\tthis.abilityZoneRefreshInfo = {};\t\t\t\t\r\n\t\t\t\tfor(var i = 0; i < Game_System.ABI_ZONE_MAX; i++){\r\n\t\t\t\t\tthis.abilityZoneRefreshInfo[i] = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(!this.abilityZoneAnimationsPending){\r\n\t\t\t\tthis.abilityZoneAnimationsPending = {};\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getAbilityZone = function(id) {\r\n\t\t\tthis.validateAbilityZoneInfo();\r\n\t\t\treturn this.abilityZoneInfo[id];\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getFreeAbilityZoneSlotCount = function(forActor) {\r\n\t\t\tthis.validateAbilityZoneInfo();\r\n\t\t\tlet enemyCount = 0;\r\n\t\t\tlet actorCount = 0;\r\n\t\t\tfor(var i = 0; i < Game_System.ABI_ZONE_MAX; i++){\r\n\t\t\t\tif(this.abilityZoneInfo[i].phaseCount > 0){\r\n\t\t\t\t\tlet referenceEvent = $gameMap.event(this.abilityZoneInfo[i].ownerEventId);\r\n\t\t\t\t\tif(referenceEvent){\r\n\t\t\t\t\t\tlet battlerArray = this.EventToUnit(this.abilityZoneInfo[i].ownerEventId);\t\r\n\t\t\t\t\t\tif(battlerArray[0] == \"actor\"){\r\n\t\t\t\t\t\t\tactorCount++;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tenemyCount++;\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(forActor){\r\n\t\t\t\treturn ENGINE_SETTINGS.ALLY_ZONE_COUNT - actorCount;\r\n\t\t\t} else {\r\n\t\t\t\treturn (Game_System.ABI_ZONE_MAX - ENGINE_SETTINGS.ALLY_ZONE_COUNT)\t- enemyCount;\r\n\t\t\t}\t\t\t\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.isZoneDeployed = function(trackingId) {\r\n\t\t\tthis.validateAbilityZoneInfo();\r\n\t\t\tlet result = false;\r\n\t\t\tfor(var i = 0; i < Game_System.ABI_ZONE_MAX; i++){\r\n\t\t\t\tif(this.abilityZoneInfo[i].phaseCount > 0){\r\n\t\t\t\t\tif(this.abilityZoneInfo[i].trackingId == trackingId){\r\n\t\t\t\t\t\tresult = true;\r\n\t\t\t\t\t}\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result;\t\t\t\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.canActorSetZones = function(count) {\r\n\t\t\treturn this.getFreeAbilityZoneSlotCount(true) >= count;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getNextAbilityZoneId = function(forActor) {\r\n\t\t\tthis.validateAbilityZoneInfo();\r\n\t\t\tlet id = -1;\r\n\t\t\tlet ctr = 0;\r\n\t\t\tif(this.getFreeAbilityZoneSlotCount(forActor) > 0){\r\n\t\t\t\twhile(id == -1 && ctr < Game_System.ABI_ZONE_MAX){\r\n\t\t\t\t\tif(this.abilityZoneInfo[ctr].phaseCount <= 0){\r\n\t\t\t\t\t\tid = ctr;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tctr++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn id;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.setActorAbilityZone = function(actor, params) {\r\n\t\t\tlet referenceEvent = $statCalc.getReferenceEvent(actor);\r\n\t\t\tthis.setEventAbilityZone(referenceEvent.eventId(), params);\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.setEventAbilityZone = function(eventId, params) {\t\t\t\r\n\t\t\tlet event = $gameMap.event(eventId);\r\n\t\t\tlet battlerArray = this.EventToUnit(eventId);\t\r\n\t\t\tlet zoneId = this.getNextAbilityZoneId(battlerArray[0] == \"actor\");\r\n\t\t\tif(zoneId != -1){\t\r\n\t\t\t\tparams.center = {x: event.posX(), y: event.posY()};\r\n\t\t\t\tparams.ownerEventId = eventId;\r\n\t\t\t\tthis.setAbilityZone(zoneId, params);\t\t\t\t\t\t\t\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.clearEventAbilityZones = function(eventId) {\r\n\t\t\tthis.validateAbilityZoneInfo();\r\n\t\t\tfor(var i = 0; i < Game_System.ABI_ZONE_MAX; i++){\r\n\t\t\t\tif(this.abilityZoneInfo[i].ownerEventId == eventId){\r\n\t\t\t\t\tthis.abilityZoneInfo[i].phaseCount = 0;\r\n\t\t\t\t\tthis.setAbilityZoneNeedsRefresh(i);\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.setAbilityZone = function(id, params) {\r\n\t\t\tthis.validateAbilityZoneInfo();\r\n\t\t\tif(id < 0 || id >= Game_System.ABI_ZONE_MAX){\r\n\t\t\t\tthrow(\"Invalid ability zone id(\"+id+\") used during init\");\r\n\t\t\t}\r\n\t\t\tlet pattern = $patternManager.getDefinition(params.pattern).tiles || [];\t\t\t\r\n\t\t\tthis.abilityZoneInfo[id] = {\r\n\t\t\t\tpattern: pattern,\r\n\t\t\t\tcenter: params.center || {x: -1, y: -1},\r\n\t\t\t\tfollowsOwner: params.followsOwner || false,\r\n\t\t\t\tcolor: params.color || \"#FFFFFF\",\r\n\t\t\t\townerEventId: params.ownerEventId,\r\n\t\t\t\tabilityId: params.abilityId,\r\n\t\t\t\tphaseCount: params.phaseCount || 1,\r\n\t\t\t\texpires: params.expires || false,\r\n\t\t\t\ttrackingId: params.trackingId\r\n\t\t\t}\r\n\t\t\t$gameSystem.setAbilityZoneNeedsRefresh(id);\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.setAbilityZoneNeedsRefresh = function(id) {\r\n\t\t\tthis.validateAbilityZoneInfo();\r\n\t\t\tthis.abilityZoneAnimationsPending[id] = true;\r\n\t\t\tthis.abilityZoneRefreshInfo[id] = true;\r\n\t\t\t\r\n\t\t\t$statCalc.invalidateZoneCache();\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.clearAbilityZoneNeedsRefresh = function(id) {\r\n\t\t\tthis.validateAbilityZoneInfo();\r\n\t\t\tthis.abilityZoneRefreshInfo[id] = false;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.clearAbilityZoneAnimationPending = function(id) {\r\n\t\t\tthis.validateAbilityZoneInfo();\r\n\t\t\tdelete this.abilityZoneAnimationsPending[id];\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.hasAbilityZoneAnimPending = function(id) {\r\n\t\t\treturn Object.keys(this.abilityZoneAnimationsPending).length > 0;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.abilityZoneNeedsRefresh = function(id) {\r\n\t\t\tthis.validateAbilityZoneInfo();\r\n\t\t\treturn this.abilityZoneRefreshInfo[id];\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.expireAbilityZones = function(checkOnly) {\r\n\t\t\tthis.validateAbilityZoneInfo();\r\n\t\t\tfor(var i = 0; i < Game_System.ABI_ZONE_MAX; i++){\r\n\t\t\t\tif(this.abilityZoneInfo[i].phaseCount > 0){\r\n\t\t\t\t\tif(!checkOnly){\r\n\t\t\t\t\t\tif(this.abilityZoneInfo[i].expires){\r\n\t\t\t\t\t\t\tthis.abilityZoneInfo[i].phaseCount--;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(this.abilityZoneInfo[i].phaseCount <= 0){\t\t\t\t\r\n\t\t\t\t\t\t\tthis.setAbilityZoneNeedsRefresh(i);\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(this.abilityZoneInfo[i].ownerEventId != -1){\r\n\t\t\t\t\t\tlet referenceEvent = $gameMap.event(this.abilityZoneInfo[i].ownerEventId);\r\n\t\t\t\t\t\tif(referenceEvent && referenceEvent.isErased()){\r\n\t\t\t\t\t\t\tthis.abilityZoneInfo[i].phaseCount = 0;\r\n\t\t\t\t\t\t\tthis.setAbilityZoneNeedsRefresh(i);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.resetAbilitZones = function() {\r\n\t\t\tdelete this.abilityZoneInfo;\t\t\t\r\n\t\t\tdelete this.abilityZoneRefreshInfo;\r\n\t\t\tdelete this.abilityZoneAnimationsPending;\r\n\t\t\tfor(var i = 0; i < Game_System.ABI_ZONE_MAX; i++){\r\n\t\t\t\tthis.setAbilityZoneNeedsRefresh(i);\t\t\t\t\r\n\t\t\t}\r\n\t\t\tthis.validateAbilityZoneInfo();\r\n\t\t\t\r\n\t\t}\r\n\r\n\t\tGame_System.prototype.updateAbilityZones = function(eventId) {\r\n\t\t\tthis.validateAbilityZoneInfo();\r\n\t\t\tfor(var i = 0; i < Game_System.ABI_ZONE_MAX; i++){\r\n\t\t\t\tif(this.abilityZoneInfo[i].phaseCount > 0 && this.abilityZoneInfo[i].ownerEventId == eventId && this.abilityZoneInfo[i].followsOwner){\r\n\t\t\t\t\tlet referenceEvent = $gameMap.event(eventId);\r\n\t\t\t\t\tif(referenceEvent){\r\n\t\t\t\t\t\tthis.abilityZoneInfo[i].center = {x: referenceEvent.posX(), y: referenceEvent.posY()};\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.setAbilityZoneNeedsRefresh(i);\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tGame_System.prototype.getActiveAbilityZoneTiles = function() {\r\n\t\t\tlet result = {};\r\n\t\t\tthis.validateAbilityZoneInfo();\r\n\t\t\tfor(var i = 0; i < Game_System.ABI_ZONE_MAX; i++){\r\n\t\t\t\tlet zoneInfo = this.abilityZoneInfo[i];\r\n\t\t\t\tif(zoneInfo.phaseCount > 0){\r\n\t\t\t\t\tlet center = zoneInfo.center;\r\n\t\t\t\t\tfor(var j = 0; j < zoneInfo.pattern.length; j++){\r\n\t\t\t\t\t\tlet x = center.x + zoneInfo.pattern[j].x;\r\n\t\t\t\t\t\tlet y = center.y + zoneInfo.pattern[j].y;\r\n\t\t\t\t\t\tif(!result[x]){\r\n\t\t\t\t\t\t\tresult[x] = {};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(!result[x][y]){\r\n\t\t\t\t\t\t\tresult[x][y] = [];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tresult[x][y].push(zoneInfo);\r\n\t\t\t\t\t}\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tGame_System.prototype.eventHasZone = function(eventId) {\r\n\t\t\tlet result = false;\r\n\t\t\tthis.validateAbilityZoneInfo();\r\n\t\t\tfor(var i = 0; i < Game_System.ABI_ZONE_MAX; i++){\r\n\t\t\t\tif(this.abilityZoneInfo[i].phaseCount > 0 && this.abilityZoneInfo[i].ownerEventId == eventId){\r\n\t\t\t\t\tresult = true;\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\t\r\n\r\n\t\tGame_System.prototype.getActiveZonesAtTile = function(coords) {\r\n\t\t\tlet result = [];\r\n\t\t\tthis.validateAbilityZoneInfo();\r\n\t\t\tfor(var i = 0; i < Game_System.ABI_ZONE_MAX; i++){\r\n\t\t\t\tlet zoneInfo = this.abilityZoneInfo[i];\r\n\t\t\t\tif(zoneInfo.phaseCount > 0){\r\n\t\t\t\t\tlet center = zoneInfo.center;\r\n\t\t\t\t\tfor(var j = 0; j < zoneInfo.pattern.length; j++){\r\n\t\t\t\t\t\tlet x = center.x + zoneInfo.pattern[j].x;\r\n\t\t\t\t\t\tlet y = center.y + zoneInfo.pattern[j].y;\r\n\t\t\t\t\t\tif(x == coords.x && y == coords.y){\r\n\t\t\t\t\t\t\tresult.push(this.abilityZoneInfo[i]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\t\t\r\n\t\t\r\n\t\tGame_System.prototype.isZoneActiveAtTile = function(coords) {\r\n\t\t\treturn this.getActiveZonesAtTile(coords).length > 0;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.checkcolorSubstitutionKit = function() {\r\n\t\t\tif(!this._currentColorSubstitutions){\r\n\t\t\t\tthis._currentColorSubstitutions = new Uint32Array([\r\n\t\t\t\t\t0, 0, 0,/*||*/0, 0, 0, \r\n\t\t\t\t\t0, 0, 0,/*||*/0, 0, 0, \r\n\t\t\t\t\t0, 0, 0,/*||*/0, 0, 0, \r\n\t\t\t\t\t0, 0, 0,/*||*/0, 0, 0, \r\n\t\t\t\t\t\r\n\t\t\t\t\t0, 0, 0,/*||*/0, 0, 0, \t\t\t\t\t\r\n\t\t\t\t\t0, 0, 0,/*||*/0, 0, 0, \r\n\t\t\t\t\t0, 0, 0,/*||*/0, 0, 0, \r\n\t\t\t\t\t0, 0, 0,/*||*/0, 0, 0, \r\n\t\t\t\t\t\r\n\t\t\t\t\t0, 0, 0,/*||*/0, 0, 0, \r\n\t\t\t\t\t0, 0, 0,/*||*/0, 0, 0, \r\n\t\t\t\t\t0, 0, 0,/*||*/0, 0, 0, \r\n\t\t\t\t\t0, 0, 0,/*||*/0, 0, 0, \r\n\t\t\t\t]);\r\n\t\t\t}\r\n\t\t\tif(this._currentColorSubstitutions.constructor != Uint32Array){\r\n\t\t\t\tthis._currentColorSubstitutions = new Uint32Array(Object.values(this._currentColorSubstitutions));\r\n\t\t\t}\t\t\t\r\n\t\t\t\r\n\t\t\tif(!this._colorCycles){\r\n\t\t\t\tthis._colorCycles = {\r\n\t\t\t\t\t0: {\r\n\t\t\t\t\t\trunning: false,\r\n\t\t\t\t\t\tlastUpdate: -1,\r\n\t\t\t\t\t\tcolors: [],\r\n\t\t\t\t\t\tdelay: -1,\r\n\t\t\t\t\t\tcycle: 0\r\n\t\t\t\t\t},\r\n\t\t\t\t\t1: {\r\n\t\t\t\t\t\trunning: false,\r\n\t\t\t\t\t\tlastUpdate: -1,\r\n\t\t\t\t\t\tcolors: [],\r\n\t\t\t\t\t\tdelay: -1,\r\n\t\t\t\t\t\tcycle: 0\r\n\t\t\t\t\t},\r\n\t\t\t\t\t2: {\r\n\t\t\t\t\t\trunning: false,\r\n\t\t\t\t\t\tlastUpdate: -1,\r\n\t\t\t\t\t\tcolors: [],\r\n\t\t\t\t\t\tdelay: -1,\r\n\t\t\t\t\t\tcycle: 0\r\n\t\t\t\t\t},\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getColorSubstitutions = function() {\r\n\t\t\tthis.checkcolorSubstitutionKit();\r\n\t\t\treturn this._currentColorSubstitutions;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.registerColorCycle = function(id, colors, delay) {\r\n\t\t\tthis.checkcolorSubstitutionKit();\r\n\t\t\tif(id >= 0 && id < 3 ){\r\n\t\t\t\tlet tmp = [];\r\n\t\t\t\tlet isComplexCycle = false;\r\n\t\t\t\tfor(let color of colors){\r\n\t\t\t\t\tif(typeof color == \"object\"){\r\n\t\t\t\t\t\tlet lookup = {};\r\n\t\t\t\t\t\tfor(let searchColor in color.colors){\r\n\t\t\t\t\t\t\tlookup[searchColor.replace(\"#\", \"\")] = color.colors[searchColor].replace(\"#\", \"\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcolor.colors = lookup;\r\n\t\t\t\t\t\ttmp.push(color);\r\n\t\t\t\t\t\tisComplexCycle = true;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttmp.push(color.replace(\"#\", \"\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\tif(isComplexCycle && tmp[0]){\r\n\t\t\t\t\tdelay = tmp[0].delay;\r\n\t\t\t\t}\r\n\t\t\t\tthis._colorCycles[id] = {\r\n\t\t\t\t\trunning: true,\r\n\t\t\t\t\tlastUpdate: Date.now(),\r\n\t\t\t\t\tcolors: tmp,\r\n\t\t\t\t\tdelay: delay || 250,\r\n\t\t\t\t\tisComplexCycle: isComplexCycle,\r\n\t\t\t\t\tcycle: 0\r\n\t\t\t\t}\r\n\t\t\t}\t\t\t\r\n\t\t}\t\r\n\r\n\t\tGame_System.prototype.stopColorCycle = function(id) {\r\n\t\t\tthis.checkcolorSubstitutionKit();\r\n\t\t\tif(id >= 0 && id < 3){\r\n\t\t\t\tthis._colorCycles[id].running = false;\r\n\t\t\t}\r\n\t\t}\t\r\n\t\t\r\n\t\tGame_System.prototype.updateColorCycles = function() {\r\n\t\t\tconst _this = this;\r\n\t\t\t\r\n\t\t\tfunction registerColorTranslation(baseOffset, entryOffset, currentColor, targetColor){\r\n\t\t\t\tlet currentR = Number(\"0x\"+currentColor.substring(0, 2), 10);\r\n\t\t\t\tlet currentG = Number(\"0x\"+currentColor.substring(2, 4), 10);\r\n\t\t\t\tlet currentB = Number(\"0x\"+currentColor.substring(4), 10);\r\n\t\t\t\t\r\n\t\t\t\tlet targetR = Number(\"0x\"+targetColor.substring(0, 2), 10);\r\n\t\t\t\tlet targetG = Number(\"0x\"+targetColor.substring(2, 4), 10);\r\n\t\t\t\tlet targetB = Number(\"0x\"+targetColor.substring(4), 10);\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t_this._currentColorSubstitutions[baseOffset + entryOffset + 0] = currentR;\r\n\t\t\t\t_this._currentColorSubstitutions[baseOffset + entryOffset + 1] = currentG;\r\n\t\t\t\t_this._currentColorSubstitutions[baseOffset + entryOffset + 2] = currentB;\r\n\t\t\t\t\r\n\t\t\t\t_this._currentColorSubstitutions[baseOffset + entryOffset + 3] = targetR;\r\n\t\t\t\t_this._currentColorSubstitutions[baseOffset + entryOffset + 4] = targetG;\r\n\t\t\t\t_this._currentColorSubstitutions[baseOffset + entryOffset + 5] = targetB;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.checkcolorSubstitutionKit();\r\n\t\t\tfor(let cycleId in _this._colorCycles){\r\n\t\t\t\tlet cycleInfo = _this._colorCycles[cycleId];\r\n\t\t\t\tlet timeStamp = Date.now();\r\n\t\t\t\tif(timeStamp - cycleInfo.delay >= cycleInfo.lastUpdate){\r\n\t\t\t\t\tcycleInfo.lastUpdate = timeStamp;\r\n\t\t\t\t\tcycleInfo.cycle++;\r\n\t\t\t\t\tif(cycleInfo.cycle >= cycleInfo.colors.length){\r\n\t\t\t\t\t\tcycleInfo.cycle = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\r\n\t\t\t\tconst baseOffset = cycleId * 24;\t\r\n\t\t\t\tif(cycleInfo.isComplexCycle) {\r\n\t\t\t\t\tlet frameInfo = cycleInfo.colors[cycleInfo.cycle];\r\n\t\t\t\t\tcycleInfo.delay = frameInfo.delay;\r\n\t\t\t\t\tlet ctr = 0;\t\t\t\t\t\r\n\t\t\t\t\tfor(let searchColor in frameInfo.colors){\r\n\t\t\t\t\t\tlet targetColor = frameInfo.colors[searchColor];\t\t\t\t\t\t\r\n\t\t\t\t\t\tconst entryOffset = (ctr++) * 6;\r\n\t\t\t\t\t\tregisterColorTranslation(baseOffset, entryOffset, searchColor, targetColor);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfor(var i = 0; i < 4; i++){\r\n\t\t\t\t\t\tlet currentColor = \"000000\";\r\n\t\t\t\t\t\tlet targetColor = \"000000\";\r\n\t\t\t\t\t\tif(cycleInfo.running && i < cycleInfo.colors.length){\r\n\t\t\t\t\t\t\tcurrentColor = String(cycleInfo.colors[i]);\r\n\t\t\t\t\t\t\tlet targetColorIdx = (i + cycleInfo.cycle) % cycleInfo.colors.length;\r\n\t\t\t\t\t\t\ttargetColor = String(cycleInfo.colors[targetColorIdx]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tconst entryOffset = i * 6;\r\n\t\t\t\t\t\tregisterColorTranslation(baseOffset, entryOffset, currentColor, targetColor);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\t\t\r\n\t\t\t}\t\t\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.INTERACTION_STATUS = \"status\";\r\n\t\tGame_System.INTERACTION_DAMAGE = \"damage\";\r\n\t\tGame_System.INTERACTION_DAMAGE_AND_STATUS = \"damage_and_status\";\r\n\t\t\r\n\t\tGame_System.prototype.getCombatInteractionInfo = function(weapon) {\r\n\t\t\tconst isBetweenFriendlies = this.areUnitsFriendly($gameTemp.currentBattleActor, $gameTemp.currentBattleEnemy);\r\n\t\t\tlet interactionType;\r\n\t\t\tif(weapon){\r\n\t\t\t\tif(!isBetweenFriendlies){\r\n\t\t\t\t\tinteractionType = weapon.enemiesInteraction;\r\n\t\t\t\t} else {  \r\n\t\t\t\t\tinteractionType = weapon.alliesInteraction;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn {\r\n\t\t\t\tisBetweenFriendlies: isBetweenFriendlies,\r\n\t\t\t\tinteractionType: interactionType\r\n\t\t\t};\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.awardFavPoints = function(amount) {\r\n\t\t\tif(!this.favPoints){\r\n\t\t\t\tthis.favPoints = 0;\r\n\t\t\t}\r\n\t\t\tthis.favPoints+=(amount * 1);\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getCurrentFavPoints = function(weapon) {\r\n\t\t\tif(!this.favPoints){\r\n\t\t\t\tthis.favPoints = 0;\r\n\t\t\t}\r\n\t\t\treturn this.favPoints;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.setPreferredSuperState = function(actor, state) {\r\n\t\t\tif(!this.preferredSuperStates){\r\n\t\t\t\tthis.preferredSuperStates = {};\r\n\t\t\t}\r\n\t\t\tif(actor.actorId){\r\n\t\t\t\tthis.preferredSuperStates[actor.actorId()] = state;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getPreferredSuperState = function(actor) {\r\n\t\t\tif(!this.preferredSuperStates){\r\n\t\t\t\tthis.preferredSuperStates = {};\r\n\t\t\t}\r\n\t\t\tif(actor.actorId){\r\n\t\t\t\treturn this.preferredSuperStates[actor.actorId()];\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getCurrentDifficultyLevel = function() {\r\n\t\t\tif(this._currentDifficulty == null){\r\n\t\t\t\tif(ENGINE_SETTINGS.DIFFICULTY_MODS){\r\n\t\t\t\t\tthis._currentDifficulty = ENGINE_SETTINGS.DIFFICULTY_MODS.default;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn this._currentDifficulty;\r\n\t\t}\t\r\n\t\t\r\n\t\tGame_System.prototype.isManualSetDifficulty = function(value) {\r\n\t\t\treturn this._difficultyWasManuallySet;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.clearManualSetDifficulty = function(value) {\r\n\t\t\tthis._difficultyWasManuallySet = false;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.setCurrentDifficultyLevel = function(value) {\r\n\t\t\tthis._difficultyWasManuallySet = true;\r\n\t\t\tthis._currentDifficulty = value;\r\n\t\t}\t\r\n\t\t\r\n\t\tGame_System.prototype.setAutomaticDifficultyLevel = function() {\t\t\t\r\n\t\t\tif(!this._difficultyWasManuallySet ){\r\n\t\t\t\tif(ENGINE_SETTINGS.DIFFICULTY_MODS && ENGINE_SETTINGS.DIFFICULTY_MODS.enabled & 2 && ENGINE_SETTINGS.DIFFICULTY_MODS.autoLevelFunc){\r\n\t\t\t\t\tconst newVal = ENGINE_SETTINGS.DIFFICULTY_MODS.autoLevelFunc();\r\n\t\t\t\t\tif(newVal != null){\r\n\t\t\t\t\t\tthis._currentDifficulty = newVal;\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getMaxUpgradeLevel = function(value) {\r\n\t\t\treturn this._maxUpgradeLevel || 10;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.setMaxUpgradeLevel = function(value) {\r\n\t\t\tthis._maxUpgradeLevel = value;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getMaxPilotStat = function(value) {\r\n\t\t\treturn this._maxPilotStat || 400;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.setMaxPilotStat = function(value) {\r\n\t\t\tthis._maxPilotStat = value;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.setEnemyUpgradeLevelGlobal = function(value) {\r\n\t\t\tthis.globalEnemyUpgradeLevel = value;\r\n\t\t}\t\t\r\n\t\t\r\n\t\tGame_System.prototype.setEnemyUpgradeLevel = function(value) {\r\n\t\t\tthis.enemyUpgradeLevel = value;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getEnemyUpgradeLevel = function() {\r\n\t\t\treturn (this.globalEnemyUpgradeLevel || 0) + (this.enemyUpgradeLevel || 0);\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getMaxPilotAbilities = function() {\r\n\t\t\treturn this._maxPilotAbilities || ENGINE_SETTINGS.DEFAULT_PILOT_ABI_COUNT || 6;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.setMaxPilotAbilities = function(value) {\r\n\t\t\treturn this._maxPilotAbilities  = value;\r\n\t\t}\r\n\t\t\r\n\t\t//note: null is a meaningful return value and indicates the database value should be used as there is no override defined\r\n\t\t//returns the overriding value, NOT whether an override exists. So false=override value == false, true=override value == true\r\n\t\tGame_System.prototype.getPilotAbilityUniqueOverrideValue = function(abilityId) {\r\n\t\t\tif(!this._pilotAbilityUniqueOverrides){\r\n\t\t\t\tthis._pilotAbilityUniqueOverrides = {};\r\n\t\t\t}\r\n\t\t\treturn this._pilotAbilityUniqueOverrides[abilityId];\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.setPilotAbilityUniqueOverrideValue = function(abilityId, state) {\r\n\t\t\tif(!this._pilotAbilityUniqueOverrides){\r\n\t\t\t\tthis._pilotAbilityUniqueOverrides = {};\r\n\t\t\t}\r\n\t\t\tthis._pilotAbilityUniqueOverrides[abilityId] = state;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getPurchasbleAbilities = function() {\r\n\t\t\treturn ENGINE_SETTINGS.PURCHASABLE_ABILITIES.concat((this._additionalPurchasableAbilities || []));\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.addPurchasableAbility = function(id) {\r\n\t\t\tif(!this._additionalPurchasableAbilities){\r\n\t\t\t\tthis._additionalPurchasableAbilities = [];\r\n\t\t\t}\r\n\t\t\tif(this._additionalPurchasableAbilities.indexOf(id) == -1){\r\n\t\t\t\tthis._additionalPurchasableAbilities.push(id);\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\r\n\t\tGame_System.prototype.incrementIndicatorSetting = function() {\r\n\t\t\tif(this.indicatorSetting == null){\r\n\t\t\t\tthis.indicatorSetting = 0;\r\n\t\t\t}\r\n\t\t\tthis.indicatorSetting++;\r\n\t\t\tif(this.indicatorSetting > 2){\r\n\t\t\t\tthis.indicatorSetting = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tGame_System.prototype.getIndicatorSetting = function() {\r\n\t\t\tif(this.indicatorSetting == null){\r\n\t\t\t\tthis.indicatorSetting = 0;\r\n\t\t\t}\r\n\t\t\treturn this.indicatorSetting;\r\n\t\t}\r\n\t}\r\n\n\n//# sourceURL=webpack://src/./js/SRW_Core/GameSystem.js?");

/***/ }),

/***/ "./js/SRW Core/GameTemp.js":
/*!*********************************!*\
  !*** ./js/SRW Core/GameTemp.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n\t/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n\t\tpatches: patches,\r\n\t}); \r\n\t\r\n\tfunction patches(){};\r\n\t\r\n\tpatches.apply = function(){\r\n\t\t//====================================================================\r\n\t\t// ●Game_Temp\r\n\t\t//====================================================================\r\n\t\t//初期化処理\r\n\t\tvar _SRPG_Game_Temp_initialize = Game_Temp.prototype.initialize;\r\n\t\tGame_Temp.prototype.initialize = function() {\r\n\t\t\t_SRPG_Game_Temp_initialize.call(this);\r\n\r\n\t\t\tthis._MoveList = [];\r\n\t\t\tthis._ResetMoveList = false;\r\n\t\t\tthis._SrpgDistance = 0;\r\n\t\t\tthis._SrpgSpecialRange = true;\r\n\t\t\tthis._ActiveEvent = null;\r\n\t\t\tthis._TargetEvent = null;\r\n\t\t\tthis._OriginalPos = [];\r\n\t\t\tthis._SrpgEventList = [];\r\n\t\t\tthis._autoMoveDestinationValid = false;\r\n\t\t\tthis._autoMoveDestinationX = -1;\r\n\t\t\tthis._autoMoveDestinationY = -1;\r\n\t\t\tthis._srpgLoadFlag = false;\r\n\t\t\tthis._srpgActorEquipFlag = false;\r\n\t\t\tthis._SrpgTurnEndFlag = false;\r\n\t\t\tthis._srpgBestSearchFlag = false;\r\n\t\t\tthis._srpgBestSearchRoute = [null, []];\r\n\t\t\tthis._srpgPriorityTarget = null;\r\n\t\t\tthis._mapButtons = {};\r\n\t\t\tthis.summariesTimeout = 0;\r\n\t\t\tthis.objURLS = {};\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\tGame_Temp.prototype.registerObjURL = function(url) {\r\n\t\t\tthis.objURLS[url] = true;\r\n\t\t}\r\n\t\t\r\n\t\tGame_Temp.prototype.revokeObjectURLs = function(url) {\r\n\t\t\tfor(let url in this.objURLS){\r\n\t\t\t\twindow.URL.revokeObjectURL(url);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_Temp.prototype.isEnemyTurn = function() {\r\n\t\t\treturn $gameSystem.isBattlePhase() === 'AI_phase';\r\n\t\t}\r\n\t\t\r\n\t\tGame_Temp.prototype.killMenu = function(id) {\r\n\t\t\tif(!this.killMenus){\r\n\t\t\t\tthis.killMenus = {};\r\n\t\t\t}\r\n\t\t\tthis.killMenus[id] = true;\r\n\t\t}\r\n\t\t\r\n\t\tGame_Temp.prototype.setMapButton = function(button) {\r\n\t\t\tthis._mapButtons[button] = true;\r\n\t\t};\r\n\t\t\r\n\t\tGame_Temp.prototype.clearMapButton = function(button) {\r\n\t\t\tdelete this._mapButtons[button];\r\n\t\t};\r\n\t\t\r\n\t\tGame_Temp.prototype.mapButtonClicked = function(button) {\r\n\t\t\treturn this._mapButtons[button];\r\n\t\t};\r\n\r\n\t\t//移動可能な座標のリストを返す(移動範囲表示で使用)\r\n\t\tGame_Temp.prototype.moveList = function() {\r\n\t\t\treturn this._MoveList;\r\n\t\t};\r\n\r\n\t\t//移動可能な座標のリストに追加する\r\n\t\tGame_Temp.prototype.pushMoveList = function(xy) {\r\n\t\t\tthis._MoveList.push(xy);\r\n\t\t};\r\n\r\n\t\t//座標リストにデータが入っているか返す\r\n\t\tGame_Temp.prototype.isMoveListValid = function() {\r\n\t\t\treturn this._MoveList.length > 0;\r\n\t\t};\r\n\r\n\t\t//攻撃可能な座標のリストを返す(攻撃射程表示で使用)\r\n\t\tGame_Temp.prototype.rangeList = function() {\r\n\t\t\treturn this._RangeList;\r\n\t\t};\r\n\r\n\t\t//攻撃可能な座標のリストに追加する\r\n\t\tGame_Temp.prototype.pushRangeList = function(xy) {\r\n\t\t\tthis._RangeList.push(xy);\r\n\t\t};\r\n\r\n\t\t//移動範囲の配列に射程範囲の配列を結合する\r\n\t\tGame_Temp.prototype.pushRangeListToMoveList = function(array) {\r\n\t\t\tArray.prototype.push.apply(this._MoveList, this._RangeList);\r\n\t\t};\r\n\r\n\t\t//射程範囲から最低射程を除く\r\n\t\tGame_Temp.prototype.minRangeAdapt = function(oriX, oriY, minRange) {\r\n\t\t\tvar newList = [];\r\n\t\t\tfor (var i = 0; i < this._RangeList.length; i++) {\r\n\t\t\t\tvar x = this._RangeList[i][0];\r\n\t\t\t\tvar y = this._RangeList[i][1];\r\n\t\t\t\tvar dis = Math.abs(x - oriX) + Math.abs(y - oriY);\r\n\t\t\t\tif (dis >= minRange) {\r\n\t\t\t\t\tnewList.push(this._RangeList[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._RangeList = [];\r\n\t\t\tthis._RangeList = newList;\r\n\t\t};\r\n\r\n\t\t//移動範囲を初期化する\r\n\t\tGame_Temp.prototype.clearMoveTable = function() {\r\n\t\t\t$gameTemp.validTiles = {};\r\n\t\t\t$gameSystem.highlightedTiles = [];\r\n\t\t\t$gameSystem.highlightedActionTiles = [];\r\n\t\t\t$gameSystem.highlightsRefreshed = true;\r\n\t\t\t$gameTemp.disableHighlightGlow = false;\r\n\t\t\t\r\n\t\t\t$gameSystem.showMoveEdge = false;\r\n\t\t\t$gameSystem.moveEdgeHighlightsRefreshed = true;\r\n\t\t\t$gameSystem.moveEdgeHighlights = [];\r\n\t\t\r\n\t\t\tthis._MoveList = [];\t\t\r\n\t\t};\r\n\r\n\t\t//移動範囲のスプライト消去のフラグを返す\r\n\t\tGame_Temp.prototype.resetMoveList = function() {\r\n\t\t\treturn this._ResetMoveList;\r\n\t\t};\r\n\r\n\t\t//移動範囲のスプライト消去のフラグを設定する\r\n\t\tGame_Temp.prototype.setResetMoveList = function(flag) {\r\n\t\t\tthis._ResetMoveList = flag;\r\n\t\t};\r\n\r\n\t\t//攻撃ユニットと対象の距離を返す\r\n\t\tGame_Temp.prototype.SrpgDistance = function() {\r\n\t\t\treturn this._SrpgDistance;\r\n\t\t};\r\n\r\n\t\t//攻撃ユニットと対象の距離を設定する\r\n\t\tGame_Temp.prototype.setSrpgDistance = function(val) {\r\n\t\t\tthis._SrpgDistance = val;\r\n\t\t};\r\n\r\n\t\t//攻撃ユニットと対象が特殊射程内にいるかを返す\r\n\t\tGame_Temp.prototype.SrpgSpecialRange = function() {\r\n\t\t\treturn this._SrpgSpecialRange;\r\n\t\t};\r\n\r\n\t\t//攻撃ユニットと対象が特殊射程内にいるかを設定する\r\n\t\tGame_Temp.prototype.setSrpgSpecialRange = function(val) {\r\n\t\t\tthis._SrpgSpecialRange = val;\r\n\t\t};\r\n\r\n\t\t//アクティブイベントの設定\r\n\t\tGame_Temp.prototype.activeEvent = function() {\r\n\t\t\treturn this._ActiveEvent;\r\n\t\t};\r\n\r\n\t\tGame_Temp.prototype.setActiveEvent = function(event) {\r\n\t\t\tthis._ActiveEvent = event;\r\n\t\t\t$gameVariables.setValue(_activeEventID, event.eventId());\r\n\t\t\tvar actor = $gameSystem.EventToUnit(event.eventId())[1];\r\n\t\t\tif(actor.isActor()){\r\n\t\t\t\t$gameVariables.setValue(_currentActorId, actor.actorId());\r\n\t\t\t} else {\r\n\t\t\t\t$gameVariables.setValue(_currentEnemyId, actor.enemyId());\r\n\t\t\t}\t\t\r\n\t\t};\r\n\r\n\t\tGame_Temp.prototype.clearActiveEvent = function() {\r\n\t\t\tthis._ActiveEvent = null;\r\n\t\t\t$gameVariables.setValue(_activeEventID, 0);\r\n\t\t};\r\n\r\n\t\t//行動対象となるユニットの設定\r\n\t\tGame_Temp.prototype.targetEvent = function() {\r\n\t\t\treturn this._TargetEvent;\r\n\t\t};\r\n\r\n\t\tGame_Temp.prototype.setTargetEvent = function(event) {\r\n\t\t\tthis._TargetEvent = event;\r\n\t\t\tif (this._TargetEvent) {\r\n\t\t\t\t$gameVariables.setValue(_targetEventID, event.eventId());\r\n\t\t\t\tvar actor = $gameSystem.EventToUnit(event.eventId())[1];\r\n\t\t\t\tif(actor.isActor()){\r\n\t\t\t\t\t$gameVariables.setValue(_currentActorId, actor.actorId());\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$gameVariables.setValue(_currentEnemyId, actor.enemyId());\r\n\t\t\t\t}\t\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tGame_Temp.prototype.clearTargetEvent = function() {\r\n\t\t\tthis._TargetEvent = null;\r\n\t\t\t$gameVariables.setValue(_targetEventID, 0);\r\n\t\t};\r\n\r\n\t\t//アクティブイベントの座標を返す\r\n\t\tGame_Temp.prototype.originalPos = function() {\r\n\t\t\treturn this._OriginalPos;\r\n\t\t};\r\n\r\n\t\t//アクティブイベントの座標を記録する\r\n\t\tGame_Temp.prototype.reserveOriginalPos = function(x, y) {\r\n\t\t\tthis._OriginalPos = [x, y];\r\n\t\t};\r\n\r\n\t\t//実行待ちイベントリストを確認する\r\n\t\tGame_Temp.prototype.isSrpgEventList = function() {\r\n\t\t\treturn this._SrpgEventList.length > 0;\r\n\t\t};\r\n\r\n\t\t//実行待ちイベントリストを追加する\r\n\t\tGame_Temp.prototype.pushSrpgEventList = function(event) {\r\n\t\t\tthis._SrpgEventList.push(event);\r\n\t\t};\r\n\r\n\t\t//実行待ちイベントリストの先頭を取得し、前に詰める\r\n\t\tGame_Temp.prototype.shiftSrpgEventList = function() {\r\n\t\t\tvar event = this._SrpgEventList[0];\r\n\t\t\tthis._SrpgEventList.shift();\r\n\t\t\treturn event;\r\n\t\t};\r\n\r\n\t\t//プレイヤーの自動移動フラグを返す\r\n\t\tGame_Temp.prototype.isAutoMoveDestinationValid = function() {\r\n\t\t\treturn this._autoMoveDestinationValid;\r\n\t\t};\r\n\r\n\t\t//プレイヤーの自動移動フラグを設定する\r\n\t\tGame_Temp.prototype.setAutoMoveDestinationValid = function(val) {\r\n\t\t\tthis._autoMoveDestinationValid = val;\r\n\t\t};\r\n\r\n\t\t//プレイヤーの自動移動先を返す(X)\r\n\t\tGame_Temp.prototype.autoMoveDestinationX = function() {\r\n\t\t\treturn this._autoMoveDestinationX;\r\n\t\t};\r\n\r\n\t\t//プレイヤーの自動移動先を返す(Y)\r\n\t\tGame_Temp.prototype.autoMoveDestinationY = function() {\r\n\t\t\treturn this._autoMoveDestinationY;\r\n\t\t};\r\n\r\n\t\t//プレイヤーの自動移動先を設定する\r\n\t\tGame_Temp.prototype.setAutoMoveDestination = function(x, y) {\r\n\t\t\tthis._autoMoveDestinationX = x;\r\n\t\t\tthis._autoMoveDestinationY = y;\r\n\t\t};\r\n\r\n\t\t//戦闘中にロードしたフラグを返す\r\n\t\tGame_Temp.prototype.isSrpgLoadFlag = function() {\r\n\t\t\treturn this._srpgLoadFlag;\r\n\t\t};\r\n\r\n\t\t//戦闘中にロードしたフラグを設定する\r\n\t\tGame_Temp.prototype.setSrpgLoadFlag = function(flag) {\r\n\t\t\tthis._srpgLoadFlag = flag;\r\n\t\t};\r\n\r\n\t\t//ターン終了フラグを返す\r\n\t\tGame_Temp.prototype.isTurnEndFlag = function() {\r\n\t\t\treturn this._SrpgTurnEndFlag;\r\n\t\t};\r\n\r\n\t\t//ターン終了フラグを変更する\r\n\t\tGame_Temp.prototype.setTurnEndFlag = function(flag) {\r\n\t\t\tthis._SrpgTurnEndFlag = flag;\r\n\t\t};\r\n\r\n\t\t//オート戦闘フラグを返す\r\n\t\tGame_Temp.prototype.isAutoBattleFlag = function() {\r\n\t\t\treturn this._SrpgAutoBattleFlag;\r\n\t\t};\r\n\r\n\t\t//オート戦闘フラグを変更する\r\n\t\tGame_Temp.prototype.setAutoBattleFlag = function(flag) {\r\n\t\t\tthis._SrpgAutoBattleFlag = flag;\r\n\t\t};\r\n\r\n\t\t//アクターコマンドから装備を呼び出したフラグを返す\r\n\t\tGame_Temp.prototype.isSrpgActorEquipFlag = function() {\r\n\t\t\treturn this._srpgActorEquipFlag;\r\n\t\t};\r\n\r\n\t\t//アクターコマンドから装備を呼び出したフラグを設定する\r\n\t\tGame_Temp.prototype.setSrpgActorEquipFlag = function(flag) {\r\n\t\t\tthis._srpgActorEquipFlag = flag;\r\n\t\t};\r\n\r\n\t\t//探索用移動範囲計算時の実行フラグを返す\r\n\t\tGame_Temp.prototype.isSrpgBestSearchFlag = function() {\r\n\t\t\treturn this._srpgBestSearchFlag;\r\n\t\t};\r\n\r\n\t\t//探索用移動範囲計算時の実行フラグを設定する\r\n\t\tGame_Temp.prototype.setSrpgBestSearchFlag = function(flag) {\r\n\t\t\tthis._srpgBestSearchFlag = flag;\r\n\t\t};\r\n\r\n\t\t//探索用移動範囲計算時の最適ルートを返す\r\n\t\tGame_Temp.prototype.isSrpgBestSearchRoute = function() {\r\n\t\t\treturn this._srpgBestSearchRoute;\r\n\t\t};\r\n\r\n\t\t//探索用移動範囲計算時の最適ルートを設定する\r\n\t\tGame_Temp.prototype.setSrpgBestSearchRoute = function(array) {\r\n\t\t\tthis._srpgBestSearchRoute = array;\r\n\t\t};\r\n\r\n\t\t//優先ターゲットを返す\r\n\t\tGame_Temp.prototype.isSrpgPriorityTarget = function() {\r\n\t\t\treturn this._srpgPriorityTarget;\r\n\t\t};\r\n\r\n\t\t//優先ターゲットを設定する\r\n\t\tGame_Temp.prototype.setSrpgPriorityTarget = function(event) {\r\n\t\t\tthis._srpgPriorityTarget = event;\r\n\t\t};\r\n\t\t\r\n\t\tGame_Temp.prototype.isMapTarget = function(eventId) {\r\n\t\t\tvar result = false;\r\n\t\t\tif(this.currentMapTargets){\r\n\t\t\t\tfor(var i = 0; i < this.currentMapTargets.length; i++){\r\n\t\t\t\t\tif($statCalc.getReferenceEvent(this.currentMapTargets[i]).eventId() == eventId){\r\n\t\t\t\t\t\tresult = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t};\r\n\t\t\r\n\t\tGame_Temp.prototype.isSpiritTarget = function(eventId) {\r\n\t\t\tvar result = false;\r\n\t\t\tif($gameTemp.currentTargetingSpirit){\r\n\t\t\t\tvar spiritDef = $spiritManager.getSpiritDef($gameTemp.currentTargetingSpirit.idx);\r\n\t\t\t\tvar actorInfo = $gameSystem.EventToUnit(eventId);\r\n\t\t\t\tif(actorInfo){\r\n\t\t\t\t\tvar target = actorInfo[1];\r\n\t\t\t\t\tif (($gameSystem.isFriendly(target, \"player\") && spiritDef.targetType == \"ally\") || (!$gameSystem.isFriendly(target, \"player\")  && spiritDef.targetType == \"enemy\")) {\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(spiritDef.singleTargetEnabledHandler(target)){\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t};\r\n\t\t\r\n\t\tGame_Temp.prototype.updatePlayerSpriteVisibility = function(id) {\r\n\t\t\tif($gameSystem.isSRPGMode()){\r\n\t\t\t\tif(this.upperPlayerSprite){\r\n\t\t\t\t\tthis.upperPlayerSprite.show();\r\n\t\t\t\t}\r\n\t\t\t\tif(this.lowerPlayerSprite){\r\n\t\t\t\t\tthis.lowerPlayerSprite.hide();\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif(this.upperPlayerSprite){\r\n\t\t\t\t\tthis.upperPlayerSprite.hide();\r\n\t\t\t\t}\r\n\t\t\t\tif(this.lowerPlayerSprite){\r\n\t\t\t\t\tthis.lowerPlayerSprite.show();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_Temp.prototype.clearActiveShip = function() {\r\n\t\t\tif(this.activeShip){\r\n\t\t\t\tdelete this.activeShip.event.isActiveShip;\r\n\t\t\t}\r\n\t\t\tthis.activeShip = null;\r\n\t\t}\r\n\t\t\r\n\t\tGame_Temp.prototype.invalidateSRPGStructures = function() {\r\n\t\t\tthis.SRPGStructuresAllocated = false;\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tGame_Temp.prototype.allocateSRPGMapStructures = function() {\t\t\t\r\n\t\t\tif($dataMap){\r\n\t\t\t\tthis._moveBudgets = [];\r\n\t\t\t\tthis._moveBudgetFreshCtr = 0;\r\n\t\t\t\t\r\n\t\t\t\tlet terrainDefs = $terrainTypeManager.getDefinitions();\r\n\t\t\t\tfor(let i = 0; i < $gameMap.width(); i++){\r\n\t\t\t\t\tthis._moveBudgets[i] = [];\r\n\t\t\t\t\tfor(let j = 0; j < $gameMap.height(); j++){\r\n\t\t\t\t\t\tthis._moveBudgets[i][j] = {\r\n\t\t\t\t\t\t\tfreshFor: this._moveBudgetFreshCtr,\r\n\t\t\t\t\t\t\tbudgets: {}\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor(let terrainId in terrainDefs){\r\n\t\t\t\t\t\t\tthis._moveBudgets[i][j].budgets[terrainId] = {\r\n\t\t\t\t\t\t\t\tstandard: 0,\r\n\t\t\t\t\t\t\t\textra: 0\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t}\t\t\t\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tGame_Temp.prototype.resetMoveBudgets = function() {\r\n\t\t\tif($dataMap && this._moveBudgets){\r\n\t\t\t\tlet terrainDefs = $terrainTypeManager.getDefinitions();\r\n\t\t\t\tfor(let i = 0; i < $gameMap.width(); i++){\r\n\t\t\t\t\tfor(let j = 0; j < $gameMap.width(); j++){\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor(let terrainId in terrainDefs){\r\n\t\t\t\t\t\t\tthis._moveBudgets[i][j][terrainId].standard = 0;\r\n\t\t\t\t\t\t\tthis._moveBudgets[i][j][terrainId].extra = 0;\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_Temp.prototype.getMoveBudgetsRef = function() {\r\n\t\t\treturn {freshFor: ++this._moveBudgetFreshCtr, budgets: this._moveBudgets};\r\n\t\t}\r\n\t}\n\n//# sourceURL=webpack://src/./js/SRW_Core/GameTemp.js?");

/***/ }),

/***/ "./js/SRW Core/Map.js":
/*!****************************!*\
  !*** ./js/SRW Core/Map.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n\t/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n\t\tpatches: patches,\r\n\t}); \r\n\t\r\n\tfunction patches(){};\r\n\t\r\n\tpatches.apply = function(){\r\n\t\t//====================================================================\r\n\t\t// ●Game_Map\r\n\t\t//====================================================================\r\n\t\t//アクター・エネミーデータに合わせてグラフィックを変更する\r\n\t\t\r\n\t\tvar Game_Map_prototype_initialize = Game_Map.prototype.initialize;\r\n\t\tGame_Map.prototype.initialize = function() {\r\n\t\t\tGame_Map_prototype_initialize.call(this);\t\t\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tGame_Map.prototype.setupEvents = function() {\r\n\t\t\tthis._events = [];\r\n\t\t\tfor (var i = 0; i < $dataMap.events.length; i++) {\r\n\t\t\t\tif ($dataMap.events[i]) {\r\n\t\t\t\t\tthis._events[i] = new Game_Event(this._mapId, i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._startOfDynamicEvents = this._events.length;\r\n\t\t\tfor (var i = this._startOfDynamicEvents; i < this._startOfDynamicEvents + 100; i++) {\r\n\t\t\t\tvar event = new Game_Event(this._mapId, i);\r\n\t\t\t\tevent.isUnused = true;\r\n\t\t\t\tthis._events[i] = event;\t\t\t\r\n\t\t\t}\r\n\t\t\tthis._commonEvents = this.parallelCommonEvents().map(function(commonEvent) {\r\n\t\t\t\treturn new Game_CommonEvent(commonEvent.id);\r\n\t\t\t});\r\n\t\t\tthis.refreshTileEvents();\r\n\t\t};\r\n\t\t\r\n\t\tGame_Map.prototype.clearRegionTiles = function(id) {\r\n\t\t\tthis._regionTilesLookup = null;\r\n\t\t}\r\n\t\t\r\n\t\tGame_Map.prototype.getRegionTiles = function(id) {\r\n\t\t\tif(!this._regionTilesLookup){\r\n\t\t\t\tthis._regionTilesLookup = {};\r\n\t\t\t\tfor(var i = 0; i < this.width(); i++){\r\n\t\t\t\t\tfor(var j = 0; j < this.height(); j++){\r\n\t\t\t\t\t\tvar region = this.regionId(i, j);\r\n\t\t\t\t\t\tif(!this._regionTilesLookup[region]){\r\n\t\t\t\t\t\t\tthis._regionTilesLookup[region] = [];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis._regionTilesLookup[region].push({x: i, y: j});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn this._regionTilesLookup[id] || [];\r\n\t\t}\r\n\t\t\r\n\t\tGame_Map.prototype.initSRWTileProperties = function() {\r\n\t\t\tvar _this = this;\r\n\t\t\tif(!this._SRWTileProperties){\r\n\t\t\t\tthis._SRWTileProperties = {};\r\n\t\t\t}\r\n\t\t\tif(!this._SRWTileProperties[this._tilesetId]){\r\n\t\t\t\tvar regex = new RegExp(\"srwTileAttributes([0-9]+)\");\r\n\t\t\t\tvar rangeRegex = new RegExp(\"srwTileAttributes([0-9]+)\\-([0-9]+)\");\r\n\t\t\t\tthis._SRWTileProperties[this._tilesetId] = {};\r\n\t\t\t\tvar tileSetMeta = $dataTilesets[this._tilesetId].meta;\r\n\t\t\t\tObject.keys(tileSetMeta).forEach(function(key){\t\t\t\t\r\n\t\t\t\t\tvar matches = key.match(regex);\r\n\t\t\t\t\tif(matches && matches.length){\r\n\t\t\t\t\t\t_this._SRWTileProperties[_this._tilesetId][matches[1]] = tileSetMeta[key];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar matches = key.match(rangeRegex);\r\n\t\t\t\t\tif(matches && matches.length){\r\n\t\t\t\t\t\tvar startId = matches[1];\r\n\t\t\t\t\t\tvar endId = matches[2];\r\n\t\t\t\t\t\tfor(var i = startId; i <= endId; i++){\r\n\t\t\t\t\t\t\t_this._SRWTileProperties[_this._tilesetId][i] = tileSetMeta[key];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tGame_Map.prototype.getTileProperties = function(tileCoords) {\r\n\t\t\tif(this._SRWTileProperties && this._SRWTileProperties[this._tilesetId]){\r\n\t\t\t\t\r\n\t\t\t\tconst checkedLayers = [3,2,1,0];\r\n\t\t\t\tconst checkedTileIds = [];\r\n\t\t\t\t\r\n\t\t\t\tfor(let layerId of checkedLayers){\r\n\t\t\t\t\tcheckedTileIds.push($gameMap.tileId(tileCoords.x, tileCoords.y, layerId));\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tfor(let tileId of checkedTileIds){\r\n\t\t\t\t\tif(this._SRWTileProperties[this._tilesetId][tileId] != null){\r\n\t\t\t\t\t\treturn this._SRWTileProperties[this._tilesetId][tileId];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\treturn null;\r\n\t\t\t}\t\t\r\n\t\t}\r\n\t\t\r\n\t\tGame_Map.prototype.getTilePropertiesAsObject = function(tileCoords) {\r\n\t\t\tvar result;\r\n\t\t\tvar string = this.getTileProperties(tileCoords);\r\n\t\t\tif(string){\r\n\t\t\t\tvar parts = string.split(\",\");\t\t\r\n\t\t\t\tresult = {\r\n\t\t\t\t\tdefense: String(parts[0]).trim()*1,\r\n\t\t\t\t\tevasion: String(parts[1]).trim()*1,\r\n\t\t\t\t\thp_regen: String(parts[2]).trim()*1,\r\n\t\t\t\t\ten_regen: String(parts[3]).trim()*1\r\n\t\t\t\t};\r\n\t\t\t}\t\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\tGame_Map.prototype.requestDynamicEvent = function() {\r\n\t\t\tvar event;\r\n\t\t\tvar ctr = this._startOfDynamicEvents;\r\n\t\t\twhile(ctr < this._events.length && !event){\r\n\t\t\t\tif(this._events[ctr].isUnused){\r\n\t\t\t\t\tevent = this._events[ctr];\r\n\t\t\t\t}\r\n\t\t\t\tctr++;\r\n\t\t\t}\r\n\t\t\tif(event){\r\n\t\t\t\tevent.isUnused = false;\r\n\t\t\t}\t\t\r\n\t\t\treturn event;\r\n\t\t};\t\r\n\t\t\r\n\t\tGame_Map.prototype.setEventImages = function() {\r\n\t\t\tthis.events().forEach(function(event) {\r\n\t\t\t\tevent.refreshImage();\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t//最大のイベントＩＤを返す\r\n\t\tGame_Map.prototype.isMaxEventId = function() {\r\n\t\t\tvar maxId = 0;\r\n\t\t\tthis.events().forEach(function(event) {\r\n\t\t\t\tif (event.eventId() > maxId) {\r\n\t\t\t\t\tmaxId = event.eventId();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn maxId;\r\n\t\t};\r\n\r\n\t\t//イベントの実行順序を変更する（実行待ちのイベントを優先する）\r\n\t\tvar _SRPG_Game_Map_setupStartingMapEvent = Game_Map.prototype.setupStartingMapEvent;\r\n\t\tGame_Map.prototype.setupStartingMapEvent = function() {\r\n\t\t\tif ($gameTemp.isSrpgEventList()) {\r\n\t\t\t\tvar event = $gameTemp.shiftSrpgEventList();\r\n\t\t\t\tif (event.isStarting()) {\r\n\t\t\t\t\tevent.clearStartingFlag();\r\n\t\t\t\t\tthis._interpreter.setup(event.list(), event.eventId());\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn _SRPG_Game_Map_setupStartingMapEvent.call(this);\r\n\t\t};\r\n\t\t\r\n\t\tGame_Map.prototype.SRPGTerrainTag = function(x, y) {\r\n\t\t\tif (this.isValid(x, y)) {\r\n\t\t\t\tvar flags = this.tilesetFlags();\r\n\t\t\t\tvar tiles = this.layeredTiles(x, y);\r\n\t\t\t\tfor (var i = 0; i < tiles.length; i++) {\r\n\t\t\t\t\tvar tag = flags[tiles[i]] >> 12;\r\n\t\t\t\t\tif (tiles[i] != 0) {\r\n\t\t\t\t\t\treturn tag;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn 0;\r\n\t\t};\r\n\t\t\r\n\t\tGame_Map.prototype.hasStarTile = function(x, y) {\r\n\t\t\tvar flags = this.tilesetFlags();\r\n\t\t\tvar tile = this.allTiles(x, y)[0];\r\n\t\t\tif(tile != 0){\r\n\t\t\t\tvar flag = flags[tile];\r\n\t\t\t\tif ((flag & 0x10) !== 0){\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} \r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t};\r\n\t\t\t\r\n\t\t\t\r\n\t\tGame_Map.prototype.applyDragDistances = function(distanceX, distanceY) {\r\n\t\t\tvar lastX = this._displayX;\r\n\t\t\tthis._displayX += distanceX;\r\n\t\t\tif(this._displayX < -5){\r\n\t\t\t\tthis._displayX = -5;\r\n\t\t\t}\r\n\t\t\tif(this._displayX > this.width() + 5 - this.screenTileX()){\r\n\t\t\t\tthis._displayX = this.width() + 5 - this.screenTileX();\r\n\t\t\t}\r\n\t\t\tthis._parallaxX += Math.floor(this._displayX - lastX);\r\n\t\t\t\r\n\t\t\tvar lastY = this._displayY;\r\n\t\t\tthis._displayY += distanceY;\r\n\t\t\tif(this._displayY < -5){\r\n\t\t\t\tthis._displayY = -5;\r\n\t\t\t}\r\n\t\t\tif(this._displayY > this.height() + 5 - this.screenTileY()){\r\n\t\t\t\tthis._displayY = this.height() + 5 - this.screenTileY();\r\n\t\t\t}\r\n\t\t\tthis._parallaxY += Math.floor(this._displayY - lastY);\r\n\t\t\t\r\n\t\t\tthis.setDisplayPos(this._displayX, this._displayY);\r\n\t\t};\t\r\n\t\t\r\n\t\tGame_Map.prototype.getDisplayPos = function() {\r\n\t\t\treturn{\r\n\t\t\t\tx: this._displayX,\r\n\t\t\t\ty: this._displayY\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tGame_Map.prototype.isEventOnScreen = function(eventId) {\r\n\t\t\tvar mapDispCoords = this.getDisplayPos();\r\n\t\t\tlet width = SceneManager._screenWidth / this.tileWidth();\r\n\t\t\tlet height = SceneManager._screenHeight / this.tileHeight();\r\n\t\t\tlet bounds = {\r\n\t\t\t\ttop: mapDispCoords.y,\r\n\t\t\t\tleft: mapDispCoords.x,\r\n\t\t\t\tbottom: mapDispCoords.y + height,\r\n\t\t\t\tright: mapDispCoords.x + width\r\n\t\t\t}\r\n\t\t\tlet result = false;\r\n\t\t\tlet event = $gameMap.event(eventId);\r\n\t\t\tif(event){\r\n\t\t\t\tlet x = event.posX();\r\n\t\t\t\tlet y = event.posY();\r\n\t\t\t\tresult = x >= bounds.left && x <= bounds.right && y >= bounds.top && y <= bounds.bottom;\r\n\t\t\t}\r\n\t\t\tconsole.log(\"Is event on screen: \" + result)\r\n\t\t\treturn result;\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t//====================================================================\r\n\t// ●Spriteset_Map\r\n\t//====================================================================\r\n\r\n\t\tfunction UpperTilemap(){\r\n\t\t\tthis.initialize.apply(this, arguments);\r\n\t\t}\r\n\t\t\r\n\t\tUpperTilemap.prototype = Object.create(Tilemap.prototype);\r\n\t\tUpperTilemap.prototype.constructor = UpperTilemap;\r\n\t\t\r\n\t\tUpperTilemap.prototype._paintTiles = function(startX, startY, x, y) {\r\n\t\t\tvar tableEdgeVirtualId = 10000;\r\n\t\t\tvar mx = startX + x;\r\n\t\t\tvar my = startY + y;\r\n\t\t\tvar dx = (mx * this._tileWidth).mod(this._layerWidth);\r\n\t\t\tvar dy = (my * this._tileHeight).mod(this._layerHeight);\r\n\t\t\tvar lx = dx / this._tileWidth;\r\n\t\t\tvar ly = dy / this._tileHeight;\r\n\t\t\tvar tileId0 = this._readMapData(mx, my, 0);\r\n\t\t\tvar tileId1 = this._readMapData(mx, my, 1);\r\n\t\t\tvar tileId2 = this._readMapData(mx, my, 2);\r\n\t\t\tvar tileId3 = this._readMapData(mx, my, 3);\r\n\t\t\tvar shadowBits = this._readMapData(mx, my, 4);\r\n\t\t\tvar upperTileId1 = this._readMapData(mx, my - 1, 1);\r\n\t\t\tvar lowerTiles = [];\r\n\t\t\tvar upperTiles = [];\r\n\r\n\t\t\tif (this._isHigherTile(tileId0)) {\r\n\t\t\t\tupperTiles.push(tileId0);\r\n\t\t\t}\r\n\t\t\tif (this._isHigherTile(tileId1)) {\r\n\t\t\t\tupperTiles.push(tileId1);\r\n\t\t\t} \r\n\r\n\t\t\tif (this._isOverpassPosition(mx, my)) {\r\n\t\t\t\tupperTiles.push(tileId2);\r\n\t\t\t\tupperTiles.push(tileId3);\r\n\t\t\t} else {\r\n\t\t\t\tif (this._isHigherTile(tileId2)) {\r\n\t\t\t\t\tupperTiles.push(tileId2);\r\n\t\t\t\t} \r\n\t\t\t\tif (this._isHigherTile(tileId3)) {\r\n\t\t\t\t\tupperTiles.push(tileId3);\r\n\t\t\t\t} \r\n\t\t\t}\r\n\t\t\tvar lastUpperTiles = this._readLastTiles(1, lx, ly);\r\n\t\t\tif (!upperTiles.equals(lastUpperTiles)) {\r\n\t\t\t\tthis._upperBitmap.clearRect(dx, dy, this._tileWidth, this._tileHeight);\r\n\t\t\t\tfor (var j = 0; j < upperTiles.length; j++) {\r\n\t\t\t\t\tthis._drawTile(this._upperBitmap, upperTiles[j], dx, dy);\r\n\t\t\t\t}\r\n\t\t\t\tthis._writeLastTiles(1, lx, ly, upperTiles);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tfunction UpperShaderTileMap(){\r\n\t\t\tTilemap.apply(this, arguments);\r\n\t\t\tthis.roundPixels = true;\r\n\t\t}\r\n\t\t\r\n\t\tUpperShaderTileMap.prototype = Object.create(ShaderTilemap.prototype);\r\n\t\tUpperShaderTileMap.prototype.constructor = UpperShaderTileMap;\r\n\t\t\r\n\t\tUpperShaderTileMap.prototype._paintTiles = function(startX, startY, x, y) {\r\n\t\t\tvar mx = startX + x;\r\n\t\t\tvar my = startY + y;\r\n\t\t\tvar dx = x * this._tileWidth, dy = y * this._tileHeight;\r\n\t\t\tvar tileId0 = this._readMapData(mx, my, 0);\r\n\t\t\tvar tileId1 = this._readMapData(mx, my, 1);\r\n\t\t\tvar tileId2 = this._readMapData(mx, my, 2);\r\n\t\t\tvar tileId3 = this._readMapData(mx, my, 3);\r\n\t\t\tvar shadowBits = this._readMapData(mx, my, 4);\r\n\t\t\tvar upperTileId1 = this._readMapData(mx, my - 1, 1);\r\n\t\t\tvar lowerLayer = this.lowerLayer.children[0];\r\n\t\t\tvar upperLayer = this.upperLayer.children[0];\r\n\r\n\t\t\tif (this._isHigherTile(tileId0)) {\r\n\t\t\t\tthis._drawTile(upperLayer, tileId0, dx, dy);\r\n\t\t\t} \r\n\t\t\tif (this._isHigherTile(tileId1)) {\r\n\t\t\t\tthis._drawTile(upperLayer, tileId1, dx, dy);\r\n\t\t\t} \r\n\r\n\t\t\t\r\n\t\t\tif (this._isOverpassPosition(mx, my)) {\r\n\t\t\t\tthis._drawTile(upperLayer, tileId2, dx, dy);\r\n\t\t\t\tthis._drawTile(upperLayer, tileId3, dx, dy);\r\n\t\t\t} else {\r\n\t\t\t\tif (this._isHigherTile(tileId2)) {\r\n\t\t\t\t\tthis._drawTile(upperLayer, tileId2, dx, dy);\r\n\t\t\t\t} \r\n\t\t\t\tif (this._isHigherTile(tileId3)) {\r\n\t\t\t\t\tthis._drawTile(upperLayer, tileId3, dx, dy);\r\n\t\t\t\t} \r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tSpriteset_Map.prototype.createLowerLayer = function() {\r\n\t\t\tSpriteset_Base.prototype.createLowerLayer.call(this);\r\n\t\t\tif(ENGINE_SETTINGS.PLACE_PARALLAX_ABOVE_MAP){\r\n\t\t\t\tthis.createTilemap();\r\n\t\t\t\tthis.createParallax();\r\n\t\t\t} else {\r\n\t\t\t\tthis.createParallax();\r\n\t\t\t\tthis.createTilemap();\r\n\t\t\t}\r\n\t\t\tthis._gridSprite = new Sprite_SrpgGrid();\r\n\t\t\tthis._baseSprite.addChild(this._gridSprite); \r\n\t\t\t\r\n\t\t\tfor(var i = 0; i < 7; i++){\r\n\t\t\t\tthis._baseSprite.addChild(new Sprite_AreaHighlights(\"ability_zone\", i)); \r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis._regionHighlightSprite = new Sprite_AreaHighlights(\"region\");\r\n\t\t\tthis._baseSprite.addChild(this._regionHighlightSprite); \r\n\t\t\t\r\n\t\t\tthis._highlightSprite = new Sprite_AreaHighlights(\"0\");\r\n\t\t\tthis._baseSprite.addChild(this._highlightSprite); \r\n\t\t\t\r\n\t\t\tthis._moveEdgeHighlightSprite = new Sprite_AreaHighlights(\"move_edge\");\r\n\t\t\tthis._baseSprite.addChild(this._moveEdgeHighlightSprite);\r\n\t\t\t\r\n\t\t\tthis._highlightSpriteLayer1 = new Sprite_AreaHighlights(\"1\");\r\n\t\t\tthis._baseSprite.addChild(this._highlightSpriteLayer1); \r\n\t\t\t\r\n\t\t\r\n\t\t\tthis.createCharacters();\r\n\t\t\tthis.createShadow();\r\n\t\t\tthis.createDestination();\r\n\t\t\tthis.createWeather();\r\n\t\t};\r\n\t\t\r\n\t\tSpriteset_Map.prototype.createUpperLayer = function() {\r\n\t\t\t\r\n\t\t\t/*if($gameTemp.intermissionPending){\r\n\t\t\t\treturn;\r\n\t\t\t}*/\r\n\t\t\t\r\n\t\t\tif (Graphics.isWebGL()) {\r\n\t\t\t\tthis._upperTilemap = new UpperShaderTileMap();\r\n\t\t\t} else {\r\n\t\t\t\tthis._upperTilemap = new UpperTilemap();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(!(typeof UltraMode7 != \"undefined\") || !UltraMode7.isActive()){\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tthis._upperTilemap.tileWidth = $gameMap.tileWidth();\r\n\t\t\t\tthis._upperTilemap.tileHeight = $gameMap.tileHeight();\r\n\t\t\t\tthis._upperTilemap.setData($gameMap.width(), $gameMap.height(), $gameMap.data());\r\n\t\t\t\tthis._upperTilemap.horizontalWrap = $gameMap.isLoopHorizontal();\r\n\t\t\t\tthis._upperTilemap.verticalWrap = $gameMap.isLoopVertical();\r\n\t\t\t\r\n\t\t\t\tthis._tileset = $gameMap.tileset();\r\n\t\t\t\tif (this._tileset) {\r\n\t\t\t\t\tvar tilesetNames = this._tileset.tilesetNames;\r\n\t\t\t\t\tfor (var i = 0; i < tilesetNames.length; i++) {\r\n\t\t\t\t\t\tthis._upperTilemap.bitmaps[i] = ImageManager.loadTileset(tilesetNames[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar newTilesetFlags = $gameMap.tilesetFlags();\t\t\t\r\n\t\t\t\t\tthis._upperTilemap.refreshTileset();\r\n\t\t\t\t\tif (!this._tilemap.flags.equals(newTilesetFlags)) {\t\t\t\t\r\n\t\t\t\t\t\tthis._upperTilemap.refresh();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis._upperTilemap.flags = newTilesetFlags;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\tthis._baseSprite.addChild(this._upperTilemap);\r\n\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\tthis._reticuleSprite = new Sprite_Reticule();\r\n\t\t\tthis.addCharacterToBaseSprite(this._reticuleSprite);\r\n\t\t\t/*\r\n\t\t\tthis._regionHighlightSprite = new Sprite_AreaHighlights(\"region\");\r\n\t\t\tthis._baseSprite.addChild(this._regionHighlightSprite); \r\n\t\t\t\r\n\t\t\tthis._highlightSprite = new Sprite_AreaHighlights(\"0\");\r\n\t\t\tthis._baseSprite.addChild(this._highlightSprite); \r\n\t\t\t\r\n\t\t\tthis._moveEdgeHighlightSprite = new Sprite_AreaHighlights(\"move_edge\");\r\n\t\t\tthis._baseSprite.addChild(this._moveEdgeHighlightSprite);\r\n\t\t\t\r\n\t\t\tthis._highlightSpriteLayer1 = new Sprite_AreaHighlights(\"1\");\r\n\t\t\tthis._baseSprite.addChild(this._highlightSpriteLayer1); \r\n\t\t\t*/\r\n\t\t\t\r\n\t\t\tfor (var i = 0; i < this.shipTurnEndSprites.length; i++) {\r\n\t\t\t\tthis.addCharacterToBaseSprite(this.shipTurnEndSprites[i]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor (var i = 0; i < this.actorTurnEndSprites.length; i++) {\r\n\t\t\t\tthis.addCharacterToBaseSprite(this.actorTurnEndSprites[i]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tthis.createDefendIndicator(event._eventId, event);\r\n\t\t\t\tthis.createAttackIndicator(event._eventId, event);\r\n\t\t\t\tthis.createAttributeIndicator(event._eventId, event);\r\n\t\t\t\tthis.createWillIndicator(event._eventId, event);\r\n\t\t\t\tthis.createHealthBar(event._eventId, event);\r\n\t\t\t\t\r\n\t\t\t\tthis.createTwinIndicator(event._eventId, event);\r\n\t\t\t\tthis.createExplosionSprite(event._eventId, event);\r\n\t\t\t\tthis.createAppearSprite(event._eventId, event);\r\n\t\t\t\tthis.createDisappearSprite(event._eventId, event);\t\r\n\t\t\t}, this);\r\n\t\t\t\r\n\t\t\tvar sprite = new Sprite_Player($gamePlayer);\r\n\t\t\t$gameTemp.upperPlayerSprite = sprite;\r\n\t\t\tthis.addCharacterToBaseSprite(sprite);   \r\n\t\t\t\r\n\t\t\tvar cloudScrollSize = 20;\r\n\t\t\tvar cloudScrollFrequency = 1;\r\n\t\t\tif((typeof UltraMode7 != \"undefined\") && UltraMode7.isActive()){\t\r\n\t\t\t\tlet rowHead;\r\n\t\t\t\tfor(var j = cloudScrollFrequency * -1; j < $gameMap.height() + 10; j+=cloudScrollFrequency){\t\t//$\t\t\t\t\r\n\t\t\t\t\tvar sprite = new Sprite_CloudScroll(Math.floor($gameMap.width() / 2) * -1 + ((j%2) * Math.floor($gameMap.width() / 4)), j + cloudScrollFrequency);\r\n\t\t\t\t\trowHead = sprite;\t\t\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tsprite.move(0, 0, Math.floor(($gameMap.width() * 2)) * $gameMap.tileWidth(), 10 * $gameMap.tileHeight());\r\n\t\t\t\t\tthis.addCharacterToBaseSprite(sprite);   \t\t\t\t\t\t\t\t\r\n\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t} else {\r\n\t\t\t\tlet rowHead;\r\n\t\t\t\tfor(var i = 0; i < $gameMap.width() + cloudScrollSize; i+=cloudScrollSize){\t\t//$\t\t\t\t\r\n\t\t\t\t\tfor(var j = 0; j < $gameMap.height() + cloudScrollSize; j+=cloudScrollSize){\t\t//$\t\t\t\t\r\n\t\t\t\t\t\tvar sprite = new Sprite_CloudScroll(i, j);\r\n\t\t\t\t\t\trowHead = sprite;\t\t\t\t\t\t\t\r\n\r\n\t\t\t\t\t\tsprite.move(0, 0, cloudScrollSize * $gameMap.tileHeight(), cloudScrollSize * $gameMap.tileHeight());\r\n\t\t\t\t\t\tthis.addCharacterToBaseSprite(sprite);   \t\t\t\t\t\t\t\t\r\n\t\t\t\t\t}\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.createPictures();\r\n\t\t\tthis.createTimer();\r\n\t\t\tthis.createScreenSprites();\t\t\t\t\r\n\t\t\t\t\t\t\t\t\r\n\t\t\r\n\t\t\tif(!(typeof UltraMode7 != \"undefined\") || !UltraMode7.isActive()){\r\n\t\t\t\tconst borderSize = 960;\r\n\t\t\t\t//bottom\r\n\t\t\t\tthis.addCharacterToBaseSprite(new Sprite_MapBorder(0, $gameMap.height(), ($gameMap.width() + 10) * $gameMap.tileWidth(), borderSize));\t\r\n\t\t\t\t//right\r\n\t\t\t\tthis.addCharacterToBaseSprite(new Sprite_MapBorder($gameMap.width(), 0, borderSize, ($gameMap.height() + 10) * $gameMap.tileHeight()));\t\t\r\n\t\t\t\t//left\r\n\t\t\t\tthis.addCharacterToBaseSprite(new Sprite_MapBorder((borderSize / $gameMap.tileWidth()) * -1, 0, borderSize, ($gameMap.height() * $gameMap.tileHeight()) + 2 * borderSize));\t\r\n\t\t\t\t//top\r\n\t\t\t\tthis.addCharacterToBaseSprite(new Sprite_MapBorder((borderSize / $gameMap.tileWidth()) * -1, (borderSize / $gameMap.tileHeight()) * -1, ($gameMap.width() * $gameMap.tileWidth()) + 2 * borderSize, borderSize));\t\r\n\t\t\t}\r\n\r\n\t\t\t$gameTemp.updatePlayerSpriteVisibility();\r\n\t\t};\r\n\t\t\r\n\t\tSpriteset_Map.prototype.updateTilemap = function() {\r\n\t\t\tthis._tilemap.origin.x = $gameMap.displayX() * $gameMap.tileWidth();\r\n\t\t\tthis._tilemap.origin.y = $gameMap.displayY() * $gameMap.tileHeight();\r\n\t\t\t\r\n\t\t\tif(this._upperTilemap){\r\n\t\t\t\tthis._upperTilemap.origin.x = $gameMap.displayX() * $gameMap.tileWidth();\r\n\t\t\t\tthis._upperTilemap.origin.y = $gameMap.displayY() * $gameMap.tileHeight();\r\n\t\t\t}\t\t\t\r\n\t\t};\r\n\r\n\t\tvar _SRPG_Spriteset_Map_createTilemap = Spriteset_Map.prototype.createTilemap;\r\n\t\tSpriteset_Map.prototype.createTilemap = function() {\t\t\r\n\t\t\t_SRPG_Spriteset_Map_createTilemap.call(this);\r\n\t\t\tif($gameTemp.intermissionPending){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t  \r\n\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\r\n\t\t};\r\n\t\t\r\n\t\tSpriteset_Map.prototype.addCharacterToBaseSprite = function(sprite) {\r\n\t\t\tvar child = this._baseSprite.addChild(sprite);\r\n\t\t\tthis._characterLayerSprites.push(child);\r\n\t\t}\r\n\t\t\r\n\t\tSpriteset_Map.prototype.reloadCharacters = function() {\r\n\t\t\tvar _this = this;\r\n\t\t\tthis._characterLayerSprites.forEach(function(child){\r\n\t\t\t\t_this._baseSprite.removeChild(child);\r\n\t\t\t});\r\n\t\t\tthis.createCharacters();\r\n\t\t}\r\n\t\t\r\n\t\tvar _SRPG_Spriteset_Map_createTilemap_createCharacters = Spriteset_Map.prototype.createCharacters;\r\n\t\tSpriteset_Map.prototype.createCharacters = function() {\r\n\t\t\tvar _this  = this;\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t//_SRPG_Spriteset_Map_createTilemap_createCharacters.call(this);\r\n\t\t\tthis.shipTurnEndSprites = [];\r\n\t\t\tthis.actorTurnEndSprites = [];\r\n\t\t\tthis._characterLayerSprites = [];\r\n\t\t\tthis._bshadowSprites = {};\r\n\t\t\tthis._explosionSprites = {};\r\n\t\t\tthis._appearSprites = {};\r\n\t\t\tthis._disappearSprites = {};\r\n\t\t\tthis._willIndicators = {};\r\n\t\t\tthis._HPIndicators = {};\r\n\t\t\tthis._attributeIndicators = {};\r\n\t\t\tthis._defendIndicators = {};\r\n\t\t\tthis._attackIndicators = {};\r\n\t\t\tthis._twinIndicators = {};\r\n\t\t\tvar ships = [];\r\n\t\t\tvar actors = [];\r\n\t\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tthis.createBShadow(event._eventId,event);\t\t\t\r\n\t\t\t}, this);\r\n\t\t\t\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif(event.isType() == \"ship\" || event.isType() == \"ship_event\"){\r\n\t\t\t\t\tships.push(new Sprite_Character(event));\t\t\r\n\t\t\t\t\t_this.shipTurnEndSprites.push(new Sprite());\r\n\t\t\t\t} else {\r\n\t\t\t\t\tactors.push(new Sprite_Character(event));\r\n\t\t\t\t\t_this.actorTurnEndSprites.push(new Sprite());\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}, this);\r\n\t\t\t\r\n\t\t\tfor(var i = 0; i < actors.length; i++){\t\t\t\r\n\t\t\t\tactors[i].setTurnEnd(this.actorTurnEndSprites[i]);\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor(var i = 0; i < ships.length; i++){\r\n\t\t\t\tships[i].setTurnEnd(this.shipTurnEndSprites[i]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis._characterSprites = ships.concat(actors);\r\n\t\t\tfor (var i = 0; i < this._characterSprites.length; i++) {\r\n\t\t\t\tthis._characterSprites[i].isSorted = true;\r\n\t\t\t\tthis.addCharacterToBaseSprite(this._characterSprites[i]);\r\n\t\t\t}\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tthis._characterLayerSprites = [];\r\n\t\t\t/*if($gameTemp.intermissionPending){\r\n\t\t\t\treturn;\r\n\t\t\t}*/\r\n\t\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t//.concat(shipTurnEndSprites) .concat(actorTurnEndSprites)\r\n\t\t\t$gameMap.vehicles().forEach(function(vehicle) {\r\n\t\t\t\tthis._characterSprites.push(new Sprite_Character(vehicle));\r\n\t\t\t}, this);\r\n\t\t\t$gamePlayer.followers().reverseEach(function(follower) {\r\n\t\t\t\tthis._characterSprites.push(new Sprite_Character(follower));\r\n\t\t\t}, this);\r\n\t\t\tvar sprite = new Sprite_Player($gamePlayer);\r\n\t\t\t$gameTemp.lowerPlayerSprite = sprite;\r\n\t\t\tthis.addCharacterToBaseSprite(sprite);  \t\t \r\n\t\t\t\r\n\t\t\tfor (var i = 0; i < this._characterSprites.length; i++) {\r\n\t\t\t\tthis.addCharacterToBaseSprite(this._characterSprites[i]);\r\n\t\t\t}\t\t   \t\r\n\t\t};\r\n\t\t\r\n\t\tSpriteset_Map.prototype.createExplosionSprite = function(id,character) {\r\n\t\t\tif (!character) return;\r\n\t\t\tif (!this._explosionSprites[id]) {\r\n\t\t\t\tthis._explosionSprites[id] = new Sprite_Destroyed(character);\r\n\t\t\t\tthis.addCharacterToBaseSprite(this._explosionSprites[id]);\r\n\t\t\t\tcharacter._explosionSprite = true;\r\n\t\t\t};\r\n\t\t};\r\n\t\t\r\n\t\tSpriteset_Map.prototype.createAppearSprite = function(id,character) {\r\n\t\t\tif (!character) return;\r\n\t\t\tif (!this._appearSprites[id]) {\r\n\t\t\t\tthis._appearSprites[id] = new Sprite_Appear(character);\r\n\t\t\t\tthis.addCharacterToBaseSprite(this._appearSprites[id]);\r\n\t\t\t\tcharacter._appearSprite = true;\r\n\t\t\t};\r\n\t\t};\r\n\t\t\r\n\t\tSpriteset_Map.prototype.createDisappearSprite = function(id,character) {\r\n\t\t\tif (!character) return;\r\n\t\t\tif (!this._disappearSprites[id]) {\r\n\t\t\t\tthis._disappearSprites[id] = new Sprite_Disappear(character);\r\n\t\t\t\tthis.addCharacterToBaseSprite(this._disappearSprites[id]);\r\n\t\t\t\tcharacter._disappearSprite = true;\r\n\t\t\t};\r\n\t\t};\r\n\t\t\r\n\t\tSpriteset_Map.prototype.createBShadow = function(id,character) {\r\n\t\t\tif (!character) return;\r\n\t\t\tif (!this._bshadowSprites[id]) {\r\n\t\t\t\tthis._bshadowSprites[id] = new Sprite_BasicShadow(character);\r\n\t\t\t\tthis.addCharacterToBaseSprite(this._bshadowSprites[id]);\r\n\t\t\t\tcharacter._shadSprite = true;\r\n\t\t\t};\r\n\t\t};\r\n\t\t\r\n\t\tSpriteset_Map.prototype.createWillIndicator = function(id,character) {\r\n\t\t\tif (!character) return;\r\n\t\t\tif (!this._willIndicators[id]) {\r\n\t\t\t\tthis._willIndicators[id] = new Sprite_WillIndicator(character);\r\n\t\t\t\tthis.addCharacterToBaseSprite(this._willIndicators[id]);\r\n\t\t\t\tcharacter._willIndicator = true;\r\n\t\t\t};\r\n\t\t};\t\r\n\r\n\t\tSpriteset_Map.prototype.createHealthBar = function(id,character) {\r\n\t\t\tif (!character) return;\r\n\t\t\tif (!this._HPIndicators[id]) {\r\n\t\t\t\tthis._HPIndicators[id] = new Sprite_HealthBar(character);\r\n\t\t\t\tthis.addCharacterToBaseSprite(this._HPIndicators[id]);\r\n\t\t\t\tcharacter._hpIndicator = true;\r\n\t\t\t};\r\n\t\t};\t\t\t\r\n\t\t\r\n\t\tSpriteset_Map.prototype.createAttributeIndicator = function(id,character) {\r\n\t\t\tif (!character) return;\r\n\t\t\tif (!this._attributeIndicators[id]) {\r\n\t\t\t\tthis._attributeIndicators[id] = new Sprite_AttributeIndicator(character);\r\n\t\t\t\tthis.addCharacterToBaseSprite(this._attributeIndicators[id]);\r\n\t\t\t\tcharacter._attributeIndicator = true;\r\n\t\t\t};\r\n\t\t};\r\n\t\t\r\n\t\tSpriteset_Map.prototype.createDefendIndicator = function(id,character) {\r\n\t\t\tif (!character) return;\r\n\t\t\tif (!this._defendIndicators[id]) {\r\n\t\t\t\tthis._defendIndicators[id] = new Sprite_DefendIndicator(character);\r\n\t\t\t\tthis.addCharacterToBaseSprite(this._defendIndicators[id]);\r\n\t\t\t\tcharacter._defendIndicator = true;\r\n\t\t\t};\r\n\t\t};\t\r\n\t\t\r\n\t\tSpriteset_Map.prototype.createAttackIndicator = function(id,character) {\r\n\t\t\tif (!character) return;\r\n\t\t\tif (!this._attackIndicators[id]) {\r\n\t\t\t\tthis._attackIndicators[id] = new Sprite_AttackIndicator(character);\r\n\t\t\t\tthis.addCharacterToBaseSprite(this._attackIndicators[id]);\r\n\t\t\t\tcharacter._defendIndicator = true;\r\n\t\t\t};\r\n\t\t};\r\n\t\t\r\n\t\tSpriteset_Map.prototype.createTwinIndicator = function(id,character) {\r\n\t\t\tif (!character) return;\r\n\t\t\tif (!this._twinIndicators[id]) {\r\n\t\t\t\tthis._twinIndicators[id] = new Sprite_TwinIndicator(character);\r\n\t\t\t\tthis.addCharacterToBaseSprite(this._twinIndicators[id]);\r\n\t\t\t\tcharacter._twinIndicator = true;\r\n\t\t\t};\r\n\t\t};\t\r\n\r\n\t\tvar _SRPG_Spriteset_Map_update = Spriteset_Map.prototype.update;\r\n\t\tSpriteset_Map.prototype.update = function() {\r\n\t\t\tif($gameTemp.intermissionPending){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t_SRPG_Spriteset_Map_update.call(this);\r\n\t\t\tif($gameTemp.tempSprites){\r\n\t\t\t\twhile($gameTemp.tempSprites.length){\r\n\t\t\t\t\tvar sprite = $gameTemp.tempSprites.pop();\r\n\t\t\t\t\tthis._baseSprite.addChild(sprite);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\r\n\t}\n\n//# sourceURL=webpack://src/./js/SRW_Core/Map.js?");

/***/ }),

/***/ "./js/SRW Core/PluginCommands.js":
/*!***************************************!*\
  !*** ./js/SRW Core/PluginCommands.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n\t/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n\t\tpatches: patches,\r\n\t}); \r\n\t\r\n\tfunction patches(){};\r\n\t\r\n\tpatches.apply = function(){\r\n\t\tvar _Game_Interpreter_pluginCommand =\r\n            Game_Interpreter.prototype.pluginCommand;\r\n\t\tGame_Interpreter.prototype.pluginCommand = function(command, args) {\r\n\t\t\t_Game_Interpreter_pluginCommand.call(this, command, args);\r\n\t\t\t\r\n\t\t\tfunction getLogContext(){\r\n\t\t\t\treturn command + \" \" + args.join(\" \");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfunction resolveDeployedActorId(actorId){\r\n\t\t\t\tvar originalId = actorId;\r\n\t\t\t\tvar parts = actorId.match(/\\<(.*)\\>/);\t\r\n\t\t\t\tif(parts && parts.length > 1){\r\n\t\t\t\t\tactorId = $gameVariables.value(parts[1]);\r\n\t\t\t\t}\r\n\t\t\t\tvar event = $statCalc.getReferenceEvent($gameActors.actor(actorId));\r\n\t\t\t\tif(!event){\r\n\t\t\t\t\tthrow \"Attempted to use an undeployed actor(id: \"+originalId+\", resolved id: \"+actorId+\") in a command\";\r\n\t\t\t\t}\r\n\t\t\t\treturn actorId;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\ttry {\t\t\t\t\r\n\t\t\t\tif (command === 'SRPGBattle') {\r\n\t\t\t\t\tswitch (args[0]) {\r\n\t\t\t\t\tcase 'Start':\r\n\t\t\t\t\t\t$gameSystem.startSRPG();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'End':\r\n\t\t\t\t\t\t$gameSystem.endSRPG();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (command === 'Intermission') {\r\n\t\t\t\t\tswitch (args[0]) {\r\n\t\t\t\t\tcase 'Start':\r\n\t\t\t\t\t\t$gameSystem.startIntermission();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'End':\r\n\t\t\t\t\t\t$gameSystem.endIntermission();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'assignUnit') {\r\n\t\t\t\t\tconst actor = $gameActors.actor(args[0]);\r\n\t\t\t\t\tif(!actor){\r\n\t\t\t\t\t\tthrow \"Invalid actor \"+args[0]+\" for assignUnit command.\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(isNaN(args[1] * 1) || args[1] * 1 < 0){\r\n\t\t\t\t\t\tthrow \"Invalid mech \"+args[1]+\" for assignUnit command.\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif((args[3] * 1) && !(args[2] * 1)){\r\n\t\t\t\t\t\tunbindMechPilots(args[1] * 1);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tactor._classId = args[1] * 1;\r\n\t\t\t\t\tactor.isSubPilot = !!(args[2] * 1);\r\n\t\t\t\t\t//actor._intermissionClassId = args[1] * 1; \r\n\t\t\t\t\tif(actor.isSubPilot){\r\n\t\t\t\t\t\t$gameSystem.overwritePilotFallbackInfo(actor);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tlet actionsResult = $statCalc.applyDeployActions(args[0], args[1], true);\r\n\t\t\t\t\t\tif(!actionsResult){\r\n\t\t\t\t\t\t\t$gameSystem.overwritePilotFallbackInfo(actor);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfunction unbindMechPilots(mechId){\r\n\t\t\t\t\tif(mechId > 0){\r\n\t\t\t\t\t\tconst targetMech = $statCalc.getMechData(mechId, true);\r\n\t\t\t\t\t\ttargetMech.subPilots = [];\r\n\t\t\t\t\t\t$statCalc.storeMechData(targetMech);\r\n\t\t\t\t\t\t$gameSystem.overwriteMechFallbackInfo(args[0] * 1, targetMech.subPilots);\r\n\t\t\t\t\t\tfor(const actor of $gameActors._data){\r\n\t\t\t\t\t\t\tif(actor && actor._classId == mechId){\r\n\t\t\t\t\t\t\t\tactor._classId = 0;\r\n\t\t\t\t\t\t\t\t$gameSystem.overwritePilotFallbackInfo(actor);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'unbindMechPilots') {\r\n\t\t\t\t\tconst mechId = args[0] * 1;\r\n\t\t\t\t\tunbindMechPilots(mechId);\t\t\t\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'UnlockUnit') {\r\n\t\t\t\t\t$SRWSaveManager.setUnitUnlocked(args[0]);\r\n\t\t\t\t}\r\n\t\t\t\tif (command === 'unlockUnit') {\r\n\t\t\t\t\t$SRWSaveManager.setUnitUnlocked(args[0]);\r\n\t\t\t\t}\r\n\t\t\t\tif (command === 'lockUnit') {\r\n\t\t\t\t\t$SRWSaveManager.setUnitLocked(args[0]);\r\n\t\t\t\t}\r\n\t\t\t\tif (command === 'LockUnit') {\r\n\t\t\t\t\t$SRWSaveManager.setUnitLocked(args[0]);\r\n\t\t\t\t}\r\n\t\t\t\tif (command === 'SetLevel') {\r\n\t\t\t\t\t$SRWSaveManager.setPilotLevel(args[0], args[1]);\r\n\t\t\t\t}\r\n\t\t\t\tif (command === 'setLevel') {\r\n\t\t\t\t\t$SRWSaveManager.setPilotLevel(args[0], args[1]);\r\n\t\t\t\t}\r\n\t\t\t\tif (command === 'addKills') {\r\n\t\t\t\t\t$SRWSaveManager.addKills(args[0], args[1]);\r\n\t\t\t\t}\t\t\r\n\t\t\t\tif (command === 'AddKills') {\r\n\t\t\t\t\t$SRWSaveManager.addKills(args[0], args[1]);\r\n\t\t\t\t}\t\r\n\t\t\t\tif (command === 'addPP') {\r\n\t\t\t\t\t$SRWSaveManager.addPP(args[0], args[1]);\r\n\t\t\t\t}\r\n\t\t\t\tif (command === 'addExp') {\r\n\t\t\t\t\t$SRWSaveManager.addExp(args[0], args[1]);\r\n\t\t\t\t}\r\n\t\t\t\tif (command === 'setStageSong') {\r\n\t\t\t\t\t$gameSystem.currentStageSong  = args[0];\r\n\t\t\t\t}\t\r\n\t\t\t\tif (command === 'setSpecialTheme') {\r\n\t\t\t\t\t$songManager.setSpecialTheme(args[0]);\r\n\t\t\t\t}\t\r\n\t\t\t\tif (command === 'clearSpecialTheme') {\r\n\t\t\t\t\t$songManager.clearSpecialTheme();\r\n\t\t\t\t}\t\t\t\r\n\t\t\t\tif (command === 'addItem') {\r\n\t\t\t\t\t$inventoryManager.addItem(args[0]);\r\n\t\t\t\t}\t\r\n\t\t\t\tif (command === 'addAllItems') {            \r\n\t\t\t\t\tfor(var i = 0; i < $itemEffectManager.getDefinitionCount(); i++){\r\n\t\t\t\t\t\t$inventoryManager.addItem(i);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (command === 'removeItem') {\r\n\t\t\t\t\t$inventoryManager.removeItem(args[0]);\r\n\t\t\t\t}\t\r\n\t\t\t\tif (command === 'addItemToHolder') {\r\n\t\t\t\t\t$inventoryManager.addItemHolder(args[0], args[1], args[2]);\r\n\t\t\t\t}\r\n\t\t\t\tif (command === 'removeItemFromHolder') {\r\n\t\t\t\t\t$inventoryManager.removeItemHolder(args[0], args[1]);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'addEquipable') {\r\n\t\t\t\t\t$equipablesManager.addItem(args[0]);\r\n\t\t\t\t}\t\t\t\r\n\t\t\t\tif (command === 'addEquipableToHolder') {\r\n\t\t\t\t\t$equipablesManager.addItemHolder(args[0], args[1], args[2]);\r\n\t\t\t\t}\r\n\t\t\t\tif (command === 'removeEquipableFromHolder') {\r\n\t\t\t\t\t$equipablesManager.removeItemHolder(args[0], args[1]);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setFreeEventCam') {\r\n\t\t\t\t\t$gameTemp.freeEventCam = true;\r\n\t\t\t\t}\r\n\t\t\t\tif (command === 'clearFreeEventCam') {\r\n\t\t\t\t\t$gameTemp.freeEventCam = false;\r\n\t\t\t\t}\r\n\t\t\t\tif (command === 'focusActor') {\r\n\t\t\t\t\tvar actorId = args[0];\r\n\t\t\t\t\tvar parts = actorId.match(/\\<(.*)\\>/);\t\r\n\t\t\t\t\tif(parts && parts.length > 1){\r\n\t\t\t\t\t\tactorId = $gameVariables.value(parts[1]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar event = $statCalc.getReferenceEvent($gameActors.actor(actorId));\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(event){\r\n\t\t\t\t\t\tvar battlerArray = $gameSystem.EventToUnit(event.eventId());\r\n\t\t\t\t\t\tif(battlerArray){\r\n\t\t\t\t\t\t\tlet referenceActor = battlerArray[1];\t\t\t\t\t\r\n\t\t\t\t\t\t\tif($statCalc.isBoarded(referenceActor)){\r\n\t\t\t\t\t\t\t\t$statCalc.iterateAllActors(\"actor\", function(actor, iEvent){\r\n\t\t\t\t\t\t\t\t\tif($statCalc.hasBoardedUnit(actor, referenceActor)){\r\n\t\t\t\t\t\t\t\t\t\tevent = iEvent;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(event && !event.isErased()){\r\n\t\t\t\t\t\tapplyFocus();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tevent = null;//allow default event to be used if direct reference event is erased\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!event && $gameSystem.defaultFocusActor){\r\n\t\t\t\t\t\tvar event = $statCalc.getReferenceEvent($gameActors.actor($gameSystem.defaultFocusActor));\r\n\t\t\t\t\t\tif(event){\r\n\t\t\t\t\t\t\tapplyFocus();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} \r\n\t\t\t\t\tif(!event && $gameSystem.defaultFocusEvent){\r\n\t\t\t\t\t\tvar event = $gameMap.event($gameSystem.defaultFocusEvent);\r\n\t\t\t\t\t\tif(event){\r\n\t\t\t\t\t\t\tapplyFocus();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tfunction applyFocus(){\t\t\t\t\t\r\n\t\t\t\t\t\tvar freeCam = false;\r\n\t\t\t\t\t\tif(args[1] != null){\r\n\t\t\t\t\t\t\tfreeCam = args[1] * 1;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tfreeCam = $gameTemp.freeEventCam || false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t$gamePlayer.locate(event.posX(), event.posY(), freeCam);\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (command === 'focusEvent') {\r\n\t\t\t\t\tvar event = $gameMap.event(args[0]);\r\n\t\t\t\t\tif(event && !event.isErased()){\r\n\t\t\t\t\t\tvar freeCam = false;\r\n\t\t\t\t\t\tif(args[1] != null){\r\n\t\t\t\t\t\t\tfreeCam = args[1] * 1;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tfreeCam = $gameTemp.freeEventCam || false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t$gamePlayer.locate(event.posX(), event.posY(), freeCam);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (command === 'focusEnemy') {\r\n\t\t\t\t\tvar enemyId = args[0];\r\n\t\t\t\t\tvar targetEvent;\r\n\t\t\t\t\t$statCalc.iterateAllActors(\"enemy\", function(actor, event){\r\n\t\t\t\t\t\tif(actor && event && !event.isErased() && actor.enemyId() == enemyId){\r\n\t\t\t\t\t\t\ttargetEvent = event;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(targetEvent && !targetEvent.isErased()){\r\n\t\t\t\t\t\tvar freeCam = false;\r\n\t\t\t\t\t\tif(args[1] != null){\r\n\t\t\t\t\t\t\tfreeCam = args[1] * 1;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tfreeCam = $gameTemp.freeEventCam || false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t$gamePlayer.locate(targetEvent.posX(), targetEvent.posY(), freeCam);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'clearDeployInfo') {\r\n\t\t\t\t\tvar deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\t\t\tdeployInfo.count = 0;\r\n\t\t\t\t\tdeployInfo.assigned = {};\r\n\t\t\t\t\tdeployInfo.assignedSub = {};\r\n\t\t\t\t\tdeployInfo.assignedShips = {};\r\n\t\t\t\t\tdeployInfo.lockedSlots = {};\r\n\t\t\t\t\tdeployInfo.lockedShipSlots = {};\r\n\t\t\t\t\tdeployInfo.doNotDeploySlots = {};\r\n\t\t\t\t\tdeployInfo.minDeployCount = 1;\r\n\t\t\t\t\t$gameSystem.setDeployInfo(deployInfo);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'populateDeployList') {\r\n\t\t\t\t\t$gameSystem.updateAvailableUnits();\r\n\t\t\t\t\t$gameSystem.constructDeployList();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setMinDeployCount') {\r\n\t\t\t\t\tvar deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\t\t\tdeployInfo.minDeployCount = args[0];\r\n\t\t\t\t\t$gameSystem.setDeployInfo(deployInfo);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setDeployCount') {\r\n\t\t\t\t\tvar deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\t\t\tdeployInfo.count = args[0];\r\n\t\t\t\t\t$gameSystem.setDeployInfo(deployInfo);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setShipDeployCount') {\r\n\t\t\t\t\tvar deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\t\t\tdeployInfo.shipCount = args[0];\r\n\t\t\t\t\t$gameSystem.setDeployInfo(deployInfo);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'assignSlot') {\r\n\t\t\t\t\t//args[0]: slot \r\n\t\t\t\t\t//args[1]: actor id\r\n\t\t\t\t\tvar deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\t\t\tvar actorId = args[1];\r\n\t\t\t\t\tvar parts = actorId.match(/\\<(.*)\\>/);\t\r\n\t\t\t\t\tif(parts && parts.length > 1){\r\n\t\t\t\t\t\tactorId = $gameVariables.value(parts[1]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdeployInfo.assigned[args[0]] = actorId;\r\n\t\t\t\t\t$gameSystem.setDeployInfo(deployInfo);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'assignSlotFromMech') {\r\n\t\t\t\t\t//args[0]: slot \r\n\t\t\t\t\t//args[1]: actor id\r\n\t\t\t\t\tvar deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\t\t\t//always check the fallback info to avoid issues with pilots who were switched around during the stage\r\n\t\t\t\t\tvar actorId = String($statCalc.getCurrentPilot(args[1], true, false, false, true).actorId());\r\n\t\t\t\t\tvar parts = actorId.match(/\\<(.*)\\>/);\t\r\n\t\t\t\t\tif(parts && parts.length > 1){\r\n\t\t\t\t\t\tactorId = $gameVariables.value(parts[1]);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdeployInfo.assigned[args[0]] = actorId;\r\n\t\t\t\t\t$gameSystem.setDeployInfo(deployInfo);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'assignSlotSub') {\r\n\t\t\t\t\t//args[0]: slot \r\n\t\t\t\t\t//args[1]: actor id\r\n\t\t\t\t\tvar deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\t\t\tvar actorId = args[1];\r\n\t\t\t\t\tvar parts = actorId.match(/\\<(.*)\\>/);\t\r\n\t\t\t\t\tif(parts && parts.length > 1){\r\n\t\t\t\t\t\tactorId = $gameVariables.value(parts[1]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdeployInfo.assignedSub[args[0]] = actorId;\r\n\t\t\t\t\t$gameSystem.setDeployInfo(deployInfo);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'assignShipSlot') {\r\n\t\t\t\t\t//args[0]: slot \r\n\t\t\t\t\t//args[1]: actor id\r\n\t\t\t\t\tvar deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\t\t\tdeployInfo.assignedShips[args[0]] = args[1];\r\n\t\t\t\t\t$gameSystem.setDeployInfo(deployInfo);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'lockDeploySlot') {\r\n\t\t\t\t\t//prevents a slot from being changed by the player in the menu, assignSlot can still override\r\n\t\t\t\t\tvar deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\t\t\tdeployInfo.lockedSlots[args[0]] = true;\r\n\t\t\t\t\t$gameSystem.setDeployInfo(deployInfo);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'unlockDeploySlot') {\r\n\t\t\t\t\tvar deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\t\t\tdeployInfo.lockedSlots[args[0]] = false;\r\n\t\t\t\t\t$gameSystem.setDeployInfo(deployInfo);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'disableDeploySlot') {\r\n\t\t\t\t\t//prevents a slot from being deployed, should be used in conjuction with a locked slot\r\n\t\t\t\t\tvar deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\t\t\tdeployInfo.doNotDeploySlots[args[0]] = true;\r\n\t\t\t\t\t$gameSystem.setDeployInfo(deployInfo);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'enableDeploySlot') {\r\n\t\t\t\t\tvar deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\t\t\tdeployInfo.doNotDeploySlots[args[0]] = false;\r\n\t\t\t\t\t$gameSystem.setDeployInfo(deployInfo);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'lockShipDeploySlot') {\r\n\t\t\t\t\t//prevents a slot from being changed by the player in the menu, assignSlot can still override\r\n\t\t\t\t\tvar deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\t\t\tdeployInfo.lockedShipSlots[args[0]] = true;\r\n\t\t\t\t\t$gameSystem.setDeployInfo(deployInfo);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'unlockShipDeploySlot') {\r\n\t\t\t\t\tvar deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\t\t\tdeployInfo.lockedShipSlots[args[0]] = false;\r\n\t\t\t\t\t$gameSystem.setDeployInfo(deployInfo);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setSRWBattleBg') {\r\n\t\t\t\t\t$gameSystem.battleBg = args[0];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setSRWBattleParallax1') {\r\n\t\t\t\t\t$gameSystem.battleParallax1 = args[0];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setSRWBattleParallax2') {\r\n\t\t\t\t\t$gameSystem.battleParallax2 = args[0];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setSRWBattleParallax3') {\r\n\t\t\t\t\t$gameSystem.battleParallax3 = args[0];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setSRWBattleParallax3') {\r\n\t\t\t\t\t$gameSystem.battleParallax3 = args[0];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setSRWBattleFloor') {\r\n\t\t\t\t\t$gameSystem.battleFloor = args[0];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setSRWBattleSkybox') {\r\n\t\t\t\t\t$gameSystem.battleSkyBox = args[0];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setSRWSkyBattleBg') {\r\n\t\t\t\t\t$gameSystem.skyBattleBg = args[0];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setSRWSkyBattleParallax1') {\r\n\t\t\t\t\t$gameSystem.skyBattleParallax1 = args[0];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setSRWDefaultBattleEnv') {\r\n\t\t\t\t\t$gameSystem.defaultBattleEnv = args[0];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setDefaultBattleEnv') {\r\n\t\t\t\t\t$gameSystem.defaultBattleEnv = args[0];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setSkyBattleEnv') {\r\n\t\t\t\t\t$gameSystem.superStateBattleEnv[1] = args[0];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setSuperStateBattleEnv') {\r\n\t\t\t\t\t$gameSystem.superStateBattleEnv[args[0]] = args[1];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setRegionBattleEnv') {\r\n\t\t\t\t\t$gameSystem.regionBattleEnv[args[0]] = args[1];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setRegionSkyBattleEnv') {\r\n\t\t\t\t\tif(!$gameSystem.regionSuperStateBattleEnv[1]){\r\n\t\t\t\t\t\t$gameSystem.regionSuperStateBattleEnv[1] = {};\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$gameSystem.regionSuperStateBattleEnv[1][args[0]] = args[1];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setRegionSuperStateBattleEnv') {\r\n\t\t\t\t\tif(!$gameSystem.regionSuperStateBattleEnv[args[0]]){\r\n\t\t\t\t\t\t$gameSystem.regionSuperStateBattleEnv[args[0]] = {};\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$gameSystem.regionSuperStateBattleEnv[args[0]][args[1]] = args[2];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'resetRegionAttributes') {\t\t\t\r\n\t\t\t\t\tif(!$gameSystem.regionAttributes){\r\n\t\t\t\t\t\t$gameSystem.regionAttributes = {};\r\n\t\t\t\t\t}\t\r\n\t\t\t\t\tdelete $gameSystem.regionAttributes[args[0] * 1];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'addRegionAttributes') {\r\n\t\t\t\t\tif(!$gameSystem.regionAttributes){\r\n\t\t\t\t\t\t$gameSystem.regionAttributes = {};\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$gameSystem.regionAttributes[args[0] * 1] = {\r\n\t\t\t\t\t\tdefense: args[1] * 1,\r\n\t\t\t\t\t\tevasion: args[2] * 1,\r\n\t\t\t\t\t\thp_regen: args[3] * 1, \r\n\t\t\t\t\t\ten_regen: args[4] * 1\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'addMapHighlight') {\r\n\t\t\t\t\tif(!$gameSystem.highlightedTiles){\r\n\t\t\t\t\t\t$gameSystem.highlightedTiles = [];\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$gameSystem.highlightedTiles.push({x: args[0], y: args[1], color: args[2] || \"white\"});\r\n\t\t\t\t\t$gameSystem.highlightsRefreshed = true;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'removeMapHighlight') {\r\n\t\t\t\t\tif($gameSystem.highlightedTiles){\r\n\t\t\t\t\t\tvar x = args[0];\r\n\t\t\t\t\t\tvar y = args[1];\r\n\t\t\t\t\t\tvar tmp = [];\r\n\t\t\t\t\t\tfor(var i = 0; i < $gameSystem.highlightedTiles.length; i++){\r\n\t\t\t\t\t\t\tif($gameSystem.highlightedTiles[i].x != x || $gameSystem.highlightedTiles[i].y != y){\r\n\t\t\t\t\t\t\t\ttmp.push($gameSystem.highlightedTiles);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t$gameSystem.highlightedTiles = tmp;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$gameSystem.highlightsRefreshed = true;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'addMapRegionHighlight') {\r\n\t\t\t\t\tif(!$gameSystem.regionHighlights){\r\n\t\t\t\t\t\t$gameSystem.regionHighlights = {};\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$gameSystem.regionHighlights[args[0]] = args[1] || \"white\";\r\n\t\t\t\t\t$gameSystem.regionHighlightsRefreshed = true;\r\n\t\t\t\t\t$gameMap.clearRegionTiles();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'removeMapRegionHighlight') {\r\n\t\t\t\t\tdelete $gameSystem.regionHighlights[args[0]];\r\n\t\t\t\t\t$gameSystem.regionHighlightsRefreshed = true;\r\n\t\t\t\t\t$gameMap.clearRegionTiles();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setEnemyUpgradeLevel') {\r\n\t\t\t\t\t$gameSystem.enemyUpgradeLevel = args[0];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setMechUpgradeLevel') {\r\n\t\t\t\t\tvar mechId = args[0]*1;\r\n\t\t\t\t\tvar targetLevel = args[1]*1;\r\n\t\t\t\t\tvar force = args[2]*1;\r\n\t\t\t\t\tvar mechData = $statCalc.getMechData($dataClasses[mechId], true);\r\n\t\t\t\t\tif(mechData && mechData.id != -1){\r\n\t\t\t\t\t\tvar upgradeLevels = mechData.stats.upgradeLevels;\r\n\t\t\t\t\t\tvar targetUpgrades = [\"maxHP\",\"maxEN\",\"armor\",\"mobility\",\"accuracy\",\"weapons\"];\r\n\t\t\t\t\t\ttargetUpgrades.forEach(function(upgrade){\r\n\t\t\t\t\t\t\tif(upgradeLevels[upgrade] < targetLevel || force){\r\n\t\t\t\t\t\t\t\tupgradeLevels[upgrade] = targetLevel;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$statCalc.storeMechData(mechData);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setPilotRelationship') {\r\n\t\t\t\t\tvar actorId = parseInt(args[0]);\r\n\t\t\t\t\tvar otherActorId = parseInt(args[1]);\r\n\t\t\t\t\tvar effectId = parseInt(args[2]);\r\n\t\t\t\t\tvar level = parseInt( args[3]);\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar actor = $gameActors.actor(actorId);\r\n\t\t\t\t\tif(!actor.SRWStats.pilot.relationships){\r\n\t\t\t\t\t\tactor.SRWStats.pilot.relationships = {};\r\n\t\t\t\t\t}\r\n\t\t\t\t\tactor.SRWStats.pilot.relationships[otherActorId] = {\r\n\t\t\t\t\t\tactor: otherActorId,\r\n\t\t\t\t\t\teffectId: effectId,\r\n\t\t\t\t\t\tlevel: level\r\n\t\t\t\t\t};\r\n\t\t\t\t\t$statCalc.storeActorData(actor);\t\r\n\t\t\t\t}\t\t\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'addPersuadeOption') {\r\n\t\t\t\t\t//args[0] = actorId\r\n\t\t\t\t\t//args[1] = eventId\r\n\t\t\t\t\t//args[2] = varId\r\n\t\t\t\t\tif(!$gameSystem.persuadeOptions[args[0]]){\r\n\t\t\t\t\t\t$gameSystem.persuadeOptions[args[0]] = {};\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$gameSystem.persuadeOptions[args[0]][args[1]] = args[2];\r\n\t\t\t\t}\t\r\n\r\n\t\t\t\tif (command === 'removePersuadeOption') {\r\n\t\t\t\t\t//args[0] = actorId\r\n\t\t\t\t\t//args[1] = eventId\r\n\t\t\t\t\tif($gameSystem.persuadeOptions[args[0]]){\r\n\t\t\t\t\t\tdelete $gameSystem.persuadeOptions[args[0]][args[1]];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'deployShips') {\r\n\t\t\t\t\tvar deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\t\t\tvar deployList = $gameSystem.getShipDeployList();\t\t\t\r\n\t\t\t\t\tvar activeDeployList = [];\r\n\t\t\t\t\tfor(var i = 0; i < deployInfo.shipCount; i++){\r\n\t\t\t\t\t\tactiveDeployList.push(deployList[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$gameSystem.setActiveShipDeployList(activeDeployList);\r\n\t\t\t\t\t$gameSystem.deployShips(args[0] * 1);\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'deployAll') {\r\n\t\t\t\t\tvar deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\t\t\tvar deployList = $gameSystem.getDeployList();\r\n\t\t\t\t\tvar activeDeployList = [];\r\n\t\t\t\t\tfor(var i = 0; i < deployInfo.count; i++){\r\n\t\t\t\t\t\tactiveDeployList.push(deployList[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$gameSystem.setActiveDeployList(activeDeployList);\r\n\t\t\t\t\t$gameSystem.deployActors(args[0] * 1, \"all\");\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'deployAllLocked') {\r\n\t\t\t\t\t$gameSystem.deployActors(args[0] * 1, \"locked\");\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'deployAllUnLocked') {\r\n\t\t\t\t\t$gameSystem.deployActors(args[0] * 1, \"unlocked\");\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'deployActor') {\r\n\t\t\t\t\tvar actorId = args[0];\r\n\t\t\t\t\tvar parts = actorId.match(/\\<(.*)\\>/);\t\r\n\t\t\t\t\tif(parts && parts.length > 1){\r\n\t\t\t\t\t\tactorId = $gameVariables.value(parts[1]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar actor_unit = $gameActors.actor(actorId);\r\n\t\t\t\t\tvar event = $gameMap.event(args[1]);\r\n\t\t\t\t\tif(actor_unit && event){\r\n\t\t\t\t\t\tvar type;\r\n\t\t\t\t\t\tif(event.event().meta.type){\r\n\t\t\t\t\t\t\ttype = event.event().meta.type;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\ttype = \"actor\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tevent.setType(type);\r\n\t\t\t\t\t\t$gameSystem.deployActor(actor_unit, event, args[2] * 1, args[3], true);\r\n\t\t\t\t\t}\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'deployMech') {\r\n\t\t\t\t\tvar mechId = args[0];\r\n\t\t\t\t\tvar actor_unit = $statCalc.getCurrentPilot(mechId, true);\r\n\t\t\t\t\tvar event = $gameMap.event(args[1]);\r\n\t\t\t\t\tif(actor_unit && event){\r\n\t\t\t\t\t\tvar type;\r\n\t\t\t\t\t\tif(event.event().meta.type){\r\n\t\t\t\t\t\t\ttype = event.event().meta.type;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\ttype = \"actor\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tevent.setType(type);\r\n\t\t\t\t\t\t$gameSystem.deployActor(actor_unit, event, args[2] * 1, args[3], true);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'deploySlot') {\r\n\t\t\t\t\tvar slot = args[0];\r\n\t\t\t\t\tvar deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\t\t\tvar actor_id = deployInfo.assigned[slot];\r\n\t\t\t\t\tvar actor_unit = $gameActors.actor(actor_id);\r\n\t\t\t\t\tvar eventId = -1;\r\n\t\t\t\t\tvar ctr = 0;\r\n\t\t\t\t\tvar actorEventCtr = 0;\r\n\t\t\t\t\tvar events = $gameMap.events();\r\n\t\t\t\t\twhile(eventId == -1 && ctr < events.length){\r\n\t\t\t\t\t\tvar event = events[ctr];\r\n\t\t\t\t\t\tif (event.isType() === 'actor'){\r\n\t\t\t\t\t\t\tif(actorEventCtr == slot){\r\n\t\t\t\t\t\t\t\teventId = event.eventId();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tactorEventCtr++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tctr++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(actor_unit && eventId != -1){\r\n\t\t\t\t\t\t$gameSystem.deployActor(actor_unit, $gameMap.event(eventId), args[1], deployInfo.assignedSub[slot]);\r\n\t\t\t\t\t}\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'redeployActor') {\r\n\t\t\t\t\t$gameSystem.redeployActor(args[0], args[1] * 1);\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'storeEventPoint') {\r\n\t\t\t\t\tif(!$gameTemp.storedEventLocations){\r\n\t\t\t\t\t\t$gameTemp.storedEventLocations = {};\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar eventId = args[0] * 1;\r\n\t\t\t\t\tvar event = $gameMap.event(args[0]);\t\t\r\n\t\t\t\t\tif(event){\r\n\t\t\t\t\t\t$gameTemp.storedEventLocations[eventId] = {x: event.posX(), y: event.posY()};\r\n\t\t\t\t\t}\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'moveEventToStoredPoint') {\r\n\t\t\t\t\tif(!$gameTemp.storedEventLocations){\r\n\t\t\t\t\t\t$gameTemp.storedEventLocations = {};\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar eventId = args[0] * 1;\r\n\t\t\t\t\tvar event = $gameMap.event(args[0]);\t\r\n\t\t\t\t\tvar point = $gameTemp.storedEventLocations[eventId];\r\n\t\t\t\t\tif(event && point){\r\n\t\t\t\t\t\tmoveEventToPoint(eventId, point.x, point.y, args[1], args[2], args[3]);\t\t\t\t\t\r\n\t\t\t\t\t}\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tfunction moveEventToPoint(eventId, x, y, follow, asynchronous, ignoreObstacles){\r\n\t\t\t\t\t$gameMap._interpreter.setWaitMode(\"move_to_point\");\r\n\t\t\t\t\tif(!((asynchronous || 0) * 1)){\r\n\t\t\t\t\t\t$gameSystem.setSrpgWaitMoving(true);\r\n\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t\tvar event = $gameMap.event(eventId);\r\n\t\t\t\t\tif(event){\r\n\t\t\t\t\t\tvar position = $statCalc.getAdjacentFreeSpace({x: x, y: y}, null, event.eventId(), {x: event.posX(), y: event.posY()});\r\n\t\t\t\t\t\tvar ignoreObstacles = !((ignoreObstacles || 0) * 1);\r\n\t\t\t\t\t\tevent.srpgMoveToPoint(position, true, ignoreObstacles);\r\n\t\t\t\t\t\tif(follow * 1){\r\n\t\t\t\t\t\t\t$gamePlayer.locate(event.posX(), event.posY());\r\n\t\t\t\t\t\t\t$gameTemp.followMove = true;\r\n\t\t\t\t\t\t}\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'moveEventToPoint') {\r\n\t\t\t\t\tmoveEventToPoint(args[0], args[1], args[2], args[3], args[4], args[5]);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'moveActorToPoint') {\r\n\t\t\t\t\t$gameMap._interpreter.setWaitMode(\"move_to_point\");\r\n\t\t\t\t\tif(!args[4] * 1){\r\n\t\t\t\t\t\t$gameSystem.setSrpgWaitMoving(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar event = $statCalc.getReferenceEvent($gameActors.actor(resolveDeployedActorId(args[0])));\r\n\t\t\t\t\tif(event){\r\n\t\t\t\t\t\tvar position = $statCalc.getAdjacentFreeSpace({x: args[1], y: args[2]}, null, event.eventId(), {x: event.posX(), y: event.posY()});\r\n\t\t\t\t\t\tvar ignoreObstacles = !((args[5] || 0) * 1);\r\n\t\t\t\t\t\tevent.srpgMoveToPoint(position, true, ignoreObstacles);\r\n\t\t\t\t\t\tif(args[3] * 1){\r\n\t\t\t\t\t\t\t$gamePlayer.locate(event.posX(), event.posY());\r\n\t\t\t\t\t\t\t$gameTemp.followMove = true;\r\n\t\t\t\t\t\t}\t\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'moveEventToEvent') {\r\n\t\t\t\t\t$gameMap._interpreter.setWaitMode(\"move_to_point\");\r\n\t\t\t\t\tif(!args[3] * 1){\r\n\t\t\t\t\t\t$gameSystem.setSrpgWaitMoving(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar targetEvent = $gameMap.event(args[1]);\r\n\t\t\t\t\tvar event = $gameMap.event(args[0]);\r\n\t\t\t\t\tif(event && targetEvent){\r\n\t\t\t\t\t\tvar position = $statCalc.getAdjacentFreeSpace({x: targetEvent.posX(), y: targetEvent.posY()}, null, event.eventId(), {x: event.posX(), y: event.posY()});\r\n\t\t\t\t\t\tvar ignoreObstacles = !((args[4] || 0) * 1);\r\n\t\t\t\t\t\tevent.srpgMoveToPoint(position, true, ignoreObstacles);\r\n\t\t\t\t\t\tif(args[2] * 1){\r\n\t\t\t\t\t\t\t$gamePlayer.locate(event.posX(), event.posY());\r\n\t\t\t\t\t\t\t$gameTemp.followMove = true;\r\n\t\t\t\t\t\t}\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'moveActorToEvent') {\r\n\t\t\t\t\t$gameMap._interpreter.setWaitMode(\"move_to_point\");\r\n\t\t\t\t\tif(!args[3] * 1){\r\n\t\t\t\t\t\t$gameSystem.setSrpgWaitMoving(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar targetEvent = $gameMap.event(args[1]);\r\n\t\t\t\t\tvar event = $statCalc.getReferenceEvent($gameActors.actor(resolveDeployedActorId(args[0])));\r\n\t\t\t\t\tif(event && targetEvent){\r\n\t\t\t\t\t\tvar position = $statCalc.getAdjacentFreeSpace({x: targetEvent.posX(), y: targetEvent.posY()}, null, event.eventId(), {x: event.posX(), y: event.posY()});\r\n\t\t\t\t\t\tvar ignoreObstacles = !((args[4] || 0) * 1);\r\n\t\t\t\t\t\tevent.srpgMoveToPoint(position, true, ignoreObstacles);\r\n\t\t\t\t\t\tif(args[2] * 1){\r\n\t\t\t\t\t\t\t$gamePlayer.locate(event.posX(), event.posY());\r\n\t\t\t\t\t\t\t$gameTemp.followMove = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'moveEventToActor') {\r\n\t\t\t\t\t$gameMap._interpreter.setWaitMode(\"move_to_point\");\r\n\t\t\t\t\tif(!args[3] * 1){\r\n\t\t\t\t\t\t$gameSystem.setSrpgWaitMoving(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar targetEvent = $statCalc.getReferenceEvent($gameActors.actor(resolveDeployedActorId(args[1])));\r\n\t\t\t\t\tvar event = $gameMap.event(args[0]);\r\n\t\t\t\t\tif(event && targetEvent){\r\n\t\t\t\t\t\tvar position = $statCalc.getAdjacentFreeSpace({x: targetEvent.posX(), y: targetEvent.posY()}, null, event.eventId(), {x: event.posX(), y: event.posY()});\r\n\t\t\t\t\t\tvar ignoreObstacles = !((args[4] || 0) * 1);\r\n\t\t\t\t\t\tevent.srpgMoveToPoint(position, true, ignoreObstacles);\r\n\t\t\t\t\t\tif(args[2] * 1){\r\n\t\t\t\t\t\t\t$gamePlayer.locate(event.posX(), event.posY());\r\n\t\t\t\t\t\t\t$gameTemp.followMove = true;\r\n\t\t\t\t\t\t}\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'moveActorToActor') {\r\n\t\t\t\t\t$gameMap._interpreter.setWaitMode(\"move_to_point\");\r\n\t\t\t\t\tif(!args[3] * 1){\r\n\t\t\t\t\t\t$gameSystem.setSrpgWaitMoving(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar targetEvent = $statCalc.getReferenceEvent($gameActors.actor(resolveDeployedActorId(args[1])));\r\n\t\t\t\t\tvar event = $statCalc.getReferenceEvent($gameActors.actor(args[0]));\r\n\t\t\t\t\tif(event && targetEvent){\r\n\t\t\t\t\t\tvar position = $statCalc.getAdjacentFreeSpace({x: targetEvent.posX(), y: targetEvent.posY()}, null, event.eventId(), {x: event.posX(), y: event.posY()});\r\n\t\t\t\t\t\tvar ignoreObstacles = !((args[4] || 0) * 1);\r\n\t\t\t\t\t\tevent.srpgMoveToPoint(position, true, ignoreObstacles);\r\n\t\t\t\t\t\tif(args[2] * 1){\r\n\t\t\t\t\t\t\t$gamePlayer.locate(event.posX(), event.posY());\r\n\t\t\t\t\t\t\t$gameTemp.followMove = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setEventFlying') {\r\n\t\t\t\t\tvar actor = $gameSystem.EventToUnit(args[0])[1];\r\n\t\t\t\t\tif($statCalc.canBeOnTerrain(actor, 1)){\r\n\t\t\t\t\t\t$statCalc.setSuperState(actor, 1, (args[1] || 0) * 1);\r\n\t\t\t\t\t}\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setEventLanded') {\r\n\t\t\t\t\tvar actor = $gameSystem.EventToUnit(args[0])[1];\t\t\r\n\t\t\t\t\t$statCalc.setSuperState(actor, -1,(args[1] || 0) * 1);\t\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'enableFaction') {\r\n\t\t\t\t\t$gameSystem.enableFaction(args[0]);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'disableFaction') {\r\n\t\t\t\t\t$gameSystem.disableFaction(args[0]);\r\n\t\t\t\t}\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setFactionAggro') {\r\n\t\t\t\t\t$gameSystem.setFactionAggro(args[0], JSON.parse(args[1]));\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'clearFactionAggro') {\r\n\t\t\t\t\t$gameSystem.clearFactionAggro(args[0]);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'transformEvent') {\r\n\t\t\t\t\tvar actor = $gameSystem.EventToUnit(args[0])[1];\r\n\t\t\t\t\t/*if(actor.isSubTwin){\r\n\t\t\t\t\t\tvar main = $statCalc.getMainTwin(actor);\r\n\t\t\t\t\t\t$statCalc.swap(main, true);\r\n\t\t\t\t\t}*/\r\n\t\t\t\t\t$statCalc.transform(actor, args[1], true);\r\n\t\t\t\t\tif(!(args[2] || 0) * 1){\r\n\t\t\t\t\t\tvar se = {};\r\n\t\t\t\t\t\tse.name = 'SRWTransform';\r\n\t\t\t\t\t\tse.pan = 0;\r\n\t\t\t\t\t\tse.pitch = 100;\r\n\t\t\t\t\t\tse.volume = 80;\r\n\t\t\t\t\t\tAudioManager.playSe(se);\r\n\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t}\t\r\n\r\n\t\t\t\tif (command === 'combineEvent') {\r\n\t\t\t\t\tvar actor = $gameSystem.EventToUnit(args[0])[1];\r\n\t\t\t\t\t$statCalc.combine(actor, true);\r\n\t\t\t\t\tvar se = {};\r\n\t\t\t\t\tif(!(args[1] || 0) * 1){\r\n\t\t\t\t\t\tse.name = 'SRWTransform';\r\n\t\t\t\t\t\tse.pan = 0;\r\n\t\t\t\t\t\tse.pitch = 100;\r\n\t\t\t\t\t\tse.volume = 80;\r\n\t\t\t\t\t\tAudioManager.playSe(se);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\r\n\r\n\t\t\t\tif (command === 'splitEvent') {\r\n\t\t\t\t\tvar actor = $gameSystem.EventToUnit(args[0])[1];\r\n\t\t\t\t\t$statCalc.split(actor, true);\r\n\t\t\t\t\tvar se = {};\r\n\t\t\t\t\tif(!(args[1] || 0) * 1){\r\n\t\t\t\t\t\tse.name = 'SRWTransform';\r\n\t\t\t\t\t\tse.pan = 0;\r\n\t\t\t\t\t\tse.pitch = 100;\r\n\t\t\t\t\t\tse.volume = 80;\r\n\t\t\t\t\t\tAudioManager.playSe(se);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'transformActor') {\r\n\t\t\t\t\tvar actor = $gameActors.actor(args[0]);\r\n\t\t\t\t\t/*if(actor.isSubTwin){\r\n\t\t\t\t\t\tvar main = $statCalc.getMainTwin(actor);\r\n\t\t\t\t\t\t$statCalc.swap(main, true);\r\n\t\t\t\t\t}*/\r\n\t\t\t\t\t$statCalc.transform(actor, args[1], true, args[2]);\r\n\t\t\t\t\tvar se = {};\r\n\t\t\t\t\tse.name = 'SRWTransform';\r\n\t\t\t\t\tse.pan = 0;\r\n\t\t\t\t\tse.pitch = 100;\r\n\t\t\t\t\tse.volume = 80;\r\n\t\t\t\t\tAudioManager.playSe(se);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (command === 'transformActorDirect') {\r\n\t\t\t\t\tvar actor = $gameActors.actor(args[0]);\r\n\t\t\t\t\t/*if(actor.isSubTwin){\r\n\t\t\t\t\t\tvar main = $statCalc.getMainTwin(actor);\r\n\t\t\t\t\t\t$statCalc.swap(main, true);\r\n\t\t\t\t\t}*/\r\n\t\t\t\t\t$statCalc.transform(actor, 0, true, args[1]);\r\n\t\t\t\t\tvar se = {};\r\n\t\t\t\t\tse.name = 'SRWTransform';\r\n\t\t\t\t\tse.pan = 0;\r\n\t\t\t\t\tse.pitch = 100;\r\n\t\t\t\t\tse.volume = 80;\r\n\t\t\t\t\tAudioManager.playSe(se);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (command === 'combineActor') {\r\n\t\t\t\t\tvar actor = $gameActors.actor(args[0]);\r\n\t\t\t\t\t$statCalc.combine(actor, true);\r\n\t\t\t\t\tvar se = {};\r\n\t\t\t\t\tse.name = 'SRWTransform';\r\n\t\t\t\t\tse.pan = 0;\r\n\t\t\t\t\tse.pitch = 100;\r\n\t\t\t\t\tse.volume = 80;\r\n\t\t\t\t\tAudioManager.playSe(se);\r\n\t\t\t\t}\t\r\n\r\n\t\t\t\tif (command === 'splitActor') {\r\n\t\t\t\t\tvar actor = $gameActors.actor(args[0]);\r\n\t\t\t\t\t$statCalc.split(actor, true);\r\n\t\t\t\t\tvar se = {};\r\n\t\t\t\t\tse.name = 'SRWTransform';\r\n\t\t\t\t\tse.pan = 0;\r\n\t\t\t\t\tse.pitch = 100;\r\n\t\t\t\t\tse.volume = 80;\r\n\t\t\t\t\tAudioManager.playSe(se);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'separateActor') {\r\n\t\t\t\t\tvar actor = $gameActors.actor(args[0]);\r\n\t\t\t\t\tif(actor.isSubTwin){\r\n\t\t\t\t\t\tactor = $statCalc.getMainTwin(actor);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(actor.subTwin || actor.isSubTwin){\r\n\t\t\t\t\t\t$statCalc.separate(actor, true);\r\n\t\t\t\t\t}\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'makeActorMainTwin') {\r\n\t\t\t\t\tvar actor = $gameActors.actor(args[0]);\r\n\t\t\t\t\tif(actor.isSubTwin){\r\n\t\t\t\t\t\tactor = $statCalc.getMainTwin(actor);\r\n\t\t\t\t\t\t$statCalc.swap(actor, true);\r\n\t\t\t\t\t}\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'preventActorDeathQuote') {\r\n\t\t\t\t\tif(!$gameTemp.preventedDeathQuotes){\r\n\t\t\t\t\t\t$gameTemp.preventedDeathQuotes = {};\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$gameTemp.preventedDeathQuotes[args[0]] = true;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setSaveDisplayName') {\t\t\t\r\n\t\t\t\t\t$gameSystem.saveDisplayName = (args[0] || \"\").replace(/\\_/ig, \" \");\r\n\t\t\t\t}\t\r\n\r\n\t\t\t\tif (command === 'setStageTextId') {\t\t\t\r\n\t\t\t\t\t$gameSystem.stageTextId = args[0];\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setEventWill') {\t\r\n\t\t\t\t\tconst actorInfo =  $gameSystem.EventToUnit(args[0]);\r\n\t\t\t\t\tif(actorInfo){\r\n\t\t\t\t\t\tvar actor = actorInfo[1];\r\n\t\t\t\t\t\t$statCalc.setWill(actor, args[1] * 1);\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setActorWill') {\t\r\n\t\t\t\t\tvar actor = $gameActors.actor(args[0]);\r\n\t\t\t\t\t$statCalc.setWill(actor, args[1] * 1);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'makeActorAI') {\t\r\n\t\t\t\t\tvar actor = $gameActors.actor(resolveDeployedActorId(args[0]));\r\n\t\t\t\t\t$statCalc.setIsAI(actor, true);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'makeActorControllable') {\t\r\n\t\t\t\t\tvar actor = $gameActors.actor(resolveDeployedActorId(args[0]));\r\n\t\t\t\t\t$statCalc.setIsAI(actor, false);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setActorEssential') {\r\n\t\t\t\t\tvar actor = $gameActors.actor(args[0]);\r\n\t\t\t\t\t$statCalc.setEssential(actor, true);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setActorNonEssential') {\r\n\t\t\t\t\tvar actor = $gameActors.actor(args[0]);\r\n\t\t\t\t\t$statCalc.setEssential(actor, false);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setEventMapCooldown') {\r\n\t\t\t\t\tvar actor = $gameSystem.EventToUnit(args[0])[1];\r\n\t\t\t\t\t$statCalc.setMapAttackCooldown(actor, args[1] * 1);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'unlockMechWeapon') {\t\t\t\r\n\t\t\t\t\t$statCalc.setWeaponUnlocked(args[0], args[1]);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'lockMechWeapon') {\r\n\t\t\t\t\t$statCalc.setWeaponLocked(args[0], args[1]);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setUnlockedUpgradeLevel') {\r\n\t\t\t\t\tvar tmp = parseInt(args[0]);\r\n\t\t\t\t\tvar onlyUpgrade = args[1] * 1;\r\n\t\t\t\t\tif(!isNaN(tmp)){\r\n\t\t\t\t\t\tif($gameSystem.unlockedUpgradeLevel == null || !onlyUpgrade || tmp > $gameSystem.unlockedUpgradeLevel){\r\n\t\t\t\t\t\t\t$gameSystem.unlockedUpgradeLevel = tmp;\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t\t\t}\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setRequiredFUBLevel') {\r\n\t\t\t\t\tvar tmp = parseInt(args[0]);\r\n\t\t\t\t\tif(!isNaN(tmp)){\r\n\t\t\t\t\t\t$gameSystem.requiredFUBLevel = tmp;\r\n\t\t\t\t\t}\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setEventCounterAction') {\t\r\n\t\t\t\t\tvar actor = $gameSystem.EventToUnit(args[0])[1];\r\n\t\t\t\t\tactor.counterBehavior = args[1];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setEventAttackAction') {\t\r\n\t\t\t\t\tvar actor = $gameSystem.EventToUnit(args[0])[1];\r\n\t\t\t\t\tactor.attackBehavior = args[1];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setEventBattleMode') {\t\r\n\t\t\t\t\tvar battlerArray = $gameSystem.EventToUnit(args[0]);\r\n\t\t\t\t\tif (battlerArray && (battlerArray[0] === 'actor' || battlerArray[0] === 'enemy')) {\r\n\t\t\t\t\t\tbattlerArray[1].setBattleMode(args[1], true);\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\t/*if(battlerArray[0] === 'enemy'){\r\n\t\t\t\t\t\tif(battlerArray[1].squadId != -1){\r\n\t\t\t\t\t\t\tthis.setSquadMode(squadId, args[1]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}*/\t\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'hidePilotAbility') {\t\r\n\t\t\t\t\t$gameSystem.setPilotAbilityStatus(args[0], args[1], \"hidden\");\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'lockPilotAbility') {\t\r\n\t\t\t\t\t$gameSystem.setPilotAbilityStatus(args[0], args[1], \"locked\");\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'unlockPilotAbility') {\t\r\n\t\t\t\t\t$gameSystem.setPilotAbilityStatus(args[0], args[1], \"\");\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'hideMechAbility') {\t\r\n\t\t\t\t\t$gameSystem.setMechAbilityStatus(args[0], args[1], \"hidden\");\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'lockMechAbility') {\t\r\n\t\t\t\t\t$gameSystem.setMechAbilityStatus(args[0], args[1], \"locked\");\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'unlockMechAbility') {\t\r\n\t\t\t\t\t$gameSystem.setMechAbilityStatus(args[0], args[1], \"\");\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'lockTransformation') {\t\r\n\t\t\t\t\t$gameSystem.lockTransformation(args[0], args[1]);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'lockAllTransformations') {\t\r\n\t\t\t\t\t$gameSystem.lockAllTransformations();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'unlockTransformation') {\t\r\n\t\t\t\t\t$gameSystem.unlockTransformation(args[0], args[1]);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'unlockAllTransformations') {\t\r\n\t\t\t\t\t$gameSystem.unlockAllTransformations();\r\n\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\tif (command === 'lockCombine') {\t\r\n\t\t\t\t\t$gameSystem.lockCombine(args[0]);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'lockAllCombines') {\t\r\n\t\t\t\t\t$gameSystem.lockAllCombines();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'unlockCombine') {\t\r\n\t\t\t\t\t$gameSystem.unlockCombine(args[0]);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'unlockAllCombines') {\t\r\n\t\t\t\t\t$gameSystem.unlockAllCombines();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setFaceAlias') {\t\r\n\t\t\t\t\tif(!$gameSystem.faceAliases){\r\n\t\t\t\t\t\t$gameSystem.faceAliases = {};\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$gameSystem.faceAliases[args[0]] = args[1];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setCharacterIndexAlias') {\t\r\n\t\t\t\t\tif(!$gameSystem.characterIdexAliases){\r\n\t\t\t\t\t\t$gameSystem.characterIdexAliases = {};\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$gameSystem.characterIdexAliases[args[0]] = args[1];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setPilotAbilityUpgrade') {\t\r\n\t\t\t\t\t$pilotAbilityManager.setUpgrade(args[0], args[1]);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setMechAbilityUpgrade') {\t\r\n\t\t\t\t\t$mechAbilityManager.setUpgrade(args[0], args[1]);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command == 'showTargetingReticule'){\t\t\t\r\n\t\t\t\t\tvar eventIdSource;\r\n\t\t\t\t\tvar parts = args[0].match(/\\actor\\:(.*)/);\t\r\n\t\t\t\t\tif(parts && parts.length > 1){\r\n\t\t\t\t\t\teventIdSource = $gameSystem.ActorToEvent(parts[1]);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\teventIdSource = args[0];\r\n\t\t\t\t\t}\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar eventIdTarget;\r\n\t\t\t\t\tvar parts = args[1].match(/\\actor\\:(.*)/);\t\r\n\t\t\t\t\tif(parts && parts.length > 1){\r\n\t\t\t\t\t\teventIdTarget = $gameSystem.ActorToEvent(parts[1]);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\teventIdTarget = args[1];\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t$gameTemp.reticuleInfo = {\r\n\t\t\t\t\t\tactor: $gameMap.event(eventIdSource),\r\n\t\t\t\t\t\ttargetActor: $gameMap.event(eventIdTarget)\r\n\t\t\t\t\t};\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'clearTile') {\r\n\t\t\t\t\tvar position = {x: args[0], y: args[1]};\r\n\t\t\t\t\tvar actor = $statCalc.activeUnitAtPosition(position);\r\n\t\t\t\t\tif(actor){\r\n\t\t\t\t\t\tvar newPosition = $statCalc.getAdjacentFreeSpace(position);\r\n\t\t\t\t\t\tvar event = $statCalc.getReferenceEvent(actor);\r\n\t\t\t\t\t\tvar actorId = -1;\r\n\t\t\t\t\t\tif(actor.isActor()){\r\n\t\t\t\t\t\t\tactorId = actor.actorId();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(event.eventId() != args[2] && actorId != args[3]){\r\n\t\t\t\t\t\t\tevent.locate(newPosition.x, newPosition.y);\r\n\t\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tfunction clearAdjacentToTile(position, includeDiagonal){\r\n\t\t\t\t\tvar positions  = [];\r\n\t\t\t\t\tpositions.push({position: {x: position.x - 1, y: position.y}, biasPosition:{x: position.x - 2, y: position.y}});\r\n\t\t\t\t\tpositions.push({position: {x: position.x + 1, y: position.y}, biasPosition:{x: position.x + 2, y: position.y}});\r\n\t\t\t\t\tpositions.push({position: {x: position.x, y: position.y + 1}, biasPosition:{x: position.x, y: position.y + 2}});\r\n\t\t\t\t\tpositions.push({position: {x: position.x, y: position.y - 1}, biasPosition:{x: position.x, y: position.y - 2}});\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(includeDiagonal){\r\n\t\t\t\t\t\tpositions.push({position: {x: position.x - 1, y: position.y - 1}, biasPosition:{x: position.x - 2, y: position.y - 2}});\r\n\t\t\t\t\t\tpositions.push({position: {x: position.x + 1, y: position.y + 1}, biasPosition:{x: position.x + 2, y: position.y + 2}});\r\n\t\t\t\t\t\tpositions.push({position: {x: position.x - 1, y: position.y + 1}, biasPosition:{x: position.x - 2, y: position.y + 2}});\r\n\t\t\t\t\t\tpositions.push({position: {x: position.x + 1, y: position.y - 1}, biasPosition:{x: position.x + 2, y: position.y - 2}});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar usedPositions = {};\r\n\t\t\t\t\tpositions.forEach(function(currentInfo){\t\t\t\t\r\n\t\t\t\t\t\tvar actor = $statCalc.activeUnitAtPosition(currentInfo.position);\r\n\t\t\t\t\t\tif(actor){\r\n\t\t\t\t\t\t\tvar newPosition = $statCalc.getAdjacentFreeSpace(currentInfo.position, null, null, currentInfo.biasPosition, true, usedPositions);\r\n\t\t\t\t\t\t\tif(!usedPositions[newPosition.x]){\r\n\t\t\t\t\t\t\t\tusedPositions[newPosition.x] = {};\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(!usedPositions[newPosition.x][newPosition.y]){\r\n\t\t\t\t\t\t\t\tusedPositions[newPosition.x][newPosition.y] = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tvar event = $statCalc.getReferenceEvent(actor);\r\n\t\t\t\t\t\t\tvar actorId = -1;\t\t\t\t\t\r\n\t\t\t\t\t\t\tevent.locate(newPosition.x, newPosition.y);\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'clearAdjacentToTile') {\r\n\t\t\t\t\tclearAdjacentToTile({x: args[0] * 1, y: args[1] * 1}, args[2] * 1);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'clearAdjacentToEvent') {\r\n\t\t\t\t\tvar event = $gameMap.event(args[0]);\r\n\t\t\t\t\tif(event){\r\n\t\t\t\t\t\tclearAdjacentToTile({x: event.posX(), y:  event.posY()}, args[1] * 1);\r\n\t\t\t\t\t}\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'clearAdjacentToActor') {\r\n\t\t\t\t\tvar event = $statCalc.getReferenceEvent($gameActors.actor(args[0]));\r\n\t\t\t\t\tif(event){\r\n\t\t\t\t\t\tclearAdjacentToTile({x: event.posX(), y:  event.posY()}, args[1] * 1);\r\n\t\t\t\t\t}\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\tif (command === 'stopSkipping') {\r\n\t\t\t\t\t//exists purely to manually ensure A+Start skipping stops at the point the command is called.\r\n\t\t\t\t}\r\n\t\t\t\tif (command === 'setEventAIFlags') {\r\n\t\t\t\t\tvar actor = $gameSystem.EventToUnit(args[0])[1];\r\n\t\t\t\t\t$statCalc.setAIFlags(actor, {\r\n\t\t\t\t\t\tterrain: args[1] * 1,  //if 1 the unit will prefer to move onto tile that grant terrain bonuses\r\n\t\t\t\t\t\tformation: args[2] * 1,//if 1 the unit will prefer to move adjacent to allies that provide support attack/defend\r\n\t\t\t\t\t\treposition: args[3] * 1,//if 1 the unit will move closer to hit enemies with stronger attacks even if they already can hit a target with a longer range attack\r\n\t\t\t\t\t\tpreferTarget: args[4] * 1//if 1 the unit will move towards its target region(if it has one) even it has attack targets already in range\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tif (command === 'setTerrainMoveCosts') {\r\n\t\t\t\t\t$gameSystem.setTerrainMoveCosts(args[0], args[1], args[2], args[3]);\r\n\t\t\t\t}\r\n\t\t\t\tif (command === 'setCloudScrollImage') {\r\n\t\t\t\t\t$gameSystem.cloudScrollSource = args[0];\r\n\t\t\t\t}\r\n\t\t\t\tif (command === 'setCloudScrollXSpeed') {\r\n\t\t\t\t\t$gameSystem.cloudScrollXSpeed = args[0] * 1;\r\n\t\t\t\t}\r\n\t\t\t\tif (command === 'setCloudScrollYSpeed') {\r\n\t\t\t\t\t$gameSystem.cloudScrollYSpeed = args[0] * 1 ;\r\n\t\t\t\t}\r\n\t\t\t\tif (command === 'setCloudScrollFrequency') {\r\n\t\t\t\t\t$gameSystem.cloudScrollFrequency = args[0] * 1 ;\r\n\t\t\t\t}\r\n\t\t\t\tif (command === 'setDefaultFocusEvent') {\r\n\t\t\t\t\t$gameSystem.defaultFocusEvent = args[0] * 1;\r\n\t\t\t\t}\t\t\t\r\n\t\t\t\tif (command === 'setDefaultFocusActor') {\r\n\t\t\t\t\t$gameSystem.defaultFocusActor = args[0] * 1;\r\n\t\t\t\t}\r\n\t\t\t\tif (command === 'lockCameraToCursor') {\r\n\t\t\t\t\t$gameTemp.lockCameraToCursor = true;\r\n\t\t\t\t}\r\n\t\t\t\tif (command === 'unlockCameraFromCursor') {\r\n\t\t\t\t\t$gameTemp.lockCameraToCursor = false;\r\n\t\t\t\t}\r\n\t\t\t\tif (command === 'setAllyWillCap') {\r\n\t\t\t\t\t$gameSystem.allyWillCap = args[0] * 1;\r\n\t\t\t\t}\r\n\t\t\t\tif (command === 'clearAllyWillCap') {\r\n\t\t\t\t\t$gameSystem.allyWillCap = null;\r\n\t\t\t\t}\r\n\t\t\t\tif (command === 'setEnemyWillCap') {\r\n\t\t\t\t\t$gameSystem.enemyWillCap = args[0] * 1;\r\n\t\t\t\t}\r\n\t\t\t\tif (command === 'clearEnemyWillCap') {\r\n\t\t\t\t\t$gameSystem.enemyWillCap = null;\r\n\t\t\t\t}\r\n\t\t\t\tif (command === 'setTerrainSolidForEnemy') {\r\n\t\t\t\t\tif(!$gameSystem.enemySolidTerrain){\r\n\t\t\t\t\t\t$gameSystem.enemySolidTerrain = {};\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$gameSystem.enemySolidTerrain[args[0] * 1] = true;\r\n\t\t\t\t}\t\r\n\t\t\t\tif (command === 'setTerrainPassableForEnemy') {\r\n\t\t\t\t\tif(!$gameSystem.enemySolidTerrain){\r\n\t\t\t\t\t\t$gameSystem.enemySolidTerrain = {};\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdelete $gameSystem.enemySolidTerrain[args[0] * 1];\r\n\t\t\t\t}\t\t\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'disableVariablePortraits') {\r\n\t\t\t\t\t$gameSystem.disableVariablePortraits = true;\r\n\t\t\t\t}\r\n\t\t\t\tif (command === 'enableVariablePortraits') {\r\n\t\t\t\t\t$gameSystem.disableVariablePortraits = false;\r\n\t\t\t\t}\r\n\t\t\t\tif (command === 'refundMechUpgrades') {\r\n\t\t\t\t\t$SRWSaveManager.refundMechUpgrades(args[0] * 1);\r\n\t\t\t\t}\t\r\n\t\t\t\tif (command === 'refundPilotPP') {\r\n\t\t\t\t\t$SRWSaveManager.refundPilotPP(args[0] * 1);\r\n\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\tif (command === 'setEventWillOverflow') {\r\n\t\t\t\t\tvar actor = $gameSystem.EventToUnit(args[0])[1];\t\t\t\t\r\n\t\t\t\t\t$statCalc.setStageTemp(actor, \"willOverflow\", (args[1] || 0) * 1);\t\t\t\t\t\t\t\t\r\n\t\t\t\t}\t\r\n\t\t\t\tif (command === 'setEventUntargetable') {\r\n\t\t\t\t\t$gameSystem.untargetableAllies[args[0]] = true;\t\t\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\tif (command === 'setEventTargetable') {\r\n\t\t\t\t\tdelete $gameSystem.untargetableAllies[args[0]];\t\t\t\t\t\t\t\r\n\t\t\t\t}\t\t\t\r\n\t\t\t\tif (command === 'setActorSong') {\r\n\t\t\t\t\t$songManager.setCustomActorSong(args[0] * 1, null, args[1])\t\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\tif (command === 'setActorWeaponSong') {\r\n\t\t\t\t\t$songManager.setCustomActorSong(args[0] * 1, args[1] * 1, args[2])\t\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\tif (command === 'addFunds'){\r\n\t\t\t\t\tlet amount = args[0];\r\n\t\t\t\t\tif(isNaN(amount)){\r\n\t\t\t\t\t\tthrow \"Invalid gold amount: \"+amount;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$gameParty.gainGold(amount * 1);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setEventHP') {\r\n\t\t\t\t\tvar actor = $gameSystem.EventToUnit(args[0])[1];\t\t\t\t\r\n\t\t\t\t\t$statCalc.setHP(actor, (args[1] || 1) * 1);\t\r\n\t\t\t\t}\t\t\r\n\r\n\t\t\t\tif (command === 'setEventHPPercent') {\r\n\t\t\t\t\tvar actor = $gameSystem.EventToUnit(args[0])[1];\t\t\t\t\r\n\t\t\t\t\tvar mechStats = $statCalc.getCalculatedMechStats(actor);\r\n\t\t\t\t\t$statCalc.setHP(actor, Math.floor(mechStats.maxHP * args[1] / 100));\t\t\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (command === 'setEventEN') {\r\n\t\t\t\t\tvar actor = $gameSystem.EventToUnit(args[0])[1];\t\t\t\t\r\n\t\t\t\t\t$statCalc.setEN(actor, (args[1] || 1) * 1);\t\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (command === 'setEventENPercent') {\r\n\t\t\t\t\tvar actor = $gameSystem.EventToUnit(args[0])[1];\t\t\t\t\r\n\t\t\t\t\tvar mechStats = $statCalc.getCalculatedMechStats(actor);\r\n\t\t\t\t\t$statCalc.setEN(actor, Math.floor(mechStats.maxEN * args[1] / 100));\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'addSubPilot') {\t\t\t\t\t\r\n\t\t\t\t\tvar targetMech = $statCalc.getMechData($dataClasses[args[0] * 1], true);\r\n\t\t\t\t\ttargetMech.subPilots[args[1] * 1] = args[2] * 1;\r\n\t\t\t\t\t$statCalc.storeMechData(targetMech);\r\n\t\t\t\t\t$gameSystem.overwriteMechFallbackInfo(args[0] * 1, targetMech.subPilots);\r\n\t\t\t\t\tlet actor = $gameActors.actor(args[2] * 1)\r\n\t\t\t\t\tactor.isSubPilot = true;\r\n\t\t\t\t\t//actor._intermissionClassId = args[1] * 1; \r\n\t\t\t\t\t$gameSystem.overwritePilotFallbackInfo(actor);\r\n\t\t\t\t}\t\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'removeSubPilot') {\t\t\t\t\t\r\n\t\t\t\t\tvar targetMech = $statCalc.getMechData($dataClasses[args[0] * 1], true);\r\n\t\t\t\t\ttargetMech.subPilots[args[1] * 1] = 0;\r\n\t\t\t\t\t$statCalc.storeMechData(targetMech);\r\n\t\t\t\t\t$gameSystem.overwriteMechFallbackInfo(args[0] * 1, targetMech.subPilots);\r\n\t\t\t\t\tlet actor = $gameActors.actor(args[2] * 1)\r\n\t\t\t\t\tactor.isSubPilot = false;\r\n\t\t\t\t\t//actor._intermissionClassId = args[1] * 1; \r\n\t\t\t\t\t$gameSystem.overwritePilotFallbackInfo(actor);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setPortraitOverlay') {\t\t\r\n\t\t\t\t\tif(!$gameTemp.portraitOverlays){\r\n\t\t\t\t\t\t$gameTemp.portraitOverlays = [];\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$gameTemp.portraitOverlays.push((args[0] || 0) * 1);\r\n\t\t\t\t}\t\r\n\t\t\t\tif (command === 'hidePortraitOverlay') {\r\n\t\t\t\t\tif(!$gameTemp.portraitOverlays){\r\n\t\t\t\t\t\t$gameTemp.portraitOverlays = [];\r\n\t\t\t\t\t}\t\r\n\t\t\t\t\tlet tmp = [];\r\n\t\t\t\t\tfor(let id of $gameTemp.portraitOverlays){\r\n\t\t\t\t\t\tif(id != args[0]){\r\n\t\t\t\t\t\t\ttmp.push(id);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$gameTemp.portraitOverlays = tmp;\r\n\t\t\t\t}\r\n\t\t\t\tif (command === 'hideAllPortraitOverlays') {\t\t\t\t\t\r\n\t\t\t\t\t$gameTemp.portraitOverlays = [];\r\n\t\t\t\t}\r\n\t\t\t\tif (command === 'setLocationHeader') {\t\t\t\t\t\r\n\t\t\t\t\t$gameTemp.locationHeader = (args[0] || \"\").replace(/\\_/ig, \" \");\r\n\t\t\t\t}\t\r\n\t\t\t\tif (command === 'clearLocationHeader') {\t\t\t\t\t\r\n\t\t\t\t\t$gameTemp.locationHeader = null;\r\n\t\t\t\t}\r\n\t\t\t\tif (command === 'clearLocationHeader') {\t\t\t\t\t\r\n\t\t\t\t\t$gameTemp.locationHeader = null;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'setCustomSpirit') {\t\t\t\t\t\r\n\t\t\t\t\tvar actor = $gameActors.actor(args[0]);\r\n\t\t\t\t\tif(actor){\r\n\t\t\t\t\t\t$statCalc.setCustomSpirit(\r\n\t\t\t\t\t\t\tactor,\r\n\t\t\t\t\t\t\targs[1],//slot\r\n\t\t\t\t\t\t\targs[2],//idx\r\n\t\t\t\t\t\t\targs[3],//cost\r\n\t\t\t\t\t\t\targs[4],//level\t\t\t\t\t\t\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'clearCustomSpirit') {\t\t\t\t\t\r\n\t\t\t\t\tvar actor = $gameActors.actor(args[0]);\r\n\t\t\t\t\tif(actor){\r\n\t\t\t\t\t\t$statCalc.clearCustomSpirit(\r\n\t\t\t\t\t\t\tactor,\r\n\t\t\t\t\t\t\targs[1],//slot\t\t\t\t\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'awardFavPoints') {\t\t\t\t\t\r\n\t\t\t\t\t$gameSystem.awardFavPoints(args[0]);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'deployItemBox') {\t\t\t\t\t\r\n\t\t\t\t\t$gameSystem.deployItemBox($gameMap.event(args[0] * 1), JSON.parse(args[1] || \"[]\"))\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (command === 'collectItemsBoxes') {\t\t\r\n\t\t\t\t\tlet targetId = args[0];\r\n\t\t\t\t\tif(targetId == null){\r\n\t\t\t\t\t\ttargetId = -1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet items = [];\r\n\t\t\t\t\tfor(let event of $gameMap.events()){\r\n\t\t\t\t\t\tif(event.isDropBox && (targetId == -1 || event.eventId() == targetId)){\r\n\t\t\t\t\t\t\titems = items.concat(event.dropBoxItems);\r\n\t\t\t\t\t\t\tevent.isDropBox = false;\r\n\t\t\t\t\t\t\tevent.erase();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(items.length){\r\n\t\t\t\t\t\t$gameMessage.setFaceImage(\"\", \"\");\r\n\t\t\t\t\t\t$gameMessage.setBackground(1);\r\n\t\t\t\t\t\t$gameMessage.setPositionType(1);\r\n\t\t\t\t\t\tlet names = items.map((itemId) => $itemEffectManager.getAbilityDisplayInfo(itemId).name);\r\n\t\t\t\t\t\t$gameMessage.add(\"\\\\TA[1]\\n\" + APPSTRINGS.GENERAL.label_box_pickup_scripted.replace(\"{ITEMS}\", names.join(\", \")));\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor(let item of items){\r\n\t\t\t\t\t\t\t$inventoryManager.addItem(item);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t} catch(e){\r\n\t\t\t\tvar msg = \"\";\r\n\t\t\t\tmsg+=\"Error while executing a plugin command: \"+getLogContext();\r\n\t\t\t\tmsg+=\"<br><br>\";\r\n\t\t\t\tif(e.message){\r\n\t\t\t\t\tmsg+=e.message + \"\\n\\n\" + e.stack;\r\n\t\t\t\t\tconsole.error(e.stack);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tmsg+=e;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tthrow msg;\r\n\t\t\t}\r\n\t\t};\t\r\n\t}\n\n//# sourceURL=webpack://src/./js/SRW_Core/PluginCommands.js?");

/***/ }),

/***/ "./js/SRW Core/Scenes.js":
/*!*******************************!*\
  !*** ./js/SRW Core/Scenes.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n\t/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n\t\tpatches: patches,\r\n\t}); \r\n\t\r\n\tfunction patches(){};\r\n\t\r\n\t\r\n\t\r\n\tpatches.apply = function(){\r\n\t\tSceneManager.resume = function() {\r\n\t\t\tif(!$gameTemp.editMode){\r\n\t\t\t\tthis._stopped = false;\r\n\t\t\t\tthis.requestUpdate();\r\n\t\t\t\tif (!Utils.isMobileSafari()) {\r\n\t\t\t\t\tthis._currentTime = this._getTimeInMsWithoutMobileSafari();\r\n\t\t\t\t\tthis._accumulator = 0;\r\n\t\t\t\t}\r\n\t\t\t}\t\t\t\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\tScene_Map.prototype.onMapLoaded = function() {\r\n\t\t\t$gameTemp.allocateSRPGMapStructures();\r\n\t\t\tDataManager.resetTextScriptCache(); //do not cache script files from previous map(s)\r\n\t\t\tif (this._transfer) {\r\n\t\t\t\t$gamePlayer.performTransfer();\r\n\t\t\t}\t\t\t\r\n\t\t\tthis.createDisplayObjects();\t\t\t\r\n\t\t};\r\n\r\n\t}\t\r\n\t\r\n\t\n\n//# sourceURL=webpack://src/./js/SRW_Core/Scenes.js?");

/***/ }),

/***/ "./js/SRW Core/Sprites.js":
/*!********************************!*\
  !*** ./js/SRW Core/Sprites.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n\t/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n\t\tpatches: patches,\r\n\t\tSprite_Player: Sprite_Player,\r\n\t\tSprite_MapEffect:Sprite_MapEffect,\r\n\t\tSprite_MapAttack:Sprite_MapAttack,\r\n\t\tSprite_WillIndicator:Sprite_WillIndicator,\r\n\t\tSprite_AttributeIndicator: Sprite_AttributeIndicator,\r\n\t\tSprite_BasicShadow:Sprite_BasicShadow,\r\n\t\tSprite_DefendIndicator:Sprite_DefendIndicator,\r\n\t\tSprite_AttackIndicator:Sprite_AttackIndicator,\r\n\t\tSprite_TwinIndicator:Sprite_TwinIndicator,\r\n\t\tSprite_Destroyed:Sprite_Destroyed,\r\n\t\tSprite_Appear:Sprite_Appear,\r\n\t\tSprite_Disappear:Sprite_Disappear,\r\n\t\tSprite_Reticule:Sprite_Reticule,\r\n\t\tSprite_SrpgGrid:Sprite_SrpgGrid,\r\n\t\tSprite_AreaHighlights:Sprite_AreaHighlights,\r\n\t\tSprite_CloudScroll: Sprite_CloudScroll,\r\n\t\tSprite_MapBorder: Sprite_MapBorder,\r\n\t\tSprite_HealthBar: Sprite_HealthBar\r\n\t}); \r\n\t\r\n\tfunction patches(){};\r\n\t\r\n\t\r\n\t\r\n\tpatches.apply = function(){\r\n\t\t\r\n\t\tSprite.PROJECTION_VERTEX_SHADER =`\r\n\t\t\tattribute vec4 aVertexPosition;\r\n\t\t\tattribute vec2 aTextureCoord;\r\n\t\t\t\r\n\t\t\tattribute vec4 aVertexColor;\r\n\r\n\t\t\tuniform mat4 uModelViewMatrix;\r\n\t\t\tuniform mat4 uProjectionMatrix;\r\n\t\t\t\r\n\t\t\tuniform mat4 uXFormMatrix;\r\n\r\n\t\t\tvarying highp vec2 vTextureCoord;\r\n\t\t\tvarying lowp vec4 vColor;\r\n\r\n\r\n\t\t\tvoid main(void) {\t\t\t\t\t  \r\n\t\t\t  vec4 position = uModelViewMatrix * aVertexPosition;\r\n\t\t\t\tposition = uProjectionMatrix * vec4(position.x, position.y, position.z, position.w);\r\n\t\t\t\tgl_Position = position * uXFormMatrix;\r\n\t\t\t  \r\n\t\t\t  vTextureCoord = aTextureCoord;\r\n\t\t\t // vColor = aVertexColor;\r\n\t\t\t}\r\n\t  `;\r\n\t  \r\n\t\tSprite.PROJECTION_FRAGMENT_SHADER =`\r\n\t\t\tvarying highp vec2 vTextureCoord;\r\n\t\t\tvarying lowp vec4 vColor;\r\n\r\n\t\t\tuniform sampler2D uSampler;\r\n\t\t\tuniform highp float opacity;\r\n\r\n\t\t\tvoid main(void) {\r\n\t\t\t  gl_FragColor = texture2D(uSampler, vTextureCoord) * vec4(1,1,1,opacity);\r\n\t\t\t  //gl_FragColor = vColor;\r\n\t\t\t}\r\n\t\t  `;\r\n\t\t\t\t\t\r\n\t\t//dummy for users running with the plugin disabled\r\n\t\tif(typeof window.UltraMode7 == \"undefined\"){\r\n\t\t\twindow.UltraMode7 = function(){};\r\n\t\t\twindow.UltraMode7.isActive = function(){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tconst Sprite_prototype_initialize = Sprite.prototype.initialize;\r\n\t\tSprite.prototype.initialize = function(bitmap){\r\n\t\t\tSprite_prototype_initialize.call(this, bitmap);\r\n\t\t\tif(this._isProjected){\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tSprite.prototype.update = function() {\r\n\t\t\tlet pre = [];\r\n\t\t\tlet sorted = [];\r\n\t\t\tlet post = [];\r\n\t\t\tlet foundStartOfSorted = false;\r\n\t\t\tif(this.children[0] && this.children[0].children){\r\n\t\t\t\tthis.children[0].children.forEach(function(child) {\t\t\t\t\t\r\n\t\t\t\t\tif(child.isSorted){\r\n\t\t\t\t\t\tfoundStartOfSorted = true;\r\n\t\t\t\t\t\tsorted.push(child);\r\n\t\t\t\t\t} else if(!foundStartOfSorted){\r\n\t\t\t\t\t\tpre.push(child);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tpost.push(child);\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t});\r\n\t\t\t\tsorted = sorted.sort(function(a, b){\t\t\t\t\r\n\t\t\t\t\tif(a._character.isDropBox){\r\n\t\t\t\t\t\treturn -1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(b._character.isDropBox){\r\n\t\t\t\t\t\treturn 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(a._character.isActiveShip){\r\n\t\t\t\t\t\treturn -1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(b._character.isActiveShip){\r\n\t\t\t\t\t\treturn 1;\r\n\t\t\t\t\t}\t\t\r\n\t\t\t\t\tif(a._character.posY() != b._character.posY()) {\r\n\t\t\t\t\t\treturn a._character.posY() - b._character.posY();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn a._character.posX() - b._character.posX();\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t});\r\n\t\r\n\t\t\t\tthis.children[0].children = pre.concat(sorted).concat(post);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.children.forEach(function(child) {\r\n\t\t\t\tif (child.update) {\r\n\t\t\t\t\tchild.update();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\t\t\r\n\t\tSprite.prototype.initShaderProgram = function(gl) {\r\n\t\t\t// Initialize a shader program, so WebGL knows how to draw our data\r\n\t\t\tif(this.programInfo){\r\n\t\t\t\treturn this.programInfo;\r\n\t\t\t}\t\t\t\r\n\t\t\t//\r\n\t\t\t// creates a shader of the given type, uploads the source and\r\n\t\t\t// compiles it.\r\n\t\t\t//\r\n\t\t\tfunction loadShader(gl, type, source) {\r\n\t\t\t  const shader = gl.createShader(type);\r\n\r\n\t\t\t  // Send the source to the shader object\r\n\r\n\t\t\t  gl.shaderSource(shader, source);\r\n\r\n\t\t\t  // Compile the shader program\r\n\r\n\t\t\t  gl.compileShader(shader);\r\n\r\n\t\t\t  // See if it compiled successfully\r\n\r\n\t\t\t  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n\t\t\t\talert(`An error occurred compiling the shaders: ${gl.getShaderInfoLog(shader)}`);\r\n\t\t\t\tgl.deleteShader(shader);\r\n\t\t\t\treturn null;\r\n\t\t\t  }\r\n\r\n\t\t\t  return shader;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tconst vertexShader = loadShader(gl, gl.VERTEX_SHADER, Sprite.PROJECTION_VERTEX_SHADER);\r\n\t\t\tconst fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, Sprite.PROJECTION_FRAGMENT_SHADER);\r\n\r\n\t\t\t// Create the shader program\r\n\r\n\t\t\tconst shaderProgram = gl.createProgram();\r\n\t\t\tgl.attachShader(shaderProgram, vertexShader);\r\n\t\t\tgl.attachShader(shaderProgram, fragmentShader);\r\n\t\t\tgl.linkProgram(shaderProgram);\r\n\r\n\t\t\t// If creating the shader program failed, alert\r\n\r\n\t\t\tif (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\r\n\t\t\t\talert(`Unable to initialize the shader program: ${gl.getProgramInfoLog(shaderProgram)}`);\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.programInfo = {\r\n\t\t\t\tprogram: shaderProgram,\r\n\t\t\t\tattribLocations: {\r\n\t\t\t\t  vertexPosition: gl.getAttribLocation(shaderProgram, 'aVertexPosition'),\r\n\t\t\t\t  textureCoord: gl.getAttribLocation(shaderProgram, 'aTextureCoord'),\r\n\t\t\t\t  color: gl.getAttribLocation(shaderProgram, 'aVertexColor'),\r\n\t\t\t\t},\r\n\t\t\t\tuniformLocations: {\r\n\t\t\t\t  projectionMatrix: gl.getUniformLocation(shaderProgram, 'uProjectionMatrix'),\r\n\t\t\t\t  modelViewMatrix: gl.getUniformLocation(shaderProgram, 'uModelViewMatrix'),\r\n\t\t\t\t  uSampler: gl.getUniformLocation(shaderProgram, 'uSampler'),\r\n\t\t\t\t  xFormMatrix: gl.getUniformLocation(shaderProgram, 'uXFormMatrix'),\r\n\t\t\t\t  opacity: gl.getUniformLocation(shaderProgram, 'opacity'),\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t\treturn this.programInfo;\r\n\t\t}\r\n\t\t\r\n\t\tSprite.prototype.initBuffers = function(gl) {\r\n\t\t\tif(this.buffers){\r\n\t\t\t\treturn this.buffers;\r\n\t\t\t}\r\n\t\t\t// Create a buffer for the square's positions.\r\n\r\n\t\t\tconst positionBuffer = gl.createBuffer();\r\n\r\n\t\t\t// Select the positionBuffer as the one to apply buffer\r\n\t\t\t// operations to from here out.\r\n\r\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n\r\n\t\t\t// Now create an array of positions for the square.\r\n\t\t\tconst height = $gameMap.height() * $gameMap.tileHeight();\r\n\t\t\tconst width =  $gameMap.width() * $gameMap.tileWidth();\r\n\t\t\tconst positions = [\r\n\t\t\t\t0,  0,\r\n\t\t\t\t0,  height,\r\n\t\t\t\twidth, 0,\r\n\t\t\t\twidth, 0,\r\n\t\t\t\t0, height,\r\n\t\t\t\twidth, height,\r\n\t\t\t];\r\n\r\n\t\t\t// Now pass the list of positions into WebGL to build the\r\n\t\t\t// shape. We do this by creating a Float32Array from the\r\n\t\t\t// JavaScript array, then use it to fill the current buffer.\r\n\r\n\t\t\tgl.bufferData(gl.ARRAY_BUFFER,\r\n\t\t\t\tnew Float32Array(positions),\r\n\t\t\t\tgl.STATIC_DRAW);\r\n\r\n\r\n\t\t\t const textureCoordinates = [\r\n\t\t\t\t0, 0,\r\n\t\t\t\t0, 1,\r\n\t\t\t\t1, 0,\r\n\t\t\t\t1, 0,\r\n\t\t\t\t0, 1,\r\n\t\t\t\t1, 1,\r\n\t\t\t]\r\n\r\n\t\t\tconst textureCoordBuffer = gl.createBuffer();\r\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, textureCoordBuffer);\r\n\t\t\tgl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoordinates), gl.STATIC_DRAW);\t\t\t\t \r\n\t\t\t\t  \r\n\t\t\tthis.buffers = {\r\n\t\t\t\tposition: positionBuffer,\r\n\t\t\t\ttextureCoord: textureCoordBuffer\r\n\t\t\t};\r\n\t\t\treturn this.buffers;\r\n\t\t}\r\n\t\t\r\n\t\tSprite.prototype.prepareTexture = function(gl){\r\n\t\t\tconst _this = this;\r\n\t\t\tif(this.projectedTexture){\r\n\t\t\t\treturn this.projectedTexture;\r\n\t\t\t}\r\n\t\t\tconst texture = gl.createTexture();\r\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, texture);\r\n\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA,\r\n\t\t\t\t\t\t  gl.RGBA, gl.UNSIGNED_BYTE, _this.bitmap.canvas);\r\n\r\n\t\t\t// WebGL1 has different requirements for power of 2 images\r\n\t\t\t// vs non power of 2 images so check if the image is a\r\n\t\t\t// power of 2 in both dimensions.\r\n\t\t\tif (isPowerOf2(_this.bitmap.canvas.width) && isPowerOf2(_this.bitmap.canvas.height)) {\r\n\t\t\t   // Yes, it's a power of 2. Generate mips.\r\n\t\t\t   gl.generateMipmap(gl.TEXTURE_2D);\r\n\t\t\t} else {\r\n\t\t\t   // No, it's not a power of 2. Turn off mips and set\r\n\t\t\t   // wrapping to clamp to edge\r\n\t\t\t   gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n\t\t\t   gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\t\t\t   gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfunction isPowerOf2(value) {\r\n\t\t\t  return (value & (value - 1)) === 0;\r\n\t\t\t}\r\n\t\t\tthis.projectedTexture = texture;\r\n\t\t\treturn this.projectedTexture;\r\n\t\t}\r\n\t\t\r\n\t\tSprite.prototype._renderWebGL = function(renderer) {\r\n\t\t\tif (this.bitmap) {\r\n\t\t\t\tthis.bitmap.touch();\r\n\t\t\t}\r\n\t\t\tif(this.bitmap && !this.bitmap.isReady()){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (this.texture.frame.width > 0 && this.texture.frame.height > 0) {\r\n\t\t\t\tif (this._bitmap) {\r\n\t\t\t\t\tthis._bitmap.checkDirty();\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//copy of pixi-v4 internal code\r\n\t\t\t\tthis.calculateVertices();\r\n\r\n\t\t\t\tif (this.pluginName === 'sprite' && this._isPicture) {\r\n\t\t\t\t\t// use heavy renderer, which reduces artifacts and applies corrent blendMode,\r\n\t\t\t\t\t// but does not use multitexture optimization\r\n\t\t\t\t\tthis._speedUpCustomBlendModes(renderer);\r\n\t\t\t\t\trenderer.setObjectRenderer(renderer.plugins.picture);\r\n\t\t\t\t\trenderer.plugins.picture.render(this);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// use pixi super-speed renderer\r\n\t\t\t\t\trenderer.setObjectRenderer(renderer.plugins[this.pluginName]);\t\t\t\t\t\r\n\t\t\t\t\t//renderer.currentRenderer.renderer.gl.useProgram(renderer.currentRenderer.shader.program);\r\n\t\t\t\t\trenderer.plugins[this.pluginName].render(this);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tSprite.prototype.renderWebGL = function(renderer){\r\n\t\t\tconst _this = this;\r\n\t\t\tif(this._isProjected && (typeof UltraMode7 != \"undefined\") && UltraMode7.isActive() && $gameMap.ultraMode7ProjectionMatrix && $gameMap.ultraMode7ModelviewMatrix){\r\n\t\t\t\tlet gl = renderer.gl;\r\n\t\t\t\tlet prevBuffer = renderer.plugins[\"sprite\"].vertexBuffers[0];\r\n\t\t\t\tlet prevShaderProgram = renderer.gl.getParameter(renderer.gl.CURRENT_PROGRAM);\t\t\t\t\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tconst programInfo = this.initShaderProgram(gl);\t\t\t\t\t\t\t\t\r\n\t\t\t\tconst buffers = this.initBuffers(gl);\t\t\t\t\r\n\t\t\t\tconst texture = this.prepareTexture(gl);\r\n\t\t\t\t/*\r\n\t\t\t\t// gl.NEAREST is also allowed, instead of gl.LINEAR, as neither mipmap.\r\n\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n\t\t\t\t// Prevents s-coordinate wrapping (repeating).\r\n\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n\t\t\t\t// Prevents t-coordinate wrapping (repeating).\r\n\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\t\t\t\t*/\r\n\t\t\t\t\r\n\t\t\t\tfunction drawScene(gl, programInfo, buffers) {\t\t\t\t\t  \r\n\t\t\t\t\t  //[hack]if opacity == 0 do not use additive blending, as it seems to break hiding the sprite\r\n\t\t\t\t\t  if(_this._blendAdditive && _this.opacity != 0){\t\t\t\t\t\t\r\n\t\t\t\t\t\tgl.blendFunc(1, 771);//default PIXI blend mode\r\n\t\t\t\t\t  } else {\r\n\t\t\t\t\t\tgl.blendFuncSeparate(gl.SRC_ALPHA,gl.ONE_MINUS_SRC_ALPHA,gl.ONE,gl.ONE_MINUS_SRC_ALPHA );\r\n\t\t\t\t\t  }\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t  const fieldOfView = 45 * Math.PI / 180;   // in radians\r\n\t\t\t\t\t  const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n\t\t\t\t\t  const zNear = 0;\r\n\t\t\t\t\t  const zFar = 100.0;\r\n\t\t\t\t\t  const projectionMatrix = glMatrix.mat4.create();\r\n\r\n\t\t\t\t\t  // note: glmatrix.js always has the first argument\r\n\t\t\t\t\t  // as the destination to receive the result.\r\n\t\t\t\t\t  glMatrix.mat4.perspective(projectionMatrix,\r\n\t\t\t\t\t\t\t\t\t   fieldOfView,\r\n\t\t\t\t\t\t\t\t\t   aspect,\r\n\t\t\t\t\t\t\t\t\t   zNear,\r\n\t\t\t\t\t\t\t\t\t   zFar);\r\n\r\n\t\t\t\t\t  // Set the drawing position to the \"identity\" point, which is\r\n\t\t\t\t\t  // the center of the scene.\r\n\t\t\t\t\t  const modelViewMatrix = glMatrix.mat4.create();\r\n\r\n\t\t\t\t\t  // Now move the drawing position a bit to where we want to\r\n\t\t\t\t\t  // start drawing the square.\r\n\r\n\t\t\t\t\t  glMatrix.mat4.translate(modelViewMatrix,     // destination matrix\r\n\t\t\t\t\t\t\t\t\t modelViewMatrix,     // matrix to translate\r\n\t\t\t\t\t\t\t\t\t [-0.0, 0.0, -6.0]);  // amount to translate\r\n\r\n\t\t\t\t\t  // Tell WebGL how to pull out the positions from the position\r\n\t\t\t\t\t  // buffer into the vertexPosition attribute.\r\n\t\t\t\t\t  {\r\n\t\t\t\t\t\tconst numComponents = 2;  // pull out 2 values per iteration\r\n\t\t\t\t\t\tconst type = gl.FLOAT;    // the data in the buffer is 32bit floats\r\n\t\t\t\t\t\tconst normalize = false;  // don't normalize\r\n\t\t\t\t\t\tconst stride = 0;         // how many bytes to get from one set of values to the next\r\n\t\t\t\t\t\t\t\t\t\t\t\t  // 0 = use type and numComponents above\r\n\t\t\t\t\t\tconst offset = 0;         // how many bytes inside the buffer to start from\r\n\t\t\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);\r\n\t\t\t\t\t\tgl.vertexAttribPointer(\r\n\t\t\t\t\t\t\tprogramInfo.attribLocations.vertexPosition,\r\n\t\t\t\t\t\t\tnumComponents,\r\n\t\t\t\t\t\t\ttype,\r\n\t\t\t\t\t\t\tnormalize,\r\n\t\t\t\t\t\t\tstride,\r\n\t\t\t\t\t\t\toffset);\r\n\t\t\t\t\t\tgl.enableVertexAttribArray(\r\n\t\t\t\t\t\t\tprogramInfo.attribLocations.vertexPosition);\r\n\t\t\t\t\t  }\r\n\t\t\t\t\t  \r\n\t\t\t\t\t  // tell webgl how to pull out the texture coordinates from buffer\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tconst num = 2; // every coordinate composed of 2 values\r\n\t\t\t\t\t\t\tconst type = gl.FLOAT; // the data in the buffer is 32-bit float\r\n\t\t\t\t\t\t\tconst normalize = false; // don't normalize\r\n\t\t\t\t\t\t\tconst stride = 0; // how many bytes to get from one set to the next\r\n\t\t\t\t\t\t\tconst offset = 0; // how many bytes inside the buffer to start from\r\n\t\t\t\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffers.textureCoord);\r\n\t\t\t\t\t\t\tgl.vertexAttribPointer(programInfo.attribLocations.textureCoord, num, type, normalize, stride, offset);\r\n\t\t\t\t\t\t\tgl.enableVertexAttribArray(programInfo.attribLocations.textureCoord);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// Tell WebGL to use our program when drawing\r\n\r\n\t\t\t\t\t\tgl.useProgram(programInfo.program);\r\n\r\n\t\t\t\t\t\t// Set the shader uniforms\r\n\r\n\t\t\t\t\t\tgl.uniformMatrix4fv(\r\n\t\t\t\t\t\t\tprogramInfo.uniformLocations.projectionMatrix,\r\n\t\t\t\t\t\t\tfalse,\r\n\t\t\t\t\t\t\t//projectionMatrix\r\n\t\t\t\t\t\t\t$gameMap.ultraMode7ProjectionMatrix.data\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tgl.uniformMatrix4fv(\r\n\t\t\t\t\t\t\tprogramInfo.uniformLocations.modelViewMatrix,\r\n\t\t\t\t\t\t\tfalse,\r\n\t\t\t\t\t\t\t//modelViewMatrix\r\n\t\t\t\t\t\t\t$gameMap.ultraMode7ModelviewMatrix.data\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar Sx = 1.0, Sy = 1.0, Sz = 1.0;\r\n\t\t\t\t\t\t var xFormMatrix = [\r\n\t\t\t\t\t\t\tSx,   0.0,  0.0,  0.0,\r\n\t\t\t\t\t\t\t0.0,  Sy,   0.0,  0.0,\r\n\t\t\t\t\t\t\t0.0,  0.0,  Sz,   0.0,\r\n\t\t\t\t\t\t\t0.0,  0.0,  0.0,  1.0  \r\n\t\t\t\t\t\t ];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tgl.uniformMatrix4fv(\r\n\t\t\t\t\t\t\tprogramInfo.uniformLocations.xFormMatrix,\r\n\t\t\t\t\t\t\tfalse,\r\n\t\t\t\t\t\t\tnew Float32Array(xFormMatrix)\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t// Tell WebGL we want to affect texture unit 0\r\n\t\t\t\t\t\tgl.activeTexture(gl.TEXTURE0);\r\n\r\n\t\t\t\t\t\t// Bind the texture to texture unit 0\r\n\t\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, texture);\r\n\r\n\t\t\t\t\t\t// Tell the shader we bound the texture to texture unit 0\r\n\t\t\t\t\t\tgl.uniform1i(programInfo.uniformLocations.uSampler, 0);  \r\n\t\t\t\t\t\t \r\n\t\t\t\t\t\r\n\t\t\t\t\t\tgl.uniform1f(programInfo.uniformLocations.opacity, _this.opacity / 255);  \t\t\t\r\n\r\n\t\t\t\t\t  {\r\n\t\t\t\t\t\tconst offset = 0;\r\n\t\t\t\t\t\tconst vertexCount = 6;\r\n\t\t\t\t\t\tgl.drawArrays(gl.TRIANGLE_STRIP, offset, vertexCount);\r\n\t\t\t\t\t  }\r\n\t\t\t\t\t  gl.blendFunc(1, 771);//default PIXI blend mode\r\n\t\t\t\t}\r\n\r\n\t\t\t\t\r\n\t\t\t\tdrawScene(gl, programInfo, buffers);\r\n\t\t\t\t\r\n\t\t\t\trenderer.gl.useProgram(prevShaderProgram);\r\n\t\t\t\t//prevBuffer.bind();\t\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tif (!this.visible || this.worldAlpha <= 0 || !this.renderable) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// do a quick check to see if this element has a mask or a filter.\r\n\t\t\tif (this._mask || this.filters && this.filters.length) {\r\n\t\t\t\tthis.renderAdvancedWebGL(renderer);\r\n\t\t\t} else {\r\n\t\t\t\tthis._renderWebGL(renderer);\r\n\r\n\t\t\t\t// simple render children!\r\n\t\t\t\tfor (var i = 0, j = this.children.length; i < j; ++i) {\r\n\t\t\t\t\tthis.children[i].renderWebGL(renderer);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tSprite_Character.prototype.setupAnimation = function() {\r\n\t\t\tif (this._character.animationId() > 0) {\r\n\t\t\t\tvar animation = $dataAnimations[this._character.animationId()];\r\n\t\t\t\tvar animOptions = this._character._animationOptions;\r\n\t\t\t\tif(animOptions){\r\n\t\t\t\t\tObject.keys(animOptions).forEach(function(key){\r\n\t\t\t\t\t\tanimation[key] = animOptions[key];\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tthis.startAnimation(animation, false, 0);\r\n\t\t\t\tthis._character.startAnimation();\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tSprite_Animation.prototype.setup = function(target, animation, mirror, delay) {\r\n\t\t\tthis._target = target;\r\n\t\t\tthis._animation = animation;\r\n\t\t\tthis._mirror = mirror;\r\n\t\t\tthis._delay = delay;\r\n\t\t\tif (this._animation) {\r\n\t\t\t\tthis.remove();\r\n\t\t\t\tthis.setupRate();\r\n\t\t\t\tthis.setupDuration();\r\n\t\t\t\tthis.loadBitmaps();\r\n\t\t\t\tthis.createSprites();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t};\r\n\t\t\r\n\t\tSprite_Animation.prototype.setupRate = function() {\r\n\t\t\tthis._rate = 5 - $gameSystem.getBattleSpeed();\r\n\t\t};\r\n\t\t\r\n\t\tSprite_Animation.prototype.updateMain = function() {\r\n\t\t\tif (this.isPlaying() && this.isReady()) {\r\n\t\t\t\tif (this._delay > 0) {\r\n\t\t\t\t\tthis._delay--;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._duration--;\r\n\t\t\t\t\tthis.updatePosition();\r\n\t\t\t\t\tif (this._duration % this._rate === 0) {\r\n\t\t\t\t\t\tthis.updateFrame();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\r\n\t\tSprite_Animation.prototype.update = function() {\r\n\t\t\tSprite.prototype.update.call(this);\r\n\t\t\tthis.updateMain();\r\n\t\t\tthis._noFlash = this._animation.noflash;\r\n\t\t\tthis.updateFlash();\r\n\t\t\tthis.updateScreenFlash();\r\n\t\t\t\r\n\t\t\tthis.updateHiding();\r\n\t\t\tSprite_Animation._checker1 = {};\r\n\t\t\tSprite_Animation._checker2 = {};\t\t\r\n\t\t\t\r\n\t\t\tthis.scale.x = 1;\r\n\t\t\tthis.scale.y = 1;\t\r\n\t\t\tthis.rotation = 0;\r\n\t\t\tif(this._animation.direction){\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tif(this._animation.direction == \"down\"){\r\n\t\t\t\t\tthis.scale.y = -1;\t\r\n\t\t\t\t}\r\n\t\t\t\tif(this._animation.direction == \"left\" || this._animation.direction == \"right\"){\t\t\t\t\r\n\t\t\t\t\tthis.scale.x = -1;\t\t\r\n\t\t\t\t\tthis.rotation = 90 * Math.PI / 180;\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(this._animation.direction == \"left\"){\r\n\t\t\t\t\tthis.scale.y = -1;\t\r\n\t\t\t\t}\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tif(this._animation.offset){\r\n\t\t\t\t\tvar offset = this._animation.offset[this._animation.direction];\t\r\n\t\t\t\t\tif(offset){\r\n\t\t\t\t\t\tthis.x+=offset.x;\r\n\t\t\t\t\t\tthis.y+=offset.y;\r\n\t\t\t\t\t}\t\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(this._animation.scale){\r\n\t\t\t\tthis.scale.y*=this._animation.scale;\r\n\t\t\t\tthis.scale.x*=this._animation.scale;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t};\r\n\t\t\t\r\n\t\tSprite_Animation.prototype.updatePosition = function() {\r\n\t\t\tif (this._animation.position === 3) {\r\n\t\t\t\tthis.x = this.parent.width / 2;\r\n\t\t\t\tthis.y = this.parent.height / 2;\r\n\t\t\t} else {\r\n\t\t\t\tvar parent = this._target.parent;\r\n\t\t\t\tvar grandparent = parent ? parent.parent : null;\r\n\t\t\t\tthis.x = this._target.x;\r\n\t\t\t\tthis.y = this._target.y;\r\n\t\t\t\tif (this.parent === grandparent) {\r\n\t\t\t\t\tthis.x += parent.x;\r\n\t\t\t\t\tthis.y += parent.y;\r\n\t\t\t\t}\r\n\t\t\t\tif (this._animation.position === 0) {\r\n\t\t\t\t\tthis.y -= $gameMap.tileHeight();\r\n\t\t\t\t} else if (this._animation.position === 1) {\r\n\t\t\t\t\tthis.y -= $gameMap.tileHeight() / 2 - 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tvar _SRPG_Sprite_Actor_setActorHome = Sprite_Actor.prototype.setActorHome;\r\n\t\tSprite_Actor.prototype.setActorHome = function(index) {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tthis.setHome(Graphics.width - 216 - index * 240, Graphics.height / 2 + 48);\r\n\t\t\t} else {\r\n\t\t\t\t_SRPG_Sprite_Actor_setActorHome.call(this, index);\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tSprite_Character.prototype.allBodyPartsAvailable = function(character) {\r\n\t\t\treturn this._upperBody && this._lowerBody && this._upperBodyTop && this._upperBodyOverlay && this._lowerBodyOverlay;\r\n\t\t}\r\n\t\t\r\n\t\tSprite_Character.prototype.update = function(character) {\r\n\t\t\tSprite_Base.prototype.update.call(this);\r\n\t\t\tif(!this.visible) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis.updateBitmap();\r\n\t\t\tthis.updateFrame();\r\n\t\t\tthis.updatePosition();\r\n\t\t\tthis.updateAnimation();\r\n\t\t\tthis.updateBalloon();\r\n\t\t\tthis.updateOther();\r\n\t\t\tif (this._character.isEvent() == true) {\r\n\t\t\t\tvar battlerArray = $gameSystem.EventToUnit(this._character.eventId());\r\n\t\t\t\tif (battlerArray) {\r\n\t\t\t\t\tif($gameSystem.isEnemy(battlerArray[1]) && !ENGINE_SETTINGS.KEEP_ENEMY_SPRITE_ORIENTATION) {\r\n\t\t\t\t\t\tthis.scale.x = -1;\t\t\t\t\t\t\t\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.scale.x = 1;\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(battlerArray[0] === 'actor' && $gameTemp.doingManualDeploy){\r\n\t\t\t\t\t\tthis._frameCount+=2;\r\n\t\t\t\t\t\tthis._frameCount %= 200;\r\n\t\t\t\t\t\tif(this._frameCount < 100){\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tthis.opacity = this._frameCount + 80;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthis.opacity = 200 + 80 - this._frameCount;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.opacity = 255;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar refX;\r\n\t\t\t\t\tvar refY;\r\n\t\t\t\t\tif(this._character._x != this._character._realX || this._character._y != this._character._realY){\r\n\t\t\t\t\t\tif($gameMap.hasStarTile(this._character._x,  this._character._y) || $gameMap.hasStarTile(this._character._prevX,  this._character._prevY)){\r\n\t\t\t\t\t\t\t//this._upperBodyTop.opacity = 0;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif($gameSystem.foregroundSpriteToggleState == 0){\r\n\t\t\t\t\t\t\t\t//this._upperBodyOverlay.opacity = 0;\r\n\t\t\t\t\t\t\t\t//this._lowerBodyOverlay.opacity = 0;\r\n\t\t\t\t\t\t\t\tthis.opacity = 0;\r\n\t\t\t\t\t\t\t} else if($gameSystem.foregroundSpriteToggleState == 1){\r\n\t\t\t\t\t\t\t\t//this._upperBodyOverlay.opacity = 128;\r\n\t\t\t\t\t\t\t\t//this._lowerBodyOverlay.opacity = 128;\r\n\t\t\t\t\t\t\t\tthis.opacity = 128;\r\n\t\t\t\t\t\t\t} else if($gameSystem.foregroundSpriteToggleState == 2){\r\n\t\t\t\t\t\t\t\t//this._upperBodyOverlay.opacity = 255;\r\n\t\t\t\t\t\t\t\t//this._lowerBodyOverlay.opacity = 255;\r\n\t\t\t\t\t\t\t\tthis.opacity = 255;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//this._upperBodyOverlay.opacity = 128;\r\n\t\t\t\t\t\t\t//this._lowerBodyOverlay.opacity = 128;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t//this._upperBodyTop.opacity = 255;\r\n\t\t\t\t\t\t\t//this._upperBody.opacity = 0;\r\n\t\t\t\t\t\t\tthis.opacity = 255;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t/*if($gameMap.hasStarTile(this._character._x,  this._character._y)){\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif($gameSystem.foregroundSpriteToggleState == 0){\r\n\t\t\t\t\t\t\t\tthis.opacity = 0;\r\n\t\t\t\t\t\t\t} else if($gameSystem.foregroundSpriteToggleState == 1){\r\n\t\t\t\t\t\t\t\tthis.opacity = 128;\r\n\t\t\t\t\t\t\t} else if($gameSystem.foregroundSpriteToggleState == 2){\r\n\t\t\t\t\t\t\t\tthis.opacity = 255;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthis.opacity = 255;\r\n\t\t\t\t\t\t}*/\r\n\t\t\t\t\t}\t\r\n\t\t\t\t\tif(//$gameTemp.activeEvent() == this._character || \r\n\t\t\t\t\t\t$gameTemp._TargetEvent == this._character ||\r\n\t\t\t\t\t\t($gameSystem.isSubBattlePhase() == \"actor_move\" && $gameTemp.activeEvent() == this._character) || \r\n\t\t\t\t\t\t($gameSystem.isSubBattlePhase()== \"enemy_move\" && $gameTemp.activeEvent() == this._character) || \r\n\t\t\t\t\t\t$gameSystem.isSubBattlePhase()== \"actor_target\" || \r\n\t\t\t\t\t\t$gameSystem.isSubBattlePhase() == \"enemy_targeting_display\" ||\r\n\t\t\t\t\t\t$gameSystem.isSubBattlePhase() == \"post_move_command_window\" ||\r\n\t\t\t\t\t\t$gameSystem.isSubBattlePhase() == \"rearrange_deploys\" ||\r\n\t\t\t\t\t\t$gameSystem.isSubBattlePhase() == \"hover_deploy_btn\"\t\t\t\t\t\t\t\r\n\t\t\t\t\t){\r\n\t\t\t\t\t\tthis.opacity = 255;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet currentTerrain = $statCalc.getCurrentTerrainIdx(battlerArray[1]);\r\n\t\t\t\t\tlet terrainDef = $terrainTypeManager.getTerrainDefinition(currentTerrain);\r\n\t\t\t\t\tif(terrainDef.opacityMod){\r\n\t\t\t\t\t\tthis.opacity+=terrainDef.opacityMod;\r\n\t\t\t\t\t}\t\r\n\t\t\t\t\t\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\t\t\r\n\t\t}\r\n\t\t\r\n\t\tSprite_Character.prototype.isTurnEndUnit = function() {\r\n\t\t\tif (this._character.isEvent() == true) {\r\n\t\t\t\tvar battlerArray = $gameSystem.EventToUnit(this._character.eventId());\r\n\t\t\t\tif (battlerArray) {\r\n\t\t\t\t\tif (battlerArray[0] === 'actor' || battlerArray[0] === 'enemy') {\r\n\t\t\t\t\t\treturn battlerArray[1].srpgTurnEnd();\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t//キャラクタービットマップの更新\r\n\t\tvar _SRPG_Sprite_Character_setCharacterBitmap = Sprite_Character.prototype.setCharacterBitmap;\r\n\t\tSprite_Character.prototype.setCharacterBitmap = function() {\r\n\t\t\t_SRPG_Sprite_Character_setCharacterBitmap.call(this);\r\n\t\t\tthis._turnEndBitmap = ImageManager.loadCharacter('srpg_set');\r\n\t\t\tthis._frameCount = 0;\r\n\t\t\r\n\t\t};\r\n\t\t\r\n\t\tSprite_Character.prototype.setTurnEnd = function(sprite) {\r\n\t\t\tthis._turnEndSprite = sprite;\r\n\t\t\tthis._turnEndSprite.anchor.x = 0;\r\n\t\t\tthis._turnEndSprite.anchor.y = 1;\r\n\t\t}\r\n\r\n\t\t\r\n\t\tSprite_Character.prototype.updatePosition = function() {\r\n\t\t\tthis.x = this._character.screenX();\r\n\t\t\tthis.y = this._character.screenY();\r\n\t\t\tthis.z = this._character.screenZ();\r\n\t\t\t\r\n\t\t\tif(this._turnEndSprite){\r\n\t\t\t\tthis._turnEndSprite.x = this.x - 20;\r\n\t\t\t\tthis._turnEndSprite.y = this.y - this._character._floatOffset;\r\n\t\t\t\tthis._turnEndSprite.z = this.z + 2;\t\r\n\t\t\t}\t\t\t\r\n\t\t};\r\n\t\t\r\n\t\t//キャラクターフレームの更新\r\n\t\tvar _SRPG_Sprite_Character_updateCharacterFrame = Sprite_Character.prototype.updateCharacterFrame;\r\n\t\tSprite_Character.prototype.updateCharacterFrame = function() {\r\n\t\t\tvar pw = this.patternWidth();\r\n\t\t\tvar ph = this.patternHeight();\r\n\t\t\tvar sx;\r\n\t\t\tvar sy;\r\n\t\t\tif(ENGINE_SETTINGS.USE_SINGLE_MAP_SPRITE){\r\n\t\t\t\tsx = (this.characterBlockX() + 0) * pw;\r\n\t\t\t\tsy = (this.characterBlockY() + 0) * ph;\r\n\t\t\t} else {\r\n\t\t\t\tsx = (this.characterBlockX() + this.characterPatternX()) * pw;\r\n\t\t\t\tsy = (this.characterBlockY() + this.characterPatternY()) * ph;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tlet isMode7 = (typeof UltraMode7 != \"undefined\") && UltraMode7.isActive();\r\n\t\t\t\r\n\t\t\tif (this._turnEndSprite) {\r\n\t\t\t\tthis._turnEndSprite.visible = false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif($gameTemp.intermissionPending){\r\n\t\t\t\t//workaround for issue where turn end sprites would show up for a couple seconds when transitioning to the intermission\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tthis.setFrame(sx, sy, pw, ph);\r\n\t\t\tif(($gameSystem.isSubBattlePhase() === 'actor_map_target_confirm' || $gameSystem.isSubBattlePhase() == 'actor_target_spirit') && this._character.eventId){\r\n\t\t\t\tif(($gameSystem.isSubBattlePhase() !== 'actor_map_target_confirm' || $gameTemp.isMapTarget(this._character.eventId())) &&\r\n\t\t\t\t\t($gameSystem.isSubBattlePhase() !== 'actor_target_spirit' || $gameTemp.isSpiritTarget(this._character.eventId()))\r\n\t\t\t\t){\t\t\t\t\r\n\t\t\t\t\tthis._currentColorState = \"\"\r\n\t\t\t\t\tthis.filters = [];\r\n\t\t\t\t\tthis.setBlendColor([0, 0, 0, 0]);\t\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t} else {\t\t\t\t\t\t\r\n\t\t\t\t\tthis.setBlendColor([64, 64, 64, 128]);\t\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t}\t\t\r\n\t\t\t\t\r\n\t\t\t} else if (this._character.isEvent() == true) {\r\n\t\t\t\tthis.setBlendColor([0, 0, 0, 0]);\t\r\n\t\t\t\t\r\n\t\t\t\tif(this.isTurnEndUnit()){\r\n\r\n\t\t\t\t\tif(this._currentColorState != \"grayed_out\"){\r\n\t\t\t\t\t\tthis._currentColorState = \"grayed_out\"\r\n\t\t\t\t\t\tlet colorMatrix = new PIXI.filters.ColorMatrixFilter();\r\n\t\t\t\t\t\tcolorMatrix.greyscale(0.3);\r\n\t\t\t\t\t\tthis.filters = [colorMatrix];\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif(this._currentColorState == \"grayed_out\"){\r\n\t\t\t\t\t\tthis._currentColorState = \"\"\r\n\t\t\t\t\t\tthis.filters = [];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//return;\r\n\t\t\t}\t\t\t\t\r\n\t\t\t/*\r\n\t\t\tthis.visible = false;\r\n\t\t\t\r\n\t\t\t//hack to ensure there's no weird overlap issues when deploying an actor from a ship\r\n\t\t\tif($gameTemp.activeShip && $gameTemp.activeShip.event.eventId() != this._character.eventId()){\r\n\t\t\t\tif(this._character.posX() == $gameTemp.activeShip.position.x && this._character.posY() == $gameTemp.activeShip.position.y){\r\n\t\t\t\t\tthis.visible = true;\r\n\t\t\t\t\tthis.setFrame(sx, sy, pw, ph);\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\t\t\r\n\t\t\tthis.setFrame(sx, sy, pw, ph);*/\r\n\t\t\t//this.visible = false;\r\n\t\t\tif ($gameSystem.isSRPGMode() == true && this._character.isEvent() == true) {\r\n\t\t\t\tvar battlerArray = $gameSystem.EventToUnit(this._character.eventId());\r\n\t\t\t\tif (battlerArray) {\t\t\t\t\r\n\t\t\t\t\tvar pw = this._turnEndBitmap.width / 12;\r\n\t\t\t\t\tvar ph = this._turnEndBitmap.height / 8;\r\n\t\t\t\t\tif ((battlerArray[0] === 'actor' || battlerArray[0] === 'enemy') &&\r\n\t\t\t\t\t\tbattlerArray[1].isAlive() && !this._character.isErased()) {\r\n\t\t\t\t\t\tif (battlerArray[1].isRestricted()) {\r\n\t\t\t\t\t\t\tvar sx = (6 + this.characterPatternX()) * pw;\r\n\t\t\t\t\t\t\tvar sy = (0 + this.characterPatternY()) * ph;\r\n\t\t\t\t\t\t\tthis.createTurnEndSprites();\r\n\t\t\t\t\t\t\tthis._turnEndSprite.bitmap = this._turnEndBitmap;\r\n\t\t\t\t\t\t\tthis._turnEndSprite.visible = true;\r\n\t\t\t\t\t\t\tthis._turnEndSprite.setFrame(sx, sy, pw, ph);\r\n\t\t\t\t\t\t} else if (this.isTurnEndUnit() == true) {\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tvar sx = (3 + this.characterPatternX()) * pw;\r\n\t\t\t\t\t\t\tvar sy = (0 + this.characterPatternY()) * ph;\r\n\t\t\t\t\t\t\tthis.createTurnEndSprites();\r\n\t\t\t\t\t\t\tthis._turnEndSprite.bitmap = this._turnEndBitmap;\r\n\t\t\t\t\t\t\tthis._turnEndSprite.visible = true;\r\n\t\t\t\t\t\t\tthis._turnEndSprite.setFrame(sx, sy, pw, ph);\r\n\t\t\t\t\t\t} else if (battlerArray[1].isAutoBattle()) {\r\n\t\t\t\t\t\t\tvar sx = (9 + this.characterPatternX()) * pw;\r\n\t\t\t\t\t\t\tvar sy = (0 + this.characterPatternY()) * ph;\r\n\t\t\t\t\t\t\tthis.createTurnEndSprites();\r\n\t\t\t\t\t\t\tthis._turnEndSprite.bitmap = this._turnEndBitmap;\r\n\t\t\t\t\t\t\tthis._turnEndSprite.visible = true;\r\n\t\t\t\t\t\t\tthis._turnEndSprite.setFrame(sx, sy, pw, ph);\r\n\t\t\t\t\t\t} else if (this._turnEndSprite) {\r\n\t\t\t\t\t\t\tthis._turnEndSprite.visible = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (this._turnEndSprite) {\r\n\t\t\t\t\t\tthis._turnEndSprite.visible = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t};\r\n\t\t\r\n\r\n\t\t//ターン終了の表示を作る\r\n\t\tSprite_Character.prototype.createTurnEndSprites = function() {\r\n\t\t\tif (!this._turnEndSprite) {\r\n\t\t\t\tthis._turnEndSprite = new Sprite();\r\n\t\t\t\tthis._turnEndSprite.anchor.x = 0.5;\r\n\t\t\t\tthis._turnEndSprite.anchor.y = 1;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\tthis.addChild(this._turnEndSprite);\r\n\t\t\t}\r\n\t\t};\t\r\n\t}\t\r\n\t\r\n\t\r\n\t\r\n\tfunction Sprite_Player() {\r\n        this.initialize.apply(this, arguments);\r\n\t\t\r\n    }\r\n\r\n    Sprite_Player.prototype = Object.create(Sprite_Character.prototype);\r\n    Sprite_Player.prototype.constructor = Sprite_Player;\r\n\t\r\n\tconst UltraMode7_Sprite_Player_prototype_update = Sprite_Player.prototype.update;\r\n\tSprite_Player.prototype.update = function(){\r\n\t\tif((!$gameMap || !$gameMap._interpreter || !$gameMap._interpreter.isRunning()) && ENGINE_SETTINGS.CURSOR_TINT_INFO && ENGINE_SETTINGS.CURSOR_TINT_INFO.enabled && $gameTemp.summaryUnit){\r\n\t\t\tthis.setBlendColor(ENGINE_SETTINGS.CURSOR_TINT_INFO.colors[$gameSystem.getFactionId($gameTemp.summaryUnit)]);\r\n\t\t} else {\r\n\t\t\tthis.setBlendColor([0, 0, 0, 0]);\r\n\t\t}\t\r\n\t\tif (!UltraMode7.isActive())\r\n\t\t{\r\n\t\t\tUltraMode7_Sprite_Player_prototype_update.call(this);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!!this._character)\r\n\t\t{\r\n\t\t\tthis._ultraMode7PreUpdate();\r\n\t\t}\r\n\t\tUltraMode7_Sprite_Player_prototype_update.call(this);\r\n\t\tif (!!this._character)\r\n\t\t{\r\n\t\t\tthis._ultraMode7Update();\r\n\t\t}\r\n\t\t\t\r\n\t};\r\n\t\r\n\tSprite_Player.prototype.updatePosition = function() {\r\n\t\tthis.x = this._character.screenX();\r\n\t\tthis.y = this._character.screenY();\r\n\t\tthis.z = this._character.screenZ();\r\n\t\t\r\n\t\tif($gamePlayer.followedEvent && $gameTemp.followMove){\t\t\t\r\n\t\t\tthis.y = this.y + ($gamePlayer.followedEvent._floatOffset);\t\t\r\n\t\t} else if($gameTemp.movingCursorByScript){\r\n\t\t\tvar newUnit = $statCalc.activeUnitAtPosition({x: this._character._x, y: this._character._y});\r\n\t\t\tvar prevUnit = $statCalc.activeUnitAtPosition({x: this._character._prevX, y: this._character._prevY});\r\n\t\t\tif(newUnit){\r\n\t\t\t\tthis.y = this.y + newUnit.event._floatOffset;\t\t\r\n\t\t\t\t//console.log(1);\t\r\n\t\t\t} else if(prevUnit){\r\n\t\t\t\tthis.y = this.y + prevUnit.event._floatOffset;\t\t\r\n\t\t\t\t//console.log(0);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvar prevUnit = $statCalc.activeUnitAtPosition({x: this._character._prevX, y: this._character._prevY});\r\n\t\t\tvar prevHoverState = prevUnit && $statCalc.getFlyingAnimInfo(prevUnit);\r\n\t\t\tvar newUnit = $statCalc.activeUnitAtPosition({x: this._character._x, y: this._character._y});\r\n\t\t\tvar newHoverState = newUnit && $statCalc.getFlyingAnimInfo(newUnit);\r\n\t\t\tif(newUnit && newUnit.event.transitioningFloat){\r\n\t\t\t\tthis.y = this.y + newUnit.event._floatOffset;\t\t\r\n\t\t\t} else if(prevHoverState == newHoverState){\r\n\t\t\t\tif(prevHoverState){\r\n\t\t\t\t\tthis.y = this.y + (newUnit.event._floatOffset);\r\n\t\t\t\t}\t\t\t\r\n\t\t\t} else if(prevHoverState || newHoverState ){\r\n\t\t\t\tvar floatOffset = 0;\r\n\t\t\t\tif(prevHoverState && prevUnit){\r\n\t\t\t\t\tfloatOffset = prevUnit.event._floatOffset;\r\n\t\t\t\t}\r\n\t\t\t\tif(newHoverState && newUnit){\r\n\t\t\t\t\tfloatOffset = newUnit.event._floatOffset;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar delta = 0;\r\n\t\t\t\tif(this._character._x != this._character._realX || this._character._y != this._character._realY){\t\t\t\t\r\n\t\t\t\t\tif(this._character._x != this._character._realX){\r\n\t\t\t\t\t\tdelta = Math.abs(this._character._x - this._character._realX);\r\n\t\t\t\t\t} else if(this._character._y != this._character._realY){\r\n\t\t\t\t\t\tdelta = Math.abs(this._character._y - this._character._realY);\r\n\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\tvar ratio;\r\n\t\t\t\tif(newHoverState){\r\n\t\t\t\t\tratio = 1 - delta;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tratio = 0 + delta;\r\n\t\t\t\t}\r\n\t\t\t\tthis.y = this.y + (floatOffset * ratio);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.y-=(ENGINE_SETTINGS.CURSOR_OFFSET || 0);\r\n\t};\r\n\t\r\n//====================================================================\r\n// ●Sprite_MapEffect\r\n//====================================================================\t\r\n\t\r\n\tfunction Sprite_MapEffect() {\r\n\t\tthis.initialize.apply(this, arguments);\r\n\t}\r\n\r\n\tSprite_MapEffect.prototype = Object.create(Sprite_Base.prototype);\r\n\tSprite_MapEffect.prototype.constructor = Sprite_MapEffect;\r\n\r\n\tSprite_MapEffect.prototype.initialize = function(spriteInfo, position) {\r\n\t\tSprite_Base.prototype.initialize.call(this);\t\t\r\n\t\tthis.bitmap =  ImageManager.loadNormalBitmap('img/SRWMapEffects/'+spriteInfo.name+\".png\");\r\n\t\tthis.anchor.x = 0.5;\r\n\t\tthis.anchor.y = 0.5;\r\n\t\tthis._animationFrame = 0;\r\n\t\tthis.visible = false;\r\n\t\tthis._frameSize = spriteInfo.frameSize;\r\n\t\tthis._sheetHeight = spriteInfo.sheetHeight;\r\n\t\tthis._sheetWidth = spriteInfo.sheetWidth;\r\n\t\tthis._frames = spriteInfo.frames;\r\n\t\tthis._frameCounter = 0;\r\n\t\tthis._animationSpeed = spriteInfo.animationSpeed || 2;\r\n\t\tthis._position = position;\r\n\t\tthis._positionOffset = spriteInfo.offset || {x: 0, y: 0}\r\n\t\tthis.setFrame(0 * this._frameSize, 0 * this._frameSize, this._frameSize, this._frameSize);\r\n\t};\r\n\t\r\n\tSprite_MapEffect.prototype.updatePosition = function() {\r\n\t\tthis.x = this._position.x + this._positionOffset.x;\r\n\t\tthis.y = this._position.y + this._positionOffset.y;\r\n\t\tthis.z = 999;\r\n\t}\r\n\t\r\n\tSprite_MapEffect.prototype.update = function() {\t\r\n\t\tthis.updatePosition();\r\n\t\tif(this._animationFrame > this._frames){\r\n\t\t\tthis.visible = false;\r\n\t\t\tthis.parent.removeChild(this);\r\n\t\t} else {\t\t\t\t\t\t\t\t\r\n\t\t\tthis.visible = true;\r\n\t\t\tvar col = this._animationFrame % this._sheetWidth;\r\n\t\t\tvar row = Math.floor(this._animationFrame / this._sheetWidth);\r\n\t\t\tthis.setFrame(col * this._frameSize, row * this._frameSize, this._frameSize, this._frameSize);\r\n\t\t\tthis._frameCounter++;\r\n\t\t\tif(this._frameCounter >= this._animationSpeed){\r\n\t\t\t\tthis._animationFrame+=$gameSystem.getBattleSpeed();\r\n\t\t\t\tthis._frameCounter = 0;\r\n\t\t\t}\t\t\t\t\r\n\t\t}\t\t\t\r\n\t};\t\r\n\t\r\n\tfunction Sprite_MapAttack() {\r\n\t\tthis.initialize.apply(this, arguments);\r\n\t}\r\n\r\n\tSprite_MapAttack.prototype = Object.create(Sprite_MapEffect.prototype);\r\n\tSprite_MapAttack.prototype.constructor = Sprite_MapAttack;\r\n\t\r\n\tSprite_MapAttack.prototype.updatePosition = function() {\r\n\t\tthis.scale.x = 1;\r\n\t\tthis.scale.y = 1;\t\t\r\n\t\tvar offset = JSON.parse(JSON.stringify(this._positionOffset));\r\n\t\tif($gameTemp.mapTargetDirection == \"left\"){\r\n\t\t\toffset.x*= -1;\r\n\t\t\tthis.scale.x = -1;\t\r\n\t\t}\r\n\t\tif($gameTemp.mapTargetDirection == \"up\" || $gameTemp.mapTargetDirection == \"down\"){\r\n\t\t\tvar tmp = offset.x;\r\n\t\t\toffset.x = offset.y;\r\n\t\t\toffset.y = tmp;\r\n\t\t\tthis.scale.y = -1;\t\t\r\n\t\t}\r\n\t\tif($gameTemp.mapTargetDirection == \"up\"){\r\n\t\t\toffset.y*= -1;\r\n\t\t}\t\t\r\n\t\tthis.x = this._position.x + offset.x;\r\n\t\tthis.y = this._position.y + offset.y;\r\n\t\tthis.z = 999;\r\n\t}\r\n\t\r\n//====================================================================\r\n// ●Sprite_WillIndicator\r\n//====================================================================\t\r\n\t\r\n\tfunction Sprite_WillIndicator() {\r\n\t\tthis.initialize.apply(this, arguments);\r\n\t}\r\n\r\n\tSprite_WillIndicator.prototype = Object.create(Sprite_Base.prototype);\r\n\tSprite_WillIndicator.prototype.constructor = Sprite_WillIndicator;\r\n\r\n\tSprite_WillIndicator.prototype.initialize = function(character) {\r\n\t\tSprite_Base.prototype.initialize.call(this);\r\n\t\tthis._character = character;\t\t\r\n\t\tthis.text = new PIXI.Text('',\r\n\t\t{\r\n\t\t  fontFamily : 'Arial',\r\n\t\t  fontSize: \"13px\",\r\n\t\t  fill : 0xffffff,\r\n\t\t  cacheAsBitmap: true, // for better performance\r\n\t\t  height: 30,\r\n\t\t  width: 20,\r\n\t\t});\r\n\t\tthis.addChild(this.text);\r\n\t\tthis._previousEventType = -1;\r\n\t};\r\n\r\n\tSprite_WillIndicator.prototype.update = function() {\r\n\t\tvar type = this._character.isType();\r\n\t\tthis._isEnemy = type === 'enemy'\r\n\t\tif(this._previousEventType != type){\r\n\t\t\tthis._previousEventType = type;\r\n\t\t\tif(this._isEnemy){\r\n\t\t\t\tthis.bitmap = ImageManager.loadSystem('WillIndicatorEnemy');\r\n\t\t\t} else {\r\n\t\t\t\tthis.bitmap = ImageManager.loadSystem('WillIndicator');\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.anchor.x = 0.5;\r\n\t\t\tthis.anchor.y = 1;\r\n\t\t\t\r\n\t\t\t \r\n\t\t\tif(this._isEnemy){\r\n\t\t\t\tthis.text.anchor.set(0); \r\n\t\t\t\tthis.text.x = -23; \r\n\t\t\t\tthis.text.y = -49.5\t;\r\n\t\t\t} else {\r\n\t\t\t\tthis.text.anchor.set(1); \r\n\t\t\t\tthis.text.x = 23; \r\n\t\t\t\tthis.text.y = -33.5\t;\r\n\t\t\t}\r\n\t\t}\t\t\t\t\r\n\t\t\r\n\t\t//this.z = this._character.screenZ() - 1;\r\n\t\tif(ConfigManager[\"willIndicator\"] == 1){\t\r\n\t\t\tvar eventId = this._character.eventId();\r\n\t\t\tvar battlerArray = $gameSystem.EventToUnit(eventId);\r\n\t\t\tif(battlerArray){\r\n\t\t\t\tvar unit = battlerArray[1];\r\n\t\t\t\tif(unit && !this._character.isErased()){\r\n\t\t\t\t\tthis.x = this._character.screenX();\r\n\t\t\t\t\tthis.y = this._character.screenY();\r\n\t\t\t\t\tthis.opacity = 255;\r\n\t\t\t\t\tvar maxWill = $statCalc.getMaxWill(unit);\r\n\t\t\t\t\tvar will = $statCalc.getCurrentWill(unit);\r\n\t\t\t\t\t//this.drawText(will, 0, 0, 20);\r\n\t\t\t\t\tthis.text.text = will;\r\n\t\t\t\t\tvar color = \"#ffffff\";\t\t\t\t\r\n\t\t\t\t\tif(will < 100){\r\n\t\t\t\t\t\tcolor = \"#f1de55\";\r\n\t\t\t\t\t} \r\n\t\t\t\t\tif(will <= 50){\r\n\t\t\t\t\t\tcolor = \"#ff2222\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(will == maxWill){\r\n\t\t\t\t\t\tcolor = \"#00f1ff\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.text.style.fill = color;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.opacity = 0;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.opacity = 0;\r\n\t\t\t}\t\r\n\t\t} else {\r\n\t\t\tthis.opacity = 0;\r\n\t\t}\t\t\r\n\t};\r\n\t\r\n\t\r\n//====================================================================\r\n// ●Sprite_AttributeIndicator\r\n//====================================================================\t\r\n\t\r\n\tfunction Sprite_AttributeIndicator() {\r\n\t\tthis.initialize.apply(this, arguments);\r\n\t}\r\n\r\n\tSprite_AttributeIndicator.prototype = Object.create(Sprite_Base.prototype);\r\n\tSprite_AttributeIndicator.prototype.constructor = Sprite_AttributeIndicator;\r\n\r\n\tSprite_AttributeIndicator.prototype.initialize = function(character) {\r\n\t\tSprite_Base.prototype.initialize.call(this);\r\n\t\tthis._character = character;\t\t\r\n\t\tthis._previousAttribute = -1;\r\n\t};\r\n\r\n\tSprite_AttributeIndicator.prototype.update = function() {\r\n\t\tif(ENGINE_SETTINGS.ENABLE_ATTRIBUTE_SYSTEM){\t\t\t\r\n\t\t\tvar type = this._character.isType();\r\n\t\t\tthis._isEnemy = type === 'enemy';\r\n\t\t\tvar eventId = this._character.eventId();\r\n\t\t\tvar battlerArray = $gameSystem.EventToUnit(eventId);\r\n\t\t\tif(battlerArray){\r\n\t\t\t\tvar unit = battlerArray[1];\r\n\t\t\t\tvar attribute = $statCalc.getParticipantAttribute(unit, \"attribute1\");\r\n\t\t\t\tif(!attribute){\r\n\t\t\t\t\tthis.opacity = 0;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif(this._previousAttribute != attribute){\r\n\t\t\t\t\tthis._previousAttribute = attribute;\t\t\t\r\n\t\t\t\t\tthis.bitmap = ImageManager.loadSystem('attribute_'+attribute+\"_small\");\t\t\t\r\n\t\t\t\t}\t\t\r\n\t\t\t\t\r\n\t\t\t\tthis.anchor.x = 0.5;\r\n\t\t\t\tthis.anchor.y = 1;\r\n\t\t\t\t\r\n\t\t\t\tthis.x = this._character.screenX();\r\n\t\t\t\tthis.y = this._character.screenY();\r\n\t\t\t\tthis.y-=18;\r\n\t\t\t\tif(this._isEnemy){\r\n\t\t\t\t\t//this.anchor.set(0);\r\n\t\t\t\t\tthis.x-=16;\t\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\t//this.anchor.set(1); \r\n\t\t\t\t\tthis.x+=16;\r\n\t\t\t\t}\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t//this.z = this._character.screenZ() - 1;\r\n\t\t\t\r\n\t\t\t\tif(unit && !this._character.isErased() && ConfigManager[\"willIndicator\"] > 0){\r\n\t\t\t\t\tthis.opacity = 255;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.opacity = 0;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.opacity = 0;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.opacity = 0;\r\n\t\t}\t\r\n\t};\t\r\n\t\r\n//====================================================================\r\n// ●Sprite_BasicShadow\r\n//====================================================================\t\r\n\t\r\n\tfunction Sprite_BasicShadow() {\r\n\t\tthis.initialize.apply(this, arguments);\r\n\t}\r\n\r\n\tSprite_BasicShadow.prototype = Object.create(Sprite_Base.prototype);\r\n\tSprite_BasicShadow.prototype.constructor = Sprite_BasicShadow;\r\n\r\n\tSprite_BasicShadow.prototype.initialize = function(character) {\r\n\t\tSprite_Base.prototype.initialize.call(this);\r\n\t\tthis._character = character;\r\n\t\tthis.bitmap =  ImageManager.loadPicture('flight_shadow');\r\n\t\tthis.anchor.x = 0.5;\r\n\t\tthis.anchor.y = 1;\r\n\t};\r\n\r\n\tSprite_BasicShadow.prototype.update = function() {\r\n\t\tthis.x = this._character.screenX();\r\n\t\tthis.y = this._character.screenY();\r\n\t\t//this.z = this._character.screenZ() - 1;\r\n\t\tvar eventId = this._character.eventId();\r\n\t\tvar battlerArray = $gameSystem.EventToUnit(eventId);\r\n\t\tif(battlerArray){\r\n\t\t\tconst flyInfo = $statCalc.getFlyingAnimInfo(battlerArray[1]);\r\n\t\t\tif (this._character._characterName == \"\" || this._character._transparent || !flyInfo || !flyInfo.displayShadow || this._character._floatOffset == 0) {\r\n\t\t\t\tthis.opacity = 0;\r\n\t\t\t} else {\r\n\t\t\t\tthis.y-=this._character._floatOffset;\r\n\t\t\t\tthis.opacity = this._character._opacity - 128;\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\tthis.opacity = 0;\r\n\t\t}\t\t\r\n\t};\r\n\r\n//====================================================================\r\n// ●Sprite_DefendIndicator\r\n//====================================================================\t\r\n\t\r\n\tfunction Sprite_DefendIndicator() {\r\n\t\tthis.initialize.apply(this, arguments);\r\n\t}\r\n\r\n\tSprite_DefendIndicator.prototype = Object.create(Sprite_Base.prototype);\r\n\tSprite_DefendIndicator.prototype.constructor = Sprite_DefendIndicator;\r\n\r\n\tSprite_DefendIndicator.prototype.initialize = function(character) {\r\n\t\tSprite_Base.prototype.initialize.call(this);\r\n\t\tthis._character = character;\r\n\t\tthis.bitmap =  ImageManager.loadSystem('shield');\r\n\t\tthis.anchor.x = 0.5;\r\n\t\tthis.anchor.y = 1;\r\n\t\tthis._frameCount = 0;\r\n\t};\r\n\r\n\tSprite_DefendIndicator.prototype.update = function() {\r\n\t\t\r\n\t\t//this.z = this._character.screenZ() - 1;\r\n\t\tvar eventId = this._character.eventId();\r\n\t\tvar battlerArray = $gameSystem.EventToUnit(eventId);\r\n\t\t\r\n\t\tif(battlerArray && !this._character.isErased()){\r\n\t\t\tthis.x = this._character.screenX();\t\t\r\n\t\t\tthis.y = this._character.screenY() - 2;\r\n\t\t\tvar unit = battlerArray[1];\r\n\t\t\tvar isShown = true;\r\n\t\t\tif(!$gameSystem.isEnemy(unit)){\r\n\t\t\t\tif(!$gameTemp.showAllyDefendIndicator){\r\n\t\t\t\t\tisShown = false;\r\n\t\t\t\t}\r\n\t\t\t\tthis.x = this._character.screenX() + 15;\r\n\t\t\t} else {\r\n\t\t\t\tif(!$gameTemp.showEnemyDefendIndicator){\r\n\t\t\t\t\tisShown = false;\r\n\t\t\t\t}\r\n\t\t\t\tthis.x = this._character.screenX() - 15;\r\n\t\t\t}\r\n\t\t\tif($gameSystem.isBattlePhase() === 'AI_phase' || $gameSystem.isSubBattlePhase() === 'actor_target'){\r\n\t\t\t\tvar activeEvent = $gameTemp.activeEvent();\r\n\t\t\t\tif(activeEvent){\r\n\t\t\t\t\tvar actor = $gameSystem.EventToUnit(activeEvent.eventId())[1];\r\n\t\t\t\t\tif($gameSystem.isFriendly(actor, $gameSystem.getFactionId(unit))){\r\n\t\t\t\t\t\tif(!actor || !$statCalc.canSupportDefend(actor, unit)){\r\n\t\t\t\t\t\t\tisShown = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif(!$statCalc.hasSupportDefend(unit)){\r\n\t\t\t\t\t\t\tisShown = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\tisShown = false;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif($gameTemp.summaryUnit && !$statCalc.canSupportDefend($gameTemp.summaryUnit, unit)){\r\n\t\t\t\t\tisShown = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(!$gameTemp.summaryUnit){\r\n\t\t\t\tisShown = false;\r\n\t\t\t}\r\n\t\t\tif(isShown && unit && !this._character.isErased()){\r\n\t\t\t\r\n\t\t\t\tthis._frameCount+=2;\r\n\t\t\t\tthis._frameCount %= 200;\r\n\t\t\t\tif(this._frameCount < 100){\r\n\t\t\t\t\tthis.opacity = this._frameCount + 120;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.opacity = 200 + 120 - this._frameCount;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t} else {\r\n\t\t\t\tthis.opacity = 0;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.opacity = 0;\r\n\t\t}\t\t\r\n\t};\r\n\t\r\n//====================================================================\r\n// ●Sprite_AttackIndicator\r\n//====================================================================\t\r\n\t\r\n\tfunction Sprite_AttackIndicator() {\r\n\t\tthis.initialize.apply(this, arguments);\r\n\t}\r\n\r\n\tSprite_AttackIndicator.prototype = Object.create(Sprite_Base.prototype);\r\n\tSprite_AttackIndicator.prototype.constructor = Sprite_AttackIndicator;\r\n\r\n\tSprite_AttackIndicator.prototype.initialize = function(character) {\r\n\t\tSprite_Base.prototype.initialize.call(this);\r\n\t\tthis._character = character;\r\n\t\tthis.bitmap =  ImageManager.loadSystem('sword');\r\n\t\tthis.anchor.x = 0.5;\r\n\t\tthis.anchor.y = 1;\r\n\t\tthis._frameCount = 0;\r\n\t};\r\n\r\n\tSprite_AttackIndicator.prototype.update = function() {\r\n\t\t\r\n\t\t//this.z = this._character.screenZ() - 1;\r\n\t\tvar eventId = this._character.eventId();\r\n\t\tvar battlerArray = $gameSystem.EventToUnit(eventId);\r\n\t\t\r\n\t\tif(battlerArray && !this._character.isErased()){\r\n\t\t\tthis.x = this._character.screenX();\t\t\r\n\t\t\tthis.y = this._character.screenY() - 2;\t\r\n\t\t\t\r\n\t\t\tvar unit = battlerArray[1];\r\n\t\t\tvar isShown = true;\r\n\t\t\tif(!$gameSystem.isEnemy(unit)){\r\n\t\t\t\tif(!$gameTemp.showAllyAttackIndicator){\r\n\t\t\t\t\tisShown = false;\r\n\t\t\t\t}\r\n\t\t\t\tthis.x = this._character.screenX() - 15;\r\n\t\t\t} else {\r\n\t\t\t\tif(!$gameTemp.showEnemyAttackIndicator){\r\n\t\t\t\t\tisShown = false;\r\n\t\t\t\t}\r\n\t\t\t\tthis.x = this._character.screenX() + 15;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif($gameSystem.isBattlePhase() === 'AI_phase' || $gameSystem.isSubBattlePhase() === 'actor_target'){\r\n\t\t\t\tvar activeEvent = $gameTemp.activeEvent();\r\n\t\t\t\tif(activeEvent){\r\n\t\t\t\t\tvar actor = $gameSystem.EventToUnit(activeEvent.eventId())[1];\r\n\t\t\t\t\tif($gameSystem.isFriendly(actor, $gameSystem.getFactionId(unit))){\r\n\t\t\t\t\t\tif(!actor || !$statCalc.canSupportAttack(actor, unit)){\r\n\t\t\t\t\t\t\tisShown = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif(!$statCalc.hasSupportAttack(unit)){\r\n\t\t\t\t\t\t\tisShown = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tisShown = false;\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t} else {\r\n\t\t\t\tif(!$gameTemp.summaryUnit || !$statCalc.canSupportAttack($gameTemp.summaryUnit, unit)){\r\n\t\t\t\t\tisShown = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(!$gameTemp.summaryUnit){\r\n\t\t\t\tisShown = false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(isShown && unit && !this._character.isErased()){\r\n\t\t\t\r\n\t\t\t\tthis._frameCount+=2;\r\n\t\t\t\tthis._frameCount %= 200;\r\n\t\t\t\tif(this._frameCount < 100){\r\n\t\t\t\t\tthis.opacity = this._frameCount + 120;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.opacity = 200 + 120 - this._frameCount;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t} else {\r\n\t\t\t\tthis.opacity = 0;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.opacity = 0;\r\n\t\t}\t\t\r\n\t};\t\r\n\t\r\n//====================================================================\r\n// ●Sprite_TwinIndicator\r\n//====================================================================\t\r\n\t\r\n\tfunction Sprite_TwinIndicator() {\r\n\t\tthis.initialize.apply(this, arguments);\r\n\t}\r\n\r\n\tSprite_TwinIndicator.prototype = Object.create(Sprite_Base.prototype);\r\n\tSprite_TwinIndicator.prototype.constructor = Sprite_TwinIndicator;\r\n\r\n\tSprite_TwinIndicator.prototype.initialize = function(character) {\r\n\t\tSprite_Base.prototype.initialize.call(this);\r\n\t\tthis._character = character;\r\n\t\tthis.bitmap =  ImageManager.loadSystem('twin');\r\n\t\tthis.anchor.x = 0.5;\r\n\t\tthis.anchor.y = 1;\r\n\t\tthis._frameCount = 0;\r\n\t};\r\n\r\n\tSprite_TwinIndicator.prototype.update = function() {\r\n\t\tthis.x = this._character.screenX();\r\n\t\t\r\n\t\tthis.y = this._character.screenY() - 30;\r\n\t\t//this.z = this._character.screenZ() - 1;\r\n\t\tvar eventId = this._character.eventId();\r\n\t\tvar battlerArray = $gameSystem.EventToUnit(eventId);\r\n\t\t\r\n\t\tif(battlerArray){\r\n\t\t\tvar unit = battlerArray[1];\r\n\t\t\tif(!$gameSystem.isEnemy(unit)){\t\t\t\t\r\n\t\t\t\tthis.x = this._character.screenX() - 15;\r\n\t\t\t} else {\r\n\t\t\t\tthis.x = this._character.screenX() + 15;\r\n\t\t\t}\t\t\r\n\t\t\t\r\n\t\t\tif($statCalc.isMainTwin(unit) && unit && !this._character.isErased()){\r\n\t\t\t\r\n\t\t\t\t/*this._frameCount+=2;\r\n\t\t\t\tthis._frameCount %= 200;\r\n\t\t\t\tif(this._frameCount < 100){\r\n\t\t\t\t\tthis.opacity = this._frameCount + 120;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.opacity = 200 + 120 - this._frameCount;\r\n\t\t\t\t}*/\r\n\t\t\t\tthis.opacity = 255;\r\n\t\t\t} else {\r\n\t\t\t\tthis.opacity = 0;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.opacity = 0;\r\n\t\t}\t\t\r\n\t};\t\r\n\t\t\r\n\t\r\n//====================================================================\r\n// Sprite_Destroyed\r\n//====================================================================\t\r\n\t\r\n\tfunction Sprite_Destroyed() {\r\n\t\tthis.initialize.apply(this, arguments);\r\n\t}\r\n\r\n\tSprite_Destroyed.prototype = Object.create(Sprite_Base.prototype);\r\n\tSprite_Destroyed.prototype.constructor = Sprite_Destroyed;\r\n\r\n\tSprite_Destroyed.prototype.initialize = function(character) {\r\n\t\tSprite_Base.prototype.initialize.call(this);\t\t\r\n\t\tthis._character = character;\r\n\t\tthis.anchor.x = 0.5;\r\n\t\tthis.anchor.y = 0.6;\r\n\t\tthis._animationFrame = 0;\r\n\t\tthis.visible = false;\r\n\t\t\r\n\t\tthis._sheetHeight = 3;\r\n\t\r\n\t\tthis._frameCounter = 0;\r\n\t\t\r\n\t\tthis.setFrame(0 * this._frameSize, 0 * this._frameSize, this._frameSize, this._frameSize);\r\n\t};\r\n\t\r\n\tSprite_Destroyed.prototype.setCharacter = function(character){\r\n\t\tthis._character = character;\r\n\t}\r\n\r\n\tSprite_Destroyed.prototype.update = function() {\r\n\t\tif(this._character.manuallyErased || !this._character.isDoingDeathAnim){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar eventId = this._character.eventId();\r\n\t\tvar battlerArray = $gameSystem.EventToUnit(eventId);\r\n\t\tif((!this._character._destroySpriteInitialized || !this._initialized) && battlerArray && battlerArray[1]){\r\n\t\t\tthis._character._destroySpriteInitialized = true;\r\n\t\t\tthis._initialized = true;\r\n\t\t\tvar animInfo = $statCalc.getDestroyAnimInfo(battlerArray[1]);\r\n\t\t\tthis.bitmap =  ImageManager.loadAnimation(animInfo.name);\r\n\t\t\tthis._frameSize = animInfo.frameSize;\r\n\t\t\tthis._sheetWidth = animInfo.sheetWidth;\r\n\t\t\tthis._frames = animInfo.frames;\r\n\t\t\tthis._animationSpeed = animInfo.speed;\r\n\t\t\tthis._disappearFrame = animInfo.disappearFrame;\r\n\t\t\tthis._se = animInfo.se;\r\n\t\t}\r\n\t\t\r\n\t\tif(this._animationFrame > this._frames){\r\n\t\t\tthis.visible = false;\r\n\t\t\tthis._character.isDoingDeathAnim = false;\r\n\t\t\tthis._processedDeath = false;\r\n\t\t\tthis._animationFrame = 0;\r\n\t\t\t$gameSystem.finalizeItemBox(this._character);\r\n\t\t} else {\r\n\t\t\tvar eventId = this._character.eventId();\r\n\t\t\tvar battlerArray = $gameSystem.EventToUnit(eventId);\r\n\t\t\t\r\n\t\t\tif(this._animationFrame == this._disappearFrame && !this._processedDeath){\r\n\t\t\t\tthis._processedDeath = true;\r\n\t\t\t\tif(this._character.isDoingSubTwinDeath){\r\n\t\t\t\t\t$statCalc.swapEvent(this._character, true);\r\n\t\t\t\t\tconst mainTwin = $statCalc.getMainTwin(battlerArray[1]);\t\r\n\t\t\t\t\t//_this._currentDeath.event.appear();\r\n\t\t\t\t\t//this._character.refreshImage();\r\n\t\t\t\t\tmainTwin.subTwin = null;\r\n\t\t\t\t\t$statCalc.updateSuperState(mainTwin);\r\n\t\t\t\t\tthis._character.transitioningFloat = true;\r\n\t\t\t\t} else if(this._character.isDoingMainTwinDeath){\t\r\n\t\t\t\t\tif(!this._character.isDoingMultiKill){\r\n\t\t\t\t\t\t$statCalc.swapEvent(this._character, true);\t\t\t\t\t\r\n\t\t\t\t\t\tconst mainTwin = $statCalc.getMainTwin(battlerArray[1]);\t\r\n\t\t\t\t\t\tmainTwin.subTwin = null;\r\n\t\t\t\t\t\t$statCalc.updateSuperState(mainTwin);\r\n\t\t\t\t\t\tthis._character.transitioningFloat = true;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif(battlerArray[1].SRWStats.dropBoxItems && battlerArray[1].SRWStats.dropBoxItems.length){\r\n\t\t\t\t\t\t\t$gameSystem.deployItemBox(this._character, battlerArray[1].SRWStats.dropBoxItems);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthis._character.erase();\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t\t//battlerArray[1].subTwin.isSubTwin = false;\r\n\t\t\t\t\t//battlerArray[1].subTwin = null;\r\n\t\t\t\t} else {\t\r\n\t\t\t\t\tif(battlerArray[1].SRWStats.dropBoxItems && battlerArray[1].SRWStats.dropBoxItems.length){\r\n\t\t\t\t\t\t$gameSystem.deployItemBox(this._character, battlerArray[1].SRWStats.dropBoxItems);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis._character.erase();\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\t\t\t\t\r\n\t\t\t}\t\t\t\t\r\n\t\t\tthis.x = this._character.screenX();\r\n\t\t\tthis.y = this._character.screenY();\r\n\t\t\tthis.z = this._character.screenZ() + 1;\r\n\t\t\t\r\n\t\t\tif(battlerArray && battlerArray[1]){\r\n\t\t\t\tif (this._character.isDoingDeathAnim) {\r\n\t\t\t\t\tif(this._animationFrame == 1){\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(!this.playingSE){\r\n\t\t\t\t\t\t\tthis.playingSE = true;\r\n\t\t\t\t\t\t\tif(!this._character.silent){\t\t\t\r\n\t\t\t\t\t\t\t\tvar se = {};\r\n\t\t\t\t\t\t\t\tse.name = this._se;\r\n\t\t\t\t\t\t\t\tse.pan = 0;\r\n\t\t\t\t\t\t\t\tse.pitch = 100;\r\n\t\t\t\t\t\t\t\tse.volume = 80;\r\n\t\t\t\t\t\t\t\tAudioManager.playSe(se);\r\n\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tthis._character.silent = false;\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\t\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.playingSE = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.visible = true;\r\n\t\t\t\t\tvar col = this._animationFrame % this._sheetWidth;\r\n\t\t\t\t\tvar row = Math.floor(this._animationFrame / this._sheetWidth);\r\n\t\t\t\t\tthis.setFrame(col * this._frameSize, row * this._frameSize, this._frameSize, this._frameSize);\r\n\t\t\t\t\tthis._frameCounter+=$gameSystem.getBattleSpeed();\r\n\t\t\t\t\tif(this._frameCounter >= this._animationSpeed){\r\n\t\t\t\t\t\tthis._animationFrame++;\r\n\t\t\t\t\t\tthis._frameCounter = 0;\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t} \r\n\t\t\t}\t\r\n\t\t}\t\t\t\r\n\t};\t\r\n\t\r\n//====================================================================\r\n// Sprite_Appear\r\n//====================================================================\t\r\n\t\r\n\tfunction Sprite_Appear() {\r\n\t\tthis.initialize.apply(this, arguments);\r\n\t}\r\n\r\n\tSprite_Appear.prototype = Object.create(Sprite_Base.prototype);\r\n\tSprite_Appear.prototype.constructor = Sprite_Appear;\r\n\r\n\tSprite_Appear.prototype.initialize = function(character) {\r\n\t\tSprite_Base.prototype.initialize.call(this);\t\t\r\n\t\t\r\n\t\tthis._character = character;\r\n\t\t\r\n\t\t\r\n\t\tthis._initialized = false;\r\n\t\t\r\n\t\tthis.anchor.x = 0.5;\r\n\t\tthis.anchor.y = 0.6;\r\n\t\tthis._animationFrame = 0;\r\n\t\tthis.visible = false;\r\n\t\t\r\n\t\tthis._sheetHeight = 3;\r\n\t\t\r\n\t\tthis._frameCounter = 0;\r\n\t\t\r\n\t\t\r\n\t\tthis.setFrame(0 * this._frameSize, 0 * this._frameSize, this._frameSize, this._frameSize);\r\n\t};\r\n\t\r\n\tSprite_Appear.prototype.setCharacter = function(character){\r\n\t\tthis._character = character;\r\n\t}\r\n\t\r\n\tSprite_Appear.prototype.erase = function() {\r\n\t\tthis._initialized = false;\r\n\t\tthis._erased = true;\r\n\t\tthis.refresh();\r\n\t};\r\n\r\n\tSprite_Appear.prototype.update = function() {\r\n\t\tvar eventId = this._character.eventId();\r\n\t\tif(!this._character.isDoingAppearAnim){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar battlerArray = $gameSystem.EventToUnit(eventId);\r\n\t\tif((!this._character._appearSpriteInitialized || !this._initialized) && battlerArray && battlerArray[1]){\r\n\t\t\tthis._character._appearSpriteInitialized = true;\r\n\t\t\tthis._initialized = true;\r\n\t\t\tvar animInfo = $statCalc.getSpawnAnimInfo(battlerArray[1]);\r\n\t\t\tthis.bitmap =  ImageManager.loadAnimation(animInfo.name);\r\n\t\t\tthis._frameSize = animInfo.frameSize;\r\n\t\t\tthis._sheetWidth = animInfo.sheetWidth;\r\n\t\t\tthis._frames = animInfo.frames;\r\n\t\t\tthis._animationSpeed = animInfo.speed;\r\n\t\t\tthis._appearFrame = animInfo.appearFrame;\r\n\t\t\tthis._se = animInfo.se;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tif(this._animationFrame > this._frames){\r\n\t\t\tthis.visible = false;\r\n\t\t\tthis._character.isDoingAppearAnim = false;\r\n\t\t\tthis._animationFrame = 0;\r\n\t\t} else {\r\n\t\t\tif(this._animationFrame == this._appearFrame){\r\n\t\t\t\tthis._character.appear();\r\n\t\t\t\tthis._character.refreshImage();\r\n\t\t\t}\t\t\t\t\r\n\t\t\tthis.x = this._character.screenX();\r\n\t\t\tthis.y = this._character.screenY();\r\n\t\t\tthis.z = this._character.screenZ() + 1;\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tif(battlerArray && battlerArray[1]){\r\n\t\t\t\tif (this._character.isDoingAppearAnim) {\r\n\t\t\t\t\tif(this._animationFrame == 0){\r\n\t\t\t\t\t\tif(!this.playingSE){\r\n\t\t\t\t\t\t\tthis.playingSE = true;\r\n\t\t\t\t\t\t\tvar se = {};\r\n\t\t\t\t\t\t\tse.name = this._se;\r\n\t\t\t\t\t\t\tse.pan = 0;\r\n\t\t\t\t\t\t\tse.pitch = 100;\r\n\t\t\t\t\t\t\tse.volume = 60;\r\n\t\t\t\t\t\t\tAudioManager.playSe(se);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.playingSE = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.visible = true;\r\n\t\t\t\t\tvar col = this._animationFrame % this._sheetWidth;\r\n\t\t\t\t\tvar row = Math.floor(this._animationFrame / this._sheetWidth);\r\n\t\t\t\t\tthis.setFrame(col * this._frameSize, row * this._frameSize, this._frameSize, this._frameSize);\r\n\t\t\t\t\tthis._frameCounter+=$gameSystem.getBattleSpeed();;\r\n\t\t\t\t\tif(this._frameCounter >= this._animationSpeed){\r\n\t\t\t\t\t\tthis._animationFrame++;\r\n\t\t\t\t\t\tthis._frameCounter = 0;\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t} \r\n\t\t\t}\t\r\n\t\t}\t\t\t\r\n\t};\t\r\n\r\n//====================================================================\r\n// Sprite_Disappear\r\n//====================================================================\t\r\n\t\r\n\tfunction Sprite_Disappear() {\r\n\t\tthis.initialize.apply(this, arguments);\r\n\t}\r\n\r\n\tSprite_Disappear.prototype = Object.create(Sprite_Base.prototype);\r\n\tSprite_Disappear.prototype.constructor = Sprite_Disappear;\r\n\r\n\tSprite_Disappear.prototype.initialize = function(character) {\r\n\t\tSprite_Base.prototype.initialize.call(this);\t\t\r\n\t\tthis.bitmap =  ImageManager.loadAnimation('SRWDisappear');\r\n\t\tthis._character = character;\r\n\t\tthis.anchor.x = 0.5;\r\n\t\tthis.anchor.y = 0.6;\r\n\t\tthis._animationFrame = 0;\r\n\t\tthis.visible = false;\r\n\t\tthis._frameSize = 192;\r\n\t\tthis._sheetHeight = 3;\r\n\t\tthis._sheetWidth = 5;\r\n\t\tthis._frames = 8;\r\n\t\tthis._frameCounter = 0;\r\n\t\tthis._animationSpeed = 2;\r\n\t\tthis.setFrame(0 * this._frameSize, 0 * this._frameSize, this._frameSize, this._frameSize);\r\n\t};\r\n\t\r\n\tSprite_Disappear.prototype.setCharacter = function(character){\r\n\t\tthis._character = character;\r\n\t}\r\n\r\n\tSprite_Disappear.prototype.update = function() {\r\n\t\tif(!this._character.isDoingDisappearAnim){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(this._animationFrame > this._frames){\r\n\t\t\tthis.visible = false;\r\n\t\t\tthis._character.isDoingDisappearAnim = false;\r\n\t\t\tthis._animationFrame = 0;\r\n\t\t} else {\r\n\t\t\tif(this._animationFrame == 3){\r\n\t\t\t\tthis._character.erase();\r\n\t\t\t}\t\t\t\t\r\n\t\t\tthis.x = this._character.screenX();\r\n\t\t\tthis.y = this._character.screenY();\r\n\t\t\tthis.z = this._character.screenZ() + 1;\r\n\t\t\tvar eventId = this._character.eventId();\r\n\t\t\tvar battlerArray = $gameSystem.EventToUnit(eventId);\r\n\t\t\tif(battlerArray && battlerArray[1]){\r\n\t\t\t\tif (this._character.isDoingDisappearAnim) {\r\n\t\t\t\t\tif(this._animationFrame == 0){\r\n\t\t\t\t\t\tif(!this.playingSE){\r\n\t\t\t\t\t\t\tthis.playingSE = true;\r\n\t\t\t\t\t\t\tvar se = {};\r\n\t\t\t\t\t\t\tse.name = 'SRWDisappear';\r\n\t\t\t\t\t\t\tse.pan = 0;\r\n\t\t\t\t\t\t\tse.pitch = 100;\r\n\t\t\t\t\t\t\tse.volume = 60;\r\n\t\t\t\t\t\t\tAudioManager.playSe(se);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.playingSE = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.visible = true;\r\n\t\t\t\t\tvar col = this._animationFrame % this._sheetWidth;\r\n\t\t\t\t\tvar row = Math.floor(this._animationFrame / this._sheetWidth);\r\n\t\t\t\t\tthis.setFrame(col * this._frameSize, row * this._frameSize, this._frameSize, this._frameSize);\r\n\t\t\t\t\tthis._frameCounter+=$gameSystem.getBattleSpeed();;\r\n\t\t\t\t\tif(this._frameCounter >= this._animationSpeed){\r\n\t\t\t\t\t\tthis._animationFrame++;\r\n\t\t\t\t\t\tthis._frameCounter = 0;\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t} \r\n\t\t\t}\t\r\n\t\t}\t\t\t\r\n\t};\t\t\r\n\t\r\n\t\r\n//====================================================================\r\n// Sprite_Reticule\r\n//====================================================================\t\r\n\t\r\n\tfunction Sprite_Reticule() {\r\n\t\tthis.initialize.apply(this, arguments);\r\n\t}\r\n\r\n\tSprite_Reticule.prototype = Object.create(Sprite_Base.prototype);\r\n\tSprite_Reticule.prototype.constructor = Sprite_Reticule;\r\n\r\n\tSprite_Reticule.prototype.initialize = function() {\r\n\t\tSprite_Base.prototype.initialize.call(this);\r\n\t\tthis.bitmap =  ImageManager.loadPicture('reticule');\r\n\t\tthis.anchor.x = 0.5;\r\n\t\tthis.anchor.y = 0.5;\r\n\t\tthis._duration = 8;\r\n\t\tthis._holdDuration = 16;\r\n\t};\r\n\t\r\n\tSprite_Reticule.prototype.start = function(info) {\r\n\t\tthis._time = 0;\r\n\t\tthis._actorEvent = info.actor;\r\n\t\tthis._targetActorEvent = info.targetActor;\r\n\t}\r\n\r\n\tSprite_Reticule.prototype.update = function() {\r\n\t\tfunction lerp(start, end, t){\r\n\t\t\treturn start + (end - start) * t;\r\n\t\t}\r\n\t\t\r\n\t\tif(this._time > this._duration){\r\n\t\t\tif(this._time < this._duration + this._holdDuration){\r\n\t\t\t\tvar scaleFactor = 1.05 + (Math.sin((this._time - this._duration) / 2) / 15);\r\n\t\t\t\tthis.scale.x = scaleFactor;\r\n\t\t\t\tthis.scale.y = scaleFactor;\r\n\t\t\t} else {\r\n\t\t\t\t$gameTemp.reticuleInfo = null;\r\n\t\t\t\tthis._actorEvent = null;\r\n\t\t\t\tthis._targetActorEvent = null;\r\n\t\t\t\tthis._time = 0;\r\n\t\t\t\tthis.scale.x = 1;\r\n\t\t\t\tthis.scale.y = 1;\r\n\t\t\t\t$gamePlayer.setTransparent(false);\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\t\tif(this._actorEvent && this._targetActorEvent){\t\r\n\t\t\tif(this._time <= this._duration){\r\n\t\t\t\t$gamePlayer.setTransparent(true);\r\n\t\t\t\tthis.visible = true;\r\n\t\t\t\tthis.x = lerp(this._actorEvent.screenX(), this._targetActorEvent.screenX(), this._time / this._duration);\r\n\t\t\t\tthis.y = lerp(this._actorEvent.screenY() - 24, this._targetActorEvent.screenY() - 24, this._time / this._duration);\t\t\t\t\r\n\t\t\t}\r\n\t\t\tif(this._time > this._duration / 2 && !$gameMap.isEventOnScreen( this._targetActorEvent.eventId())){\r\n\t\t\t\t$gamePlayer.locate(this._targetActorEvent.posX(), this._targetActorEvent.posY());\r\n\t\t\t}\r\n\t\t\tthis._time+=$gameSystem.getBattleSpeed();\r\n\t\t} else if($gameTemp.reticuleInfo){\r\n\t\t\tthis.start($gameTemp.reticuleInfo);\r\n\t\t} else {\t\r\n\t\t\tthis.visible = false;\r\n\t\t}\t\t\r\n\t};\r\n//====================================================================\r\n// Sprite_SrpgGrid\r\n//====================================================================\t\r\n\t\r\n\tfunction Sprite_SrpgGrid() {\r\n\t\tthis._isProjected = true;\r\n\t\tthis._blendAdditive = true;\r\n\t\tthis.initialize.apply(this, arguments);\t\t\r\n\t}\r\n\r\n\tSprite_SrpgGrid.prototype = Object.create(Sprite_Base.prototype);\r\n\tSprite_SrpgGrid.prototype.constructor = Sprite_SrpgGrid;\r\n\r\n\tSprite_SrpgGrid.prototype.initialize = function() {\r\n\t\tSprite_Base.prototype.initialize.call(this);\r\n\t\tthis.bitmap = new Bitmap($gameMap.tileWidth() * $gameMap.width(), $gameMap.tileHeight() * $gameMap.height());\r\n\t\tfor(var i = 0; i < $gameMap.width(); i++){\r\n\t\t\tthis.bitmap.fillRect(i * $gameMap.tileWidth(), 0, 1 , this.bitmap.height, \"white\");\r\n\t\t}\r\n\t\tfor(var i = 0; i < $gameMap.height(); i++){\r\n\t\t\tthis.bitmap.fillRect(0, i * $gameMap.tileHeight(), this.bitmap.width , 1, \"white\");\r\n\t\t}\r\n\t\t\r\n\t\tthis.anchor.x = 0;\r\n\t\tthis.anchor.y = 0;\r\n\t\tthis._posX = 0;\r\n\t\tthis._posY = 0;\r\n\t\t//this.blendMode = Graphics.BLEND_ADD;\r\n\t};\r\n\r\n\tSprite_SrpgGrid.prototype.update = function() {\r\n\t\tif($gameSystem.enableGrid && !ConfigManager[\"disableGrid\"]){\r\n\t\t\tthis.opacity = 128;\r\n\t\t} else {\r\n\t\t\tthis.opacity = 0;\r\n\t\t}\t\t\r\n\t\tthis.updatePosition();\t\t\r\n\t\t//this.bitmap.fillAll('red');\r\n\t};\r\n\t\r\n\tSprite_SrpgGrid.prototype.updatePosition = function() {\r\n        var tileWidth = $gameMap.tileWidth();\r\n        var tileHeight = $gameMap.tileHeight();\r\n        this.x = ($gameMap.adjustX(this._posX) + 0.5) * tileWidth -$gameMap.tileWidth()/2;\r\n        this.y = ($gameMap.adjustY(this._posY) + 0.5) * tileHeight -$gameMap.tileHeight()/2;\r\n\t\tthis.z = 0;\r\n    };\r\n\t\r\n\t\r\n//====================================================================\r\n// Sprite_CloudScroll\r\n//====================================================================\t\r\n\t\r\n\tfunction Sprite_CloudScroll() {\r\n\t\tthis.initialize.apply(this, arguments);\r\n\t}\r\n\t\r\n\r\n\r\n\tSprite_CloudScroll.prototype = Object.create(TilingSprite.prototype);\r\n\tSprite_CloudScroll.prototype.constructor = Sprite_CloudScroll;\r\n\t\r\n\tconst Sprite_CloudScroll_prototype_updateBitmap = Sprite_CloudScroll.prototype.updateBitmap;\r\n\tSprite_CloudScroll.prototype.updateBitmap = function()\r\n\t{\r\n\t\tconst imageChanged = this.isImageChanged();\r\n\t\tSprite_CloudScroll_prototype_updateBitmap.call(this);\r\n\t\tif (UltraMode7.isActive() && imageChanged && this.bitmap)\r\n\t\t{\r\n\t\t\tthis.bitmap.smooth = !UltraMode7.CHARACTERS_PIXELATED;\r\n\t\t}\r\n\t};\r\n\r\n\tSprite_CloudScroll.prototype.initialize = function(x, y) {\r\n\t\tTilingSprite.prototype.initialize.call(this, new Bitmap());\r\n\t\t//this.width = 960;\r\n\t\t//this.height = 960;\r\n\t\tthis.anchor.x = 0;\r\n\t\tthis.anchor.y = 0;\r\n\t\tif(UltraMode7.isActive()){\r\n\t\t\tthis.anchor.y = 1;\r\n\t\t}\r\n\t\tthis._posX = x;\r\n\t\tthis._posY = y;\r\n\t\t//$gameSystem.cloudScrollSource = \"Clouds1\"\r\n\t\t//this.blendMode = Graphics.BLEND_ADD;\r\n\t};\r\n\r\n\tSprite_CloudScroll.prototype.update = function() {\t\r\n\t\tif(!(this._posY % ($gameSystem.cloudScrollFrequency || 5))){\r\n\t\t\tthis.opacity = 255;\r\n\t\t} else {\r\n\t\t\tthis.opacity = 0;\r\n\t\t\treturn;\r\n\t\t}\t\r\n\t\tif(this._src != $gameSystem.cloudScrollSource){\r\n\t\t\tthis._src = $gameSystem.cloudScrollSource;\r\n\t\t\tif(this._src == \"\"){\t\t\t\t\r\n\t\t\t\tthis.bitmap = new Bitmap();\t\r\n\t\t\t} else {\t\t\t\t\r\n\t\t\t\tthis.bitmap = ImageManager.loadParallax($gameSystem.cloudScrollSource);\r\n\t\t\t}\t\t\t\r\n\t\t}  \r\n\t\t\r\n\t\t\r\n\t\tvar xSpeed = $gameSystem.cloudScrollXSpeed || 0;\r\n\t\tvar ySpeed = $gameSystem.cloudScrollYSpeed || 0;\r\n\t\tthis.updatePosition();\r\n\t\t\r\n\t\tthis.scale.x = 1;\r\n\t\tthis.scale.y = 1;\r\n\t\t\r\n\t\tif(UltraMode7.isActive()){\r\n\t\t\tconst screenScale = UltraMode7.mapToScreenScale(this.screenX(), this.screenY());\t\t\t\r\n\t\t\tthis.scale.x = screenScale;\r\n\t\t\tthis.scale.y = screenScale;\r\n\t\t}\t\t\r\n\t\t\r\n\t\tthis.origin.x -= xSpeed;\r\n\t\tthis.origin.y -= ySpeed;\r\n\t\tTilingSprite.prototype.update.call(this);\t\t\t\r\n\t\t/*if(this._posX + 20 > $gameMap.width()){\r\n\t\t\tthis.bitmap.clearRect((($gameMap.width() - this._posX) * 48),0, 960, 960);\r\n\t\t}\t\r\n\t\t\r\n\t\tif(this._posY + 20 > $gameMap.height()){\r\n\t\t\t//this.bitmap.clearRect(0,(($gameMap.height() - this._posY) * 48), 960, 960);\r\n\t\t\tvar overflow = (($gameMap.height() - this._posY) * 48);\r\n\t\t\tthis.setFrame(0,overflow,960, 960 - overflow);\r\n\t\t}*/\r\n\t\t//this.bitmap.fillAll('red');\r\n\t};\r\n\t\r\n\tSprite_CloudScroll.prototype.screenX = function() {\r\n\t\tvar tileWidth = $gameMap.tileWidth();\r\n\t\treturn Math.round($gameMap.adjustX(this._posX) * tileWidth + tileWidth / 2);\r\n\t}\r\n\t\r\n\tSprite_CloudScroll.prototype.screenY = function() {\r\n\t\tvar tileHeight = $gameMap.tileHeight();\r\n\t\treturn Math.round($gameMap.adjustY(this._posY) * tileHeight + tileHeight +$gameMap.height());//-  this.shiftY() - this.jumpHeight()\r\n\t}\r\n\t\r\n\tSprite_CloudScroll.prototype.updatePosition = function() {\r\n        var tileWidth = $gameMap.tileWidth();\r\n        var tileHeight = $gameMap.tileHeight();\r\n        this.x = ($gameMap.adjustX(this._posX) + 0.5) * tileWidth -$gameMap.tileWidth()/2;\r\n        this.y = ($gameMap.adjustY(this._posY) + 0.5) * tileHeight -$gameMap.tileHeight()/2;\r\n\t\tif(UltraMode7.isActive()){\r\n\t\t\t//console.log(this.screenX());\r\n\t\t\t\r\n\t\t\tlet adjustedCoords = UltraMode7.mapToScreen(this.screenX(), this.screenY());\t\t\r\n\t\t\tthis.x = adjustedCoords.x;\r\n\t\t\tthis.y = adjustedCoords.y;\r\n\t\t}\r\n\t\tthis.z = 0;\r\n    };\t\r\n\t\r\n\t\r\n//====================================================================\r\n// Sprite_MapBorder\r\n//====================================================================\t\t\r\n\t\r\nfunction Sprite_MapBorder() {\r\n\t\tthis.initialize.apply(this, arguments);\r\n\t}\r\n\r\n\tSprite_MapBorder.prototype = Object.create(Sprite_Base.prototype);\r\n\tSprite_MapBorder.prototype.constructor = Sprite_MapBorder;\r\n\r\n\tSprite_MapBorder.prototype.initialize = function(x, y, width, height) {\r\n\t\tSprite_Base.prototype.initialize.call(this);\r\n\t\tthis.bitmap = new Bitmap(width, height);\r\n\t\tthis.bitmap.fillAll('black');\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\t\tthis.anchor.x = 0;\r\n\t\tthis.anchor.y = 0;\r\n\t\tthis._posX = x;\r\n\t\tthis._posY = y;\r\n\t\t//$gameSystem.cloudScrollSource = \"Clouds1\"\r\n\t\t//this.blendMode = Graphics.BLEND_ADD;\r\n\t};\r\n\r\n\tSprite_MapBorder.prototype.update = function() {\t\t\r\n\t\tif((typeof UltraMode7 != \"undefined\") && UltraMode7.isActive()){\r\n\t\t\tthis.opacity = 0;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.updatePosition();\r\n\t\t\r\n\t};\r\n\t\r\n\tSprite_MapBorder.prototype.updatePosition = function() {\r\n        var tileWidth = $gameMap.tileWidth();\r\n        var tileHeight = $gameMap.tileHeight();\r\n        this.x = ($gameMap.adjustX(this._posX) + 0.5) * tileWidth -$gameMap.tileWidth()/2;\r\n        this.y = ($gameMap.adjustY(this._posY) + 0.5) * tileHeight -$gameMap.tileHeight()/2;\r\n\t\t\r\n\t\tthis.z = 0;\r\n    };\t\t\r\n\r\n//====================================================================\r\n// Sprite_AreaHighlights\r\n//====================================================================\t\r\n\t\r\n\tfunction Sprite_AreaHighlights() {\r\n\t\t\r\n\t\tthis.initialize.apply(this, arguments);\r\n\t\tthis._isProjected = true;\r\n\t}\r\n\r\n\tSprite_AreaHighlights.prototype = Object.create(Sprite_Base.prototype);\r\n\tSprite_AreaHighlights.prototype.constructor = Sprite_AreaHighlights;\r\n\t\r\n\t\r\n\r\n\r\n\tSprite_AreaHighlights.prototype.initialize = function(layer, subId) {\r\n\t\tSprite_Base.prototype.initialize.call(this);\r\n\t\t/*for(var i = 0; i < $gameMap.width(); i++){\r\n\t\t\tthis.bitmap.fillRect(i * $gameMap.tileWidth(), 0, 1 , this.bitmap.height, \"white\");\r\n\t\t}\r\n\t\tfor(var i = 0; i < $gameMap.height(); i++){\r\n\t\t\tthis.bitmap.fillRect(0, i * $gameMap.tileHeight(), this.bitmap.width , 1, \"white\");\r\n\t\t}*/\r\n\t\tthis._layer = layer;\r\n\t\tthis._subId = subId;\r\n\t\tthis.bitmap = new Bitmap($gameMap.tileWidth() * $gameMap.width(), $gameMap.tileHeight() * $gameMap.height());\r\n\t\t\r\n\t\tthis.anchor.x = 0;\r\n\t\tthis.anchor.y = 0;\r\n\t\tthis._posX = 0;\r\n\t\tthis._posY = 0;\r\n\t\t//this.opacity = 128;\r\n\t\t//this.blendMode = Graphics.BLEND_ADD;\r\n\t\tthis._frameCount = 0;\r\n\t\tthis._animCounter = 1;\r\n\t\tthis._animInfo = [];\r\n\t\tthis.construct();\r\n\t};\r\n\t\r\n\tSprite_AreaHighlights.prototype.shuffleAnimTiles = function(){\r\n\t\tlet array = this._animInfo;\t\t\r\n\t\tfor (let i = array.length - 1; i > 0; i--) {\r\n\t\t\tconst j = Math.floor(Math.random() * (i + 1));\r\n\t\t\t[array[i], array[j]] = [array[j], array[i]];\r\n\t\t}\r\n\t}\r\n\t\r\n\tSprite_AreaHighlights.prototype.construct = function() {\r\n\t\tvar _this = this;\r\n\t\tthis.projectedTexture = null;\r\n\t\tif(!this._animInfo){\r\n\t\t\tthis._animInfo = [];\r\n\t\t}\r\n\t\r\n\t\tthis.bitmap.clearRect(0, 0, $gameMap.tileWidth() * $gameMap.width(), $gameMap.tileHeight() * $gameMap.height());\t\r\n\t\t\t\r\n\t\t\t\r\n\t\tif(this._layer == \"1\"){\r\n\t\t\tif($gameSystem.highlightedMapRetargetTiles){\r\n\t\t\t\tfor(var i = 0; i < $gameSystem.highlightedMapRetargetTiles.length; i++){\r\n\t\t\t\t\tvar highlight = $gameSystem.highlightedMapRetargetTiles[i];\r\n\t\t\t\t\tthis.bitmap.fillRect(highlight.x * $gameMap.tileWidth(), highlight.y * $gameMap.tileHeight(), $gameMap.tileWidth(), $gameMap.tileHeight(), highlight.color);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if(this._layer == \"region\"){\r\n\t\t\tif($gameSystem.regionHighlights){\r\n\t\t\t\tObject.keys($gameSystem.regionHighlights).forEach(function(regionId){\r\n\t\t\t\t\tvar color = $gameSystem.regionHighlights[regionId];\r\n\t\t\t\t\tvar tileCoords = $gameMap.getRegionTiles(regionId);\r\n\t\t\t\t\tfor(var i = 0; i < tileCoords.length; i++){\r\n\t\t\t\t\t\tvar highlight = tileCoords[i];\r\n\t\t\t\t\t\t_this.bitmap.fillRect(highlight.x * $gameMap.tileWidth(), highlight.y * $gameMap.tileHeight(), $gameMap.tileWidth(), $gameMap.tileHeight(), color);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\t\t\t\r\n\t\t\t}\r\n\t\t} else if(this._layer == \"move_edge\"){\r\n\t\t\tif($gameSystem.moveEdgeHighlights){\r\n\t\t\t\tfor(var i = 0; i < $gameSystem.moveEdgeHighlights.length; i++){\r\n\t\t\t\t\tvar highlight = $gameSystem.moveEdgeHighlights[i];\r\n\t\t\t\t\tthis.bitmap.fillRect(highlight.x * $gameMap.tileWidth(), highlight.y * $gameMap.tileHeight(), $gameMap.tileWidth(), $gameMap.tileHeight(), highlight.color);\r\n\t\t\t\t}\t\t\r\n\t\t\t}\r\n\t\t} else if(this._layer == \"ability_zone\"){\r\n\t\t\tlet zoneInfo = $gameSystem.getAbilityZone(this._subId);\r\n\t\t\tif(zoneInfo && zoneInfo.phaseCount > 0){\r\n\t\t\t\tlet center = zoneInfo.center;\r\n\t\t\t\tfor(var i = 0; i < zoneInfo.pattern.length; i++){\r\n\t\t\t\t\tvar highlight = zoneInfo.pattern[i];\r\n\t\t\t\t\tthis.bitmap.fillRect((center.x + highlight.x) * $gameMap.tileWidth(), (center.y + highlight.y) * $gameMap.tileHeight(), $gameMap.tileWidth(), $gameMap.tileHeight(), zoneInfo.color);\r\n\t\t\t\t}\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} else {\r\n\t\t\tif($gameSystem.highlightedTiles){\r\n\t\t\t\tfor(var i = 0; i < $gameSystem.highlightedTiles.length; i++){\r\n\t\t\t\t\tvar highlight = $gameSystem.highlightedTiles[i];\r\n\t\t\t\t\tthis.bitmap.fillRect(highlight.x * $gameMap.tileWidth(), highlight.y * $gameMap.tileHeight(), $gameMap.tileWidth(), $gameMap.tileHeight(), highlight.color);\r\n\t\t\t\t}\r\n\t\t\t}\t\r\n\t\t\t\r\n\t\t\tif($gameSystem.highlightedActionTiles){\r\n\t\t\t\tfor(var i = 0; i < $gameSystem.highlightedActionTiles.length; i++){\r\n\t\t\t\t\tvar highlight = $gameSystem.highlightedActionTiles[i];\r\n\t\t\t\t\tthis.bitmap.fillRect(highlight.x * $gameMap.tileWidth(), highlight.y * $gameMap.tileHeight(), $gameMap.tileWidth(), $gameMap.tileHeight(), highlight.color);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\t\r\n\t}\r\n\r\n\tSprite_AreaHighlights.prototype.update = function() {\r\n\t\tif(this._layer == \"0\" && $gameSystem.highlightsRefreshed){\r\n\t\t\t$gameSystem.highlightsRefreshed = false;\r\n\t\t\tthis.construct();\r\n\t\t}\t\r\n\t\t\r\n\t\tif(this._layer == \"1\" && $gameSystem.highlightsLayer1Refreshed){\r\n\t\t\t$gameSystem.highlightsLayer1Refreshed = false;\r\n\t\t\tthis.construct();\r\n\t\t}\r\n\t\t\r\n\t\tif(this._layer == \"region\" && $gameSystem.regionHighlightsRefreshed){\r\n\t\t\t$gameSystem.regionHighlightsRefreshed = false;\r\n\t\t\tthis.construct();\r\n\t\t}\r\n\t\t\r\n\t\tif(this._layer == \"move_edge\" && $gameSystem.moveEdgeHighlightsRefreshed){\r\n\t\t\t$gameSystem.moveEdgeHighlightsRefreshed = false;\r\n\t\t\tthis.construct();\r\n\t\t}\r\n\t\t\r\n\t\tif(this._layer == \"ability_zone\" && $gameSystem.abilityZoneNeedsRefresh(this._subId)){\r\n\t\t\t$gameSystem.clearAbilityZoneNeedsRefresh(this._subId);\r\n\t\t\tfor(let tile of this._animInfo){\r\n\t\t\t\ttile.isLeaving = true;\r\n\t\t\t}\r\n\t\t\tthis.construct();\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tthis.updatePosition();\t\r\n\t\tif(this._layer == \"move_edge\"){\r\n\t\t\tif(!$gameSystem.showMoveEdge){\r\n\t\t\t\tthis.opacity = 0;\r\n\t\t\t} else {\r\n\t\t\t\tthis.opacity = 175;\r\n\t\t\t}\t\t\t\r\n\t\t} else if(this._layer != \"region\" && $gameTemp.disableHighlightGlow){\r\n\t\t\tthis.opacity = 100;\r\n\t\t} else {\r\n\t\t\tthis._frameCount+=2;\r\n\t\t\tthis._frameCount %= 200;\r\n\t\t\tif(this._frameCount < 100){\r\n\t\t\t\tthis.opacity = this._frameCount + 80;\r\n\t\t\t} else {\r\n\t\t\t\tthis.opacity = 200 + 80 - this._frameCount;\r\n\t\t\t}\r\n\t\t}\t\r\n\r\n\t};\r\n\t\r\n\tSprite_AreaHighlights.prototype.updatePosition = function() {\r\n        var tileWidth = $gameMap.tileWidth();\r\n        var tileHeight = $gameMap.tileHeight();\r\n        this.x = ($gameMap.adjustX(this._posX) + 0.5) * tileWidth -$gameMap.tileWidth()/2;\r\n        this.y = ($gameMap.adjustY(this._posY) + 0.5) * tileHeight -$gameMap.tileHeight()/2;\r\n\t\tthis.z = 0;\r\n    };\r\n\t\r\n\t\r\n\tfunction Sprite_HealthBar() {\r\n\tthis.initialize.apply(this, arguments);\r\n}\r\n\r\nSprite_HealthBar.prototype = Object.create(Sprite_Base.prototype);\r\nSprite_HealthBar.prototype.constructor = Sprite_HealthBar;\r\n\r\nSprite_HealthBar.prototype.initialize = function(character) {\r\n\tSprite_Base.prototype.initialize.call(this);\r\n\tthis._character = character;\r\n\tthis._previousHp = -1;\r\n\tthis._previousMaxHp = -1;\r\n\tthis._barWidth = 26;\r\n\tthis._barHeight = 4;\r\n\tthis._borderWidth = 1;\r\n\tthis.createBitmap();\r\n\tthis._hpFillRate = 1;\r\n};\r\n\r\nSprite_HealthBar.prototype.createBitmap = function() {\r\n\tvar width = this._barWidth + (this._borderWidth * 2) + 2;\r\n\tvar height = this._barHeight + (this._borderWidth * 2) + 2;\r\n\tthis.bitmap = new Bitmap(width, height);\r\n};\r\n\r\nSprite_HealthBar.prototype.update = function() {\r\n\tif(ENGINE_SETTINGS.ENABLE_HEALTH_BARS_ON_MAP) {\r\n\t\tvar eventId = this._character.eventId();\r\n\t\tvar battlerArray = $gameSystem.EventToUnit(eventId);\r\n\t\t\r\n\t\tif(battlerArray) {\r\n\t\t\tvar unit = battlerArray[1];\r\n\t\t\tvar type = this._character.isType();\r\n\t\t\tthis._isEnemy = type === 'enemy'\r\n\t\t\tif(unit){\t\t\t\r\n\t\t\t\tconst mechStats = $statCalc.getCalculatedMechStats(unit);\r\n\t\t\t\tvar currentHp = mechStats.currentHP;\r\n\t\t\t\tvar maxHp = mechStats.maxHP;\r\n\r\n\t\t\t\tif(this._previousHp == -1){\r\n\t\t\t\t\tthis._previousHp = currentHp;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(this._previousMaxHp == -1){\r\n\t\t\t\t\tthis._previousMaxHp = maxHp;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t// Check if we need to redraw the health bar\r\n\t\t\t\tif(this._previousHp !== currentHp || this._previousMaxHp !== maxHp) {\r\n\t\t\t\t\tconst direction = Math.sign(currentHp - this._previousHp);\r\n\r\n\t\t\t\t\tthis._previousHp += maxHp * this._hpFillRate * direction;\r\n\t\t\t\t\tif(Math.abs(this._previousHp - currentHp) <  maxHp * this._hpFillRate){\r\n\t\t\t\t\t\tthis._previousHp = currentHp;\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis._previousMaxHp = maxHp;\r\n\t\t\t\t\tthis.drawHealthBar(this._previousHp, maxHp);\r\n\t\t\t\t} \r\n\t\t\t\t\r\n\t\t\t\tthis.anchor.x = 0.5;\r\n\t\t\t\tthis.anchor.y = 1;\r\n\t\t\t\t\r\n\t\t\t\tthis.x = this._character.screenX();\r\n\t\t\t\tthis.y = this._character.screenY();\r\n\t\t\t\tthis.y -= 38; // Position above character\r\n\r\n\t\t\t\tif(this._isEnemy){\r\n\t\t\t\t\tthis.x-=8;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.x+=10;\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t// Show health bar if unit exists, character isn't erased, and health bars are enabled\r\n\t\t\t\tif(unit && !this._character.isErased() && ConfigManager[\"willIndicator\"] == 2) {\r\n\t\t\t\t\tthis.opacity = 255;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.opacity = 0;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.opacity = 0;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.opacity = 0;\r\n\t\t}\r\n\t} else {\r\n\t\tthis.opacity = 0;\r\n\t}\r\n};\r\n\r\nSprite_HealthBar.prototype.drawHealthBar = function(currentHp, maxHp) {\r\n\tvar bitmap = this.bitmap;\r\n\tbitmap.clear();\r\n\t\r\n\tvar width = this._barWidth + (this._borderWidth * 2);\r\n\tvar height = this._barHeight + (this._borderWidth * 2);\r\n\t\r\n\t// Draw border (black background)\r\n\tbitmap.fillRect(0, 0, width + 1, height + 1, '#444444');\r\n\r\n\tbitmap.fillRect(0, 0, width, height, '#FFFFFF');\r\n\t\r\n\t// Draw background (dark red)\r\n\tbitmap.fillRect(this._borderWidth , this._borderWidth, this._barWidth, this._barHeight, '#000000');\r\n\t\r\n\t// Calculate health percentage\r\n\tvar hpRatio = maxHp > 0 ? currentHp / maxHp : 0;\r\n\tvar fillWidth = Math.floor(this._barWidth * hpRatio);\r\n\t\r\n\t// Determine health bar color based on HP percentage\r\n\tvar healthColor = this.getHealthColor(hpRatio);\r\n\t\r\n\t// Draw current health\r\n\tif(fillWidth > 0) {\r\n\t\tbitmap.fillRect(this._borderWidth , this._borderWidth, fillWidth, this._barHeight, healthColor);\r\n\t}\r\n};\r\n\r\nSprite_HealthBar.prototype.getHealthColor = function(hpRatio) {\r\n\tconst hpPercent = hpRatio * 100;\r\n\tlet fillColor = ENGINE_SETTINGS.HP_BAR_COLORS.critical;\r\n\tif(hpPercent >= ENGINE_SETTINGS.HP_BAR_COLORS.full.percent){\r\n\t\tfillColor =  ENGINE_SETTINGS.HP_BAR_COLORS.full.color;\r\n\t} else if(hpPercent >= ENGINE_SETTINGS.HP_BAR_COLORS.high.percent){\r\n\t\tfillColor =  ENGINE_SETTINGS.HP_BAR_COLORS.high.color;\r\n\t} else if(hpPercent >= ENGINE_SETTINGS.HP_BAR_COLORS.med.percent){\r\n\t\tfillColor =  ENGINE_SETTINGS.HP_BAR_COLORS.med.color;\r\n\t} else if(hpPercent >= ENGINE_SETTINGS.HP_BAR_COLORS.low.percent){\r\n\t\tfillColor =  ENGINE_SETTINGS.HP_BAR_COLORS.low.color;\r\n\t} else {\r\n\t\tfillColor =  ENGINE_SETTINGS.HP_BAR_COLORS.critical.color;\r\n\t}\r\n\treturn fillColor;\r\n};\n\n//# sourceURL=webpack://src/./js/SRW_Core/Sprites.js?");

/***/ }),

/***/ "./js/SRW Core/Windows.js":
/*!********************************!*\
  !*** ./js/SRW Core/Windows.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n\t/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n\t\tpatches: patches,\r\n\t\tWindow_CounterCommand: Window_CounterCommand,\r\n\t\tWindow_SRWItemBattle: Window_SRWItemBattle,\r\n\t\tWindow_SRWAbilityCommand: Window_SRWAbilityCommand,\r\n\t\tWindow_SRWAbilityDescription: Window_SRWAbilityDescription,\r\n\t\tWindow_SRWTransformSelection: Window_SRWTransformSelection,\r\n\t\tWindow_SRWPilotSelection: Window_SRWPilotSelection,\r\n\t\tWindow_StageInfo: Window_StageInfo,\r\n\t\tWindow_ConditionsInfo: Window_ConditionsInfo,\r\n\t\tWindow_LocationHeader: Window_LocationHeader\r\n\t}); \r\n\t\r\n\tfunction patches(){};\r\n\t\r\n\tpatches.apply = function(){\r\n\t\tWindow_SavefileList.prototype.drawItem = function(index) {\r\n\t\t\tvar id = index + 1;\r\n\t\t\tvar valid = DataManager.isThisGameFile(id);\r\n\t\t\tvar info = DataManager.loadSavefileInfo(id);\r\n\t\t\tvar rect = this.itemRectForText(index);\r\n\t\t\tthis.resetTextColor();\r\n\t\t\tif (this._mode === 'load') {\r\n\t\t\t\tthis.changePaintOpacity(valid);\r\n\t\t\t}\r\n\t\t\tthis.drawFileId(id, rect.x, rect.y);\r\n\t\t\tif (info) {\r\n\t\t\t\tthis.changePaintOpacity(valid);\r\n\t\t\t\tthis.drawContents(info, rect, valid);\r\n\t\t\t\tthis.changePaintOpacity(true);\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tWindow_SavefileList.prototype.drawContents = function(info, rect, valid) {\r\n\t\t\tvar bottom = rect.y + rect.height;\r\n\t\t\tif (rect.width >= 420) {\r\n\t\t\t\tthis.drawGameTitle(info, rect.x + 192, rect.y, rect.width - 192);\r\n\t\t\t\tif (valid) {\r\n\t\t\t\t\tthis.drawPartyCharacters(info, rect.x + 220, bottom - 4);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tvar lineHeight = this.lineHeight();\r\n\t\t\tvar y2 = bottom - lineHeight;\r\n\t\t\tif (y2 >= lineHeight) {\r\n\t\t\t\tthis.drawPlaytime(info, rect.x, y2, rect.width);\r\n\t\t\t}\r\n\t\t\tvar offSetX = 20;\r\n\t\t\tvar bottomOffset = 54;\r\n\t\t\tif(info.funds != null){\r\n\t\t\t\tthis.drawText(APPSTRINGS.SAVEMENU.label_funds+\": \"+info.funds, offSetX + rect.x, bottom - bottomOffset, 240);\r\n\t\t\t}\r\n\t\t\tif(info.funds != null){\r\n\t\t\t\tthis.drawText(APPSTRINGS.SAVEMENU.label_SR_count+\": \"+info.SRCount, offSetX + rect.x + 240, bottom - bottomOffset, 240);\r\n\t\t\t}\r\n\t\t\tif(info.funds != null){\r\n\t\t\t\tthis.drawText(APPSTRINGS.SAVEMENU.label_turn_count+\": \"+info.turnCount, offSetX + rect.x + 480, bottom - bottomOffset, 240);\r\n\t\t\t}\t\t\r\n\t\t};\t\r\n\t\t\r\n\t\t\r\n\t\tWindow_SavefileList.prototype.cursorRight = function(wrap) {\r\n\t\t\tvar index = this.index();\r\n\t\t\tvar maxItems = this.maxItems();\t\t\r\n\t\t\tif(index == maxItems - 1){\r\n\t\t\t\t//no loop around with large steps seems better\r\n\t\t\t\t//this.select(0);\r\n\t\t\t} else if(index + 10 > maxItems - 1){\r\n\t\t\t\tthis.select(maxItems - 1);\r\n\t\t\t} else {\r\n\t\t\t\tthis.select((index + 10) % maxItems);\t\r\n\t\t\t}\t\t\t\t\t\r\n\t\t};\r\n\r\n\t\tWindow_SavefileList.prototype.cursorLeft = function(wrap) {\r\n\t\t\tvar index = this.index();\r\n\t\t\tvar maxItems = this.maxItems();\t\r\n\t\t\tif(index == 0){\r\n\t\t\t\t//no loop around with large steps seems better\r\n\t\t\t\t//this.select(maxItems - 1);\r\n\t\t\t} else if(index - 10 < 0){\r\n\t\t\t\tthis.select(0);\r\n\t\t\t} else {\r\n\t\t\t\tthis.select((index - 10 + maxItems) % maxItems);\r\n\t\t\t}\t\t\t\t\t\t\t\t\t\r\n\t\t};\r\n\r\n\t\t\r\n\t\tWindow_Message.prototype.isInstantText = function() {\r\n\t\t\treturn Input.isPressed('ok') && Input.isPressed('pagedown');\r\n\t\t}\r\n\t\t\r\n\t\tWindow_Message.prototype.updateMessage = function() {\r\n\t\t\tif (this._textState) {\r\n\t\t\t\twhile (!this.isEndOfText(this._textState)) {\r\n\t\t\t\t\tif (this.needsNewPage(this._textState)) {\r\n\t\t\t\t\t\tthis.newPage(this._textState);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tthis.updateShowFast();\r\n\t\t\t\t\tthis.processCharacter(this._textState);\r\n\t\t\t\t\tif(!this.isInstantText()){\t\t\t\r\n\t\t\t\t\t\tif (!this._showFast && !this._lineShowFast) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (this.pause || this._waitCount > 0) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} \r\n\t\t\t\t}\r\n\t\t\t\tif (this.isEndOfText(this._textState)) {\r\n\t\t\t\t\tthis.onEndOfText();\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tWindow_Message.prototype.updateInput = function() {\t\t\r\n\t\t\tvar _this = this;\r\n\t\t\tif (this.isAnySubWindowActive()) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif (this._showingLog){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif (this.pause) {\r\n\t\t\t\tif(Input.isTriggered('menu')){\t\r\n\t\t\t\t\tthis._showingLog = true;\t\r\n\t\t\t\t\tthis.hide();\r\n\t\t\t\t\t$gameTemp.textLogCancelCallback = function(){\r\n\t\t\t\t\t\t_this._showingLog = false;\r\n\t\t\t\t\t\t_this.show();\r\n\t\t\t\t\t\tInput.clear();//ensure the B press from closing the list does not propagate to the pause menu\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t\t$gameTemp.pushMenu = \"text_log\";\r\n\t\t\t\t} else if (this.isTriggered() || this.isInstantText()) {\r\n\t\t\t\t\tInput.update();\r\n\t\t\t\t\tthis.pause = false;\r\n\t\t\t\t\tif (!this._textState) {\r\n\t\t\t\t\t\tthis.terminateMessage();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t};\r\n\t\t\r\n\t\tWindow_Message.prototype.startPause = function() {\r\n\t\t\tvar waitCount;\r\n\t\t\tif(this.isInstantText()){\r\n\t\t\t\twaitCount = 2;\r\n\t\t\t} else {\r\n\t\t\t\twaitCount = 10;\r\n\t\t\t}\r\n\t\t\tthis.startWait(waitCount);\r\n\t\t\tthis.pause = true;\r\n\t\t};\t\t\r\n\t\t\r\n\t\tWindow_Message.prototype.processEscapeCharacter = function(code, textState) {\r\n\t\t\tswitch (code) {\r\n\t\t\t/*case 'R':\r\n\t\t\t\tthis._isRemote = !!this.obtainEscapeParam(textState);\r\n\t\t\t\tthis.updateFaceDisplay();\r\n\t\t\t\tbreak;*/\r\n\t\t\tcase '$':\r\n\t\t\t\tthis._goldWindow.open();\r\n\t\t\t\tbreak;\r\n\t\t\tcase '.':\r\n\t\t\t\tthis.startWait(15);\r\n\t\t\t\tbreak;\r\n\t\t\tcase '|':\r\n\t\t\t\tthis.startWait(60);\r\n\t\t\t\tbreak;\r\n\t\t\tcase '!':\r\n\t\t\t\tthis.startPause();\r\n\t\t\t\tbreak;\r\n\t\t\tcase '>':\r\n\t\t\t\tthis._lineShowFast = true;\r\n\t\t\t\tbreak;\r\n\t\t\tcase '<':\r\n\t\t\t\tthis._lineShowFast = false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase '^':\r\n\t\t\t\tthis._pauseSkip = true;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tWindow_Base.prototype.processEscapeCharacter.call(this, code, textState);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tWindow_Message.prototype.update = function() {\r\n\t\t\tthis.checkToNotClose();\r\n\t\t\tWindow_Base.prototype.update.call(this);\r\n\t\t\twhile (!this.isOpening() && !this.isClosing()) {\r\n\t\t\t\tthis._remoteOverlayCounter+=0.2;\r\n\t\t\t\tif($gameMessage.faceName()){\r\n\t\t\t\t\tthis.updateFaceDisplay();\r\n\t\t\t\t}\r\n\t\t\t\tif($gameTemp.locationHeader){\r\n\t\t\t\t\tthis._locationHeaderWindow.open();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._locationHeaderWindow.close();\r\n\t\t\t\t}\r\n\t\t\t\tif (this.updateWait()) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t} else if (this.updateLoading()) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t} else if (this.updateInput()) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t} else if (this.updateMessage()) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t} else if (this.canStart()) {\r\n\t\t\t\t\tthis.startMessage();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.startInput();\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tWindow_Message.prototype.updateLoading = function() {\r\n\t\t\tif (this._faceBitmap) {\r\n\t\t\t\tif (this._faceBitmap.isReady()) {\r\n\t\t\t\t\tthis.updateFaceDisplay();\r\n\t\t\t\t\tthis._faceBitmap = null;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tWindow_Message.prototype.updateFaceDisplay = function() {\r\n\t\t\tlet width = Window_Base._faceWidth;\r\n\t\t\tlet height = Window_Base._faceHeight;\r\n\t\t\tthis.contents.clearRect(0, 0, width, height);\r\n\t\t\r\n\t\t\tthis.drawMessageFace();\r\n\t\t\tif($gameMessage.faceName()){\r\n\t\t\t\tthis.drawPortraitOverlay();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tWindow_Message.prototype.initMembers = function() {\r\n\t\t\tthis._imageReservationId = Utils.generateRuntimeId();\r\n\t\t\tthis._background = 0;\r\n\t\t\tthis._positionType = 2;\r\n\t\t\tthis._waitCount = 0;\r\n\t\t\tthis._faceBitmap = null;\r\n\t\t\tthis._remoteBGBitmaps = [];\r\n\t\t\tthis._textState = null;\r\n\t\t\tthis._remoteOverlayCounter = 0;\r\n\t\t\tthis.clearFlags();\r\n\t\t};\r\n\t\t\r\n\t\tWindow_Message.prototype.drawPortraitOverlay = function() {\r\n\t\t\tif($gameTemp.portraitOverlays){\r\n\t\t\t\tfor(let overlayId of $gameTemp.portraitOverlays){\t\t\t\t\t\r\n\t\t\t\t\tif(!this._remoteBGBitmaps[overlayId]){\r\n\t\t\t\t\t\tthis._remoteBGBitmaps[overlayId] = ImageManager.loadSystem(\"PortraitOverlay_\"+overlayId)\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst x = 0;\r\n\t\t\t\t\tconst y = 0;\r\n\t\t\t\t\tlet width = Window_Base._faceWidth;\r\n\t\t\t\t\tlet height = Window_Base._faceHeight;\r\n\t\t\t\t\tvar pw = Window_Base._faceWidth;\r\n\t\t\t\t\tvar ph = Window_Base._faceHeight;\r\n\t\t\t\t\tvar sw = Math.min(width, pw);\r\n\t\t\t\t\tvar sh = Math.min(height, ph);\r\n\t\t\t\t\tvar dx = Math.floor(x + Math.max(width - pw, 0) / 2);\r\n\t\t\t\t\tvar dy = Math.floor(y + Math.max(height - ph, 0) / 2);\r\n\t\t\t\t\tlet frame = Math.floor(this._remoteOverlayCounter % 16);\r\n\t\t\t\t\t//this._remoteOverlayCounter = frame;\r\n\t\t\t\t\tvar sx = frame % 8 * pw + (pw - sw) / 2;\r\n\t\t\t\t\tvar sy = Math.floor(frame / 8) * ph + (ph - sh) / 2;\r\n\t\t\t\t\tthis.contents.blt(this._remoteBGBitmaps[overlayId], sx, sy, sw, sh, dx, dy);\t\t\t\t\t\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\t\t\t\r\n\t\t};\r\n\t\t\r\n\t\tWindow_Message.prototype.loadMessageFace = function() {\r\n\t\t\tthis._faceBitmap = ImageManager.reserveFace($gameMessage.faceName(), 0, this._imageReservationId);\t\t\t\r\n\t\t};\r\n\t\t\r\n\t\tWindow_Message.prototype.subWindows = function() {\r\n\t\t\treturn [this._goldWindow, this._choiceWindow,\r\n\t\t\t\t\tthis._numberWindow, this._itemWindow,\r\n\t\t\t\t\tthis._locationHeaderWindow];\r\n\t\t};\r\n\t\t\r\n\t\tWindow_Message.prototype.createSubWindows = function() {\r\n\t\t\tthis._goldWindow = new Window_Gold(0, 0);\r\n\t\t\tthis._goldWindow.x = Graphics.boxWidth - this._goldWindow.width;\r\n\t\t\tthis._goldWindow.openness = 0;\r\n\t\t\tthis._choiceWindow = new Window_ChoiceList(this);\r\n\t\t\tthis._numberWindow = new Window_NumberInput(this);\r\n\t\t\tthis._itemWindow = new Window_EventItem(this);\r\n\t\t\t\r\n\t\t\tthis._locationHeaderWindow = new Window_LocationHeader(0, 20);\r\n\t\t\tthis._locationHeaderWindow.openness = 0;\r\n\t\t};\r\n\t\t\r\n\t\tWindow_Message.prototype.terminateMessage = function() {\r\n\t\t\tthis.close();\r\n\t\t\tthis._goldWindow.close();\r\n\t\t\t$gameMessage.clear();\r\n\t\t};\r\n\r\n\t//====================================================================\r\n\t// ●Window_ActorCommand\r\n\t//====================================================================\r\n\t\tWindow_Command.prototype.isList = function() {\r\n\t\t\tif (this._list) {\r\n\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar _SRPG_Window_ActorCommand_numVisibleRows = Window_ActorCommand.prototype.numVisibleRows;\r\n\t\tWindow_ActorCommand.prototype.numVisibleRows = function() {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tif (this.isList()) {\r\n\t\t\t\t\treturn this.maxItems();\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\treturn _SRPG_Window_ActorCommand_numVisibleRows.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar _SRPG_Window_ActorCommand_makeCommandList = Window_ActorCommand.prototype.makeCommandList;\r\n\t\tWindow_ActorCommand.prototype.makeCommandList = function() {\r\n\t\t\tvar _this = this;\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tif (this._actor) {\r\n\t\t\t\t\t//TODO: turn different menus into subclasses\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar battler = $gameSystem.EventToUnit($gameTemp.activeEvent().eventId())[1];\r\n\t\t\t\t\tvar type = battler.isActor() ? \"enemy\" : \"actor\";\r\n\t\t\t\t\tvar pos = {\r\n\t\t\t\t\t\tx: $gameTemp.activeEvent().posX(),\r\n\t\t\t\t\t\ty: $gameTemp.activeEvent().posY()\r\n\t\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\t\tvar hasTarget = $statCalc.getAllInRange(this._actor, false, $gameTemp.isPostMove, true).length > 0;\r\n\t\t\t\t\tvar hasMapWeapon = $statCalc.hasMapWeaponWithTargets(battler, $gameTemp.isPostMove);\r\n\t\t\t\t\t\r\n\t\t\t\t\tfunction boardingMenu(){\r\n\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.board, 'board');\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tfunction regularMenu(){\r\n\t\t\t\t\t\tif(_this._actor.battleMode() != \"fixed\"){\r\n\t\t\t\t\t\t\t_this.addMoveCommand();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif((hasTarget || hasMapWeapon) && $statCalc.canAttackOnCurrentTerrain(_this._actor)){\r\n\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_attack, 'attack');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif($statCalc.isShip(_this._actor) && $statCalc.hasBoardedUnits(_this._actor)){\r\n\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.deploy, 'deploy');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_spirit, 'spirit');\r\n\t\t\t\t\t\tif($statCalc.applyStatModsToValue(_this._actor, 0, [\"heal\"]) && $statCalc.hasHealTargets(_this._actor)){\r\n\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_repair, 'heal');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif($statCalc.applyStatModsToValue(_this._actor, 0, [\"resupply\"]) && $statCalc.hasResupplyTargets(_this._actor)){\r\n\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_resupply, 'resupply');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif($statCalc.getConsumables(_this._actor).length){\r\n\t\t\t\t\t\t\t _this.addCommand(APPSTRINGS.MAPMENU.cmd_item, 'item');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif($statCalc.getAbilityCommands(_this._actor).length){\r\n\t\t\t\t\t\t\t _this.addCommand(APPSTRINGS.MAPMENU.cmd_ability, 'ability');\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet terrainCmds = $statCalc.getAvailableSuperStateTransitionsForCurrentPosition(_this._actor);\t\r\n\t\t\t\t\t\tfor(let i = 0; i < Math.min(4, terrainCmds.length); i++){\r\n\t\t\t\t\t\t\t_this.addCommand(terrainCmds[i].cmdName, 'change_super_state_'+i);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif($gameSystem.getPersuadeOption(_this._actor)){\r\n\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_persuade, 'persuade');\r\n\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\tif($statCalc.canCombine(_this._actor).isValid){\r\n\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_combine, 'combine');\r\n\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\tif($statCalc.isCombined(_this._actor)){\r\n\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_split, 'split');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(ENGINE_SETTINGS.ENABLE_TWIN_SYSTEM && !ENGINE_SETTINGS.DISABLE_ALLY_TWINS){\r\n\t\t\t\t\t\t\tif(!$statCalc.isShip(_this._actor) && $statCalc.canSwap(_this._actor)){\r\n\t\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_swap, 'swap');\r\n\t\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\t\tif(!$statCalc.isShip(_this._actor) && $statCalc.canDisband(_this._actor)){\r\n\t\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_separate, 'separate');\r\n\t\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\t\tif(!$statCalc.isShip(_this._actor) && $statCalc.canTwin(_this._actor)){\r\n\t\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_join, 'join');\r\n\t\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif($statCalc.canTransform(_this._actor)){\r\n\t\t\t\t\t\t\t_this.addCommand($statCalc.getTransformCmdName(_this._actor) || APPSTRINGS.MAPMENU.cmd_transform, 'transform');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif($statCalc.canSwapPilot(_this._actor)){\r\n\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_swap_pilot, 'swap_pilot');\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_status, 'status');\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t_this.addWaitCommand();\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tfunction shipPostActionMenu(){\r\n\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.deploy, 'deploy');\r\n\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_status, 'status');\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tfunction hitAndAwayMenu(){\r\n\t\t\t\t\t\t_this.addMoveCommand();\r\n\t\t\t\t\t\t_this.addWaitCommand(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tfunction disabledMenu(){\r\n\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_status, 'status');\t\r\n\t\t\t\t\t\t_this.addWaitCommand(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tfunction statusDisabledMenu(){\r\n\t\t\t\t\t\tif(ENGINE_SETTINGS.ENABLE_TWIN_SYSTEM && !ENGINE_SETTINGS.DISABLE_ALLY_TWINS){\r\n\t\t\t\t\t\t\tif(!$statCalc.isShip(_this._actor) && $statCalc.canSwap(_this._actor)){\r\n\t\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_swap, 'swap');\r\n\t\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\t\tif(!$statCalc.isShip(_this._actor) && $statCalc.canDisband(_this._actor)){\r\n\t\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_separate, 'separate');\r\n\t\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\t\tif(!$statCalc.isShip(_this._actor) && $statCalc.canTwin(_this._actor)){\r\n\t\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_join, 'join');\r\n\t\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_status, 'status');\t\r\n\t\t\t\t\t\t_this.addWaitCommand(true);\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tfunction postMoveMenu(){\r\n\t\t\t\t\t\tif((hasTarget || hasMapWeapon) && $statCalc.canAttackOnCurrentTerrain(_this._actor)){\r\n\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_attack, 'attack');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif($gameSystem.getPersuadeOption(_this._actor)){\r\n\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_persuade, 'persuade');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif($statCalc.applyStatModsToValue(_this._actor, 0, [\"heal\"]) && $statCalc.hasHealTargets(_this._actor)){\r\n\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_repair, 'heal');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(ENGINE_SETTINGS.ENABLE_TWIN_SYSTEM && !ENGINE_SETTINGS.DISABLE_ALLY_TWINS){\r\n\t\t\t\t\t\t\tif($statCalc.canTwin(_this._actor)){\r\n\t\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_join, 'join');\r\n\t\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif($statCalc.canSwapPilot(_this._actor)){\r\n\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_swap_pilot, 'swap_pilot');\r\n\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t_this.addWaitCommand(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tfunction deployMenu(){\r\n\t\t\t\t\t\t_this.addMoveCommand();\t\t\t\t\t\r\n\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_spirit, 'spirit');\r\n\t\t\t\t\t\tlet terrainCmds = $statCalc.getAvailableSuperStateTransitionsForCurrentPosition(_this._actor);\t\r\n\t\t\t\t\t\tfor(let i = 0; i < Math.min(4, terrainCmds.length); i++){\r\n\t\t\t\t\t\t\t_this.addCommand(terrainCmds[i].cmdName, 'change_super_state_'+i);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif($statCalc.getConsumables(_this._actor).length){\r\n\t\t\t\t\t\t\t _this.addCommand(APPSTRINGS.MAPMENU.cmd_item, 'item');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif($gameSystem.isSubBattlePhase() == 'confirm_boarding'){\r\n\t\t\t\t\t\tboardingMenu();\r\n\t\t\t\t\t} else if($gameTemp.isHitAndAway){\r\n\t\t\t\t\t\thitAndAwayMenu();\r\n\t\t\t\t\t} else if($gameTemp.isPostMove){\r\n\t\t\t\t\t\tpostMoveMenu();\r\n\t\t\t\t\t} else if($gameTemp.activeShip){\r\n\t\t\t\t\t\tdeployMenu();\r\n\t\t\t\t\t} else if(this._actor.battleMode() == \"disabled\"){\r\n\t\t\t\t\t\tdisabledMenu();\r\n\t\t\t\t\t} else if($statCalc.isDisabled(this._actor)){\r\n\t\t\t\t\t\tstatusDisabledMenu();\r\n\t\t\t\t\t} else if($statCalc.isShip(_this._actor) && $statCalc.hasBoardedUnits(_this._actor) && !_this._actor.canInput()){\r\n\t\t\t\t\t\tshipPostActionMenu();\r\n\t\t\t\t\t} else {\t\r\n\t\t\t\t\t\tregularMenu();\r\n\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t_SRPG_Window_ActorCommand_makeCommandList.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tWindow_ActorCommand.prototype.addEquipCommand = function() {\r\n\t\t\tthis.addCommand(_textSrpgEquip, 'equip', this._actor.canSrpgEquip());\r\n\t\t};\r\n\r\n\t\tWindow_ActorCommand.prototype.addWaitCommand = function(force) {\r\n\t\t\tif(!ENGINE_SETTINGS.HIDE_WAIT_COMMAND || force){\r\n\t\t\t\tthis.addCommand(APPSTRINGS.MAPMENU.cmd_wait, 'wait');\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tWindow_ActorCommand.prototype.addMoveCommand = function() {\r\n\t\t\tthis.addCommand(APPSTRINGS.MAPMENU.cmd_move, 'move');\r\n\t\t};\r\n\r\n\t\tvar _SRPG_Window_ActorCommand_setup = Window_ActorCommand.prototype.setup;\r\n\t\tWindow_ActorCommand.prototype.setup = function(actor) {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tthis._actor = actor;\r\n\t\t\t\tthis.clearCommandList();\r\n\t\t\t\tthis.makeCommandList();\r\n\t\t\t\tthis.updatePlacement();\r\n\t\t\t\tthis.refresh();\r\n\t\t\t\tthis.selectLast();\r\n\t\t\t\tthis.activate();\r\n\t\t\t\tthis.open();\r\n\t\t\t} else {\r\n\t\t\t\t_SRPG_Window_ActorCommand_setup.call(this, actor);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tWindow_ActorCommand.prototype.updatePlacement = function() {\r\n\t\t\tthis.width = this.windowWidth();\r\n\t\t\tthis.height = this.windowHeight();\r\n\t\t\tthis.x = Math.max($gameTemp.activeEvent().screenX() - $gameMap.tileWidth() / 2 - this.windowWidth(), 0);\r\n\t\t\tif ($gameTemp.activeEvent().screenY() < Graphics.boxHeight - 160) {\r\n\t\t\t\tvar eventY = $gameTemp.activeEvent().screenY();\r\n\t\t\t} else {\r\n\t\t\t\tvar eventY = Graphics.boxHeight - 160;\r\n\t\t\t}\r\n\t\t\tthis.y = Math.max(eventY - this.windowHeight(), 0);\r\n\t\t};\r\n\t\t\r\n\t\t//====================================================================\r\n\t\t// ●Window_MenuCommand\r\n\t\t//====================================================================\r\n\t\t\tvar _SRPG_Window_MenuCommand_makeCommandList = Window_MenuCommand.prototype.makeCommandList;\r\n\t\t\tWindow_MenuCommand.prototype.makeCommandList = function() {       \r\n\t\t\t\t \r\n\t\t\t   \r\n\t\t\t   if($gameSystem.isSRPGMode()){\r\n\t\t\t\t   this.addTurnEndCommand();     \r\n\t\t\t\t   this.addCommand(APPSTRINGS.MAPMENU.cmd_search, 'search', true);\r\n\t\t\t\t   this.addCommand(APPSTRINGS.MAPMENU.cmd_list, 'unitList', true);\r\n\t\t\t\t   this.addCommand(APPSTRINGS.MAPMENU.cmd_conditions, 'conditions', true);\r\n\t\t\t\t   \t\t\t\t   \t\r\n\t\t\t   \r\n\t\t\t\t\tif(ENGINE_SETTINGS.ENABLE_TRANSFORM_ALL){\r\n\t\t\t\t\t\tthis.addCommand(APPSTRINGS.MAPMENU.cmd_transform_all, 'transform_all');\r\n\t\t\t\t\t}\r\n\t\t\t   } else {\r\n\t\t\t\t\tif (this.needsCommand('item')) {\r\n\t\t\t\t\t\tthis.addCommand(TextManager.item, 'item', true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.addOriginalCommands();\r\n\t\t\t   }\r\n\t\t\t   \r\n\t\t\t   this.addCommand(APPSTRINGS.MAPMENU.cmd_options, 'options');\r\n\t\t\t   if($gameSystem.isSRPGMode()){\r\n\t\t\t\tthis.addCommand(APPSTRINGS.MAPMENU.cmd_log, 'log');\r\n\t\t\t   }\r\n\t\t\t   this.addCommand(APPSTRINGS.MAPMENU.cmd_save, 'save');\r\n\t\t\t   this.addCommand(APPSTRINGS.MAPMENU.cmd_game_end, 'gameEnd');\r\n\t\t\t};\r\n\r\n\t\t\tWindow_MenuCommand.prototype.addTurnEndCommand = function() {\r\n\t\t\t\tthis.addCommand(APPSTRINGS.MAPMENU.cmd_end_turn, 'turnEnd', true);\r\n\t\t\t};\r\n\r\n\t\t\tvar _SRPG_Window_MenuCommand_isFormationEnabled = Window_MenuCommand.prototype.isFormationEnabled;\r\n\t\t\tWindow_MenuCommand.prototype.isFormationEnabled = function() {\r\n\t\t\t\t/*if ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn _SRPG_Window_MenuCommand_isFormationEnabled.call(this);\r\n\t\t\t\t}*/\r\n\t\t\t\treturn false\r\n\t\t\t};\r\n\t}\r\n\t\r\n\t//A window that lists the counter/evade/defend options for the player when counter attacking\r\n\tfunction Window_CounterCommand(){\r\n\t\tthis.initialize.apply(this, arguments);\r\n\t}\r\n\r\n\tWindow_CounterCommand.prototype = Object.create(Window_Command.prototype);\r\n\tWindow_CounterCommand.prototype.constructor = Window_CounterCommand;\r\n\r\n\tWindow_CounterCommand.prototype.initialize = function() {\r\n\t\tWindow_Command.prototype.initialize.call(this, 0, 0);\r\n\t\tthis._actor = null;\r\n\t\tthis._item = null;\r\n\t\tthis.openness = 0;\r\n\t\tthis.setup();\r\n\t\tthis.hide();\r\n\t\tthis.deactivate();\r\n\t};\r\n\r\n\tWindow_CounterCommand.prototype.makeCommandList = function() {  \r\n\t\tthis.addCommand(\"Counter\", 'counter');\t\r\n\t\tthis.addCommand(\"Defend\", 'defend');\r\n\t\tthis.addCommand(\"Evade\", 'evade');\r\n\t};\r\n\r\n\tWindow_CounterCommand.prototype.setup = function(actorArray) {\r\n\t\tthis.clearCommandList();\r\n\t\tthis.makeCommandList();\r\n\t\tthis.refresh();\r\n\t\tthis.activate();\r\n\t\tthis.open();\r\n\t};\r\n\r\n\tWindow_CounterCommand.prototype.maxCols = function() {\r\n\t\treturn 1;\r\n\t};\r\n\r\n\tWindow_CounterCommand.prototype.windowHeight = function() {\r\n\t\treturn this.fittingHeight(3);\r\n\t};\r\n\t\r\n\t\r\n\tWindow_Base.prototype.drawSectionRect = function(x, y, w, h, margin, color) {\r\n\t\tvar lineWidth = 1;\r\n\t\tx+=margin;\r\n\t\ty+=margin;\r\n\t\tw-=2*margin;\r\n\t\th-=2*margin;\r\n\t\t//top\r\n\t\tthis.contents.fillRect(x ,y, w, lineWidth, color);\r\n\t\t//bottom\r\n\t\tthis.contents.fillRect(x, y + h, w + lineWidth, lineWidth, color);\r\n\t\t//left\r\n\t\tthis.contents.fillRect(x ,y, lineWidth, h, color);\r\n\t\t//right\r\n\t\tthis.contents.fillRect(x + w, y, lineWidth, h, color);\r\n\t}\r\n\t\r\n\tWindow_Base.prototype.drawRect = function(x, y, w, h, margin, color) {\r\n\t\tx+=margin;\r\n\t\ty+=margin;\r\n\t\tw-=2*margin;\r\n\t\th-=2*margin;\r\n\t\tthis.contents.fillRect(x ,y, w, h, color);\r\n\t}\r\n\t\r\n\tWindow_Base.prototype.windowInnerWidth = function() {\r\n        return this.windowWidth() - 38;\r\n    };\r\n\t\r\n\tWindow_Base.prototype.setFontSize = function(size) {\r\n        this.contents.fontSize = size;\r\n    };\r\n\t\r\n\tWindow_Base.prototype.setItalic = function(state) {\r\n        this.contents.fontItalic = state;\r\n    };\r\n\t\r\n\tWindow_Base.prototype.centerTextOffset = function(text, containerWidth) {\r\n        return containerWidth / 2 - this.textWidth(text) / 2;\r\n    };\r\n\t\r\n\t\r\n\tWindow_Base.prototype.standardFontSize = function() {\r\n\t\treturn ENGINE_SETTINGS.FONT_SIZE || 28;\r\n\t};\r\n\t\r\n\tWindow_Base.prototype.lineHeight = function() {\r\n\t\treturn ENGINE_SETTINGS.LINE_HEIGHT || 36;\r\n\t};\r\n\t\r\n\tWindow_Base.prototype.calcTextHeight = function(textState, all) {\r\n\t\tvar lastFontSize = this.contents.fontSize;\r\n\t\tvar textHeight = 0;\r\n\t\tvar lines = textState.text.slice(textState.index).split('\\n');\r\n\t\tvar maxLines = all ? lines.length : 1;\r\n\r\n\t\tfor (var i = 0; i < maxLines; i++) {\r\n\t\t\tvar maxFontSize = this.contents.fontSize;\r\n\t\t\tvar regExp = /\\x1b[\\{\\}]/g;\r\n\t\t\tfor (;;) {\r\n\t\t\t\tvar array = regExp.exec(lines[i]);\r\n\t\t\t\tif (array) {\r\n\t\t\t\t\tif (array[0] === '\\x1b{') {\r\n\t\t\t\t\t\tthis.makeFontBigger();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (array[0] === '\\x1b}') {\r\n\t\t\t\t\t\tthis.makeFontSmaller();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (maxFontSize < this.contents.fontSize) {\r\n\t\t\t\t\t\tmaxFontSize = this.contents.fontSize;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ttextHeight += maxFontSize + 8;\r\n\t\t}\r\n\r\n\t\tthis.contents.fontSize = lastFontSize;\r\n\t\treturn textHeight * (ENGINE_SETTINGS.MSG_LINE_HEIGHT_SCALE);\r\n\t};\r\n\t\r\n\t\r\n\tWindow_Base.prototype.drawText = function(text, x, y, maxWidth, align) {\r\n\t\tthis.contents.drawText(text, x, y + (ENGINE_SETTINGS.LINE_OFFSET || 0), maxWidth, this.lineHeight(), align);\r\n\t};\r\n\t\r\n\tWindow_Base.prototype.processNormalCharacter = function(textState) {\r\n\t\tvar c = textState.text[textState.index++];\r\n\t\tvar w = this.textWidth(c);\r\n\t\tthis.contents.drawText(c, textState.x, textState.y + (ENGINE_SETTINGS.LINE_OFFSET || 0), w * 2, textState.height);\r\n\t\ttextState.x += w;\r\n\t};\r\n\t\r\n\tvar _Window_Base_ResetFontSettings = Window_Base.prototype.resetFontSettings;\r\n\tWindow_Base.prototype.resetFontSettings = function() {\r\n\t\t_Window_Base_ResetFontSettings.call( this );\r\n\t\tif(ENGINE_SETTINGS.NO_TEXT_SHADOW){\r\n\t\t\tthis.contents.outlineWidth = 0;\r\n\t\t}\t\t\r\n\t};\r\n\t\r\n\tWindow_Base.prototype.standardBackOpacity = function() {\r\n\t\treturn ENGINE_SETTINGS.BACK_OPACITY || 192;\r\n\t};\r\n\t\r\n\tvar _Window_updateCursor = Window.prototype._updateCursor;\r\n\tWindow.prototype._updateCursor = function() {\r\n\t\t_Window_updateCursor.call( this );\r\n\t\tif(ENGINE_SETTINGS.NO_CURSOR_BLINK){\r\n\t\t\tthis._windowCursorSprite.alpha = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t\r\n\tfunction Window_SRWItemBattle() {\r\n\t\tthis._parent = Window_BattleItem.prototype;\r\n\t\tthis.initialize.apply(this, arguments);\t\r\n    }\r\n\r\n    Window_SRWItemBattle.prototype = Object.create(Window_BattleItem.prototype);\r\n    Window_SRWItemBattle.prototype.constructor = Window_SRWItemBattle;\r\n\t\r\n\tWindow_SRWItemBattle.prototype.maxCols = function(){\r\n\t\treturn 1;\r\n\t}\r\n\t\r\n\tWindow_SRWItemBattle.prototype.windowWidth = function() {\r\n        return 240;\r\n    };\r\n\r\n    Window_SRWItemBattle.prototype.windowHeight = function() {\r\n        return this.fittingHeight(4);\r\n    };\r\n\t\r\n\tWindow_SRWItemBattle.prototype.refresh = function(){\r\n\t\tthis._parent.refresh.call(this);\r\n\t}\r\n\t\r\n\tWindow_SRWItemBattle.prototype.drawItem = function(index) {\r\n\t\tvar item = this._data[index];\r\n\t\tif (item) {\r\n\t\t\titem = $itemEffectManager.getAbilityDisplayInfo(item.itemIdx);\r\n\t\t\tvar numberWidth = 0;//this.numberWidth();\r\n\t\t\tvar rect = this.itemRect(index);\r\n\t\t\t//rect.width -= this.textPadding();\r\n\t\t\tthis.drawItemName(item, rect.x, rect.y, rect.width - numberWidth);\r\n\t\t}\r\n\t};\r\n\t\r\n\tWindow_SRWItemBattle.prototype.drawItemName = function(item, x, y, width) {\r\n\t\twidth = width || 312;\r\n\t\tif (item) {\r\n\t\t\tthis.resetTextColor();\r\n\t\t\tthis.drawText(item.name, x + 10, y, width - 20);\r\n\t\t}\r\n\t};\r\n\t\r\n\tWindow_SRWItemBattle.prototype.makeItemList = function() {\r\n\t\tvar actor = $gameSystem.EventToUnit($gameTemp.activeEvent().eventId())[1];\r\n\t\tthis._data = $statCalc.getConsumables(actor);\r\n\t};\r\n\t\r\n\tWindow_SRWItemBattle.prototype.isEnabled = function(item) {\r\n\t\tvar actor = $gameSystem.EventToUnit($gameTemp.activeEvent().eventId())[1];\r\n\t\tvar itemDef = $itemEffectManager.getAbilityDef(item.itemIdx);\r\n\t\treturn itemDef.isActiveHandler(actor);\r\n\t};\t\r\n\t\r\n\tfunction Window_SRWAbilityCommand() {\r\n\t\tthis._parent = Window_BattleItem.prototype;\r\n\t\tthis.initialize.apply(this, arguments);\t\r\n    }\r\n\r\n    Window_SRWAbilityCommand.prototype = Object.create(Window_BattleItem.prototype);\r\n    Window_SRWAbilityCommand.prototype.constructor = Window_SRWAbilityCommand;\r\n\t\r\n\tWindow_SRWAbilityCommand.prototype.maxCols = function(){\r\n\t\treturn 1;\r\n\t}\r\n\t\r\n\tWindow_SRWAbilityCommand.prototype.windowWidth = function() {\r\n        return 400;\r\n    };\r\n\r\n    Window_SRWAbilityCommand.prototype.windowHeight = function() {\r\n        return this.fittingHeight(4);\r\n    };\r\n\t\r\n\tWindow_SRWAbilityCommand.prototype.refresh = function(){\r\n\t\tthis._parent.refresh.call(this);\r\n\t\tif(this._descWindow){\r\n\t\t\tthis._descWindow.refresh(this.getActiveAbilityIndex());\r\n\t\t}\r\n\t}\r\n\t\r\n\tWindow_SRWAbilityCommand.prototype.callUpdateHelp = function() {\r\n\t\tif(this._descWindow){\r\n\t\t\tthis._descWindow.refresh(this.getActiveAbilityIndex());\r\n\t\t}\r\n\t};\t\r\n\t\r\n\tWindow_SRWAbilityCommand.prototype.setDescriptionWindow = function(window){\r\n\t\treturn this._descWindow = window;\r\n\t}\r\n\t\r\n\tWindow_SRWAbilityCommand.prototype.getActiveAbilityIndex = function(){\r\n\t\treturn this._data[this._index];\r\n\t}\t\r\n\t\r\n\tWindow_SRWAbilityCommand.prototype.show = function() {\r\n\t\tthis.selectLast();\r\n\t\tthis.showHelpWindow();\r\n\t\tWindow_ItemList.prototype.show.call(this);\r\n\t\tif(this._descWindow){\r\n\t\t\tthis._descWindow.show();\r\n\t\t}\r\n\t};\r\n\r\n\tWindow_SRWAbilityCommand.prototype.hide = function() {\r\n\t\tthis.hideHelpWindow();\r\n\t\tWindow_ItemList.prototype.hide.call(this);\r\n\t\tif(this._descWindow){\r\n\t\t\tthis._descWindow.hide();\r\n\t\t}\r\n\t};\r\n\t\r\n\tWindow_SRWAbilityCommand.prototype.drawItem = function(index) {\r\n\t\tvar cmdAbilityIdx = this._data[index];\r\n\t\tvar actor = $gameSystem.EventToUnit($gameTemp.activeEvent().eventId())[1];\r\n\t\tif (cmdAbilityIdx != null) {\r\n\t\t\tvar item = $abilityCommandManger.getAbilityDisplayInfo(cmdAbilityIdx);\r\n\t\t\tvar itemDef = $abilityCommandManger.getAbilityDef(cmdAbilityIdx);\r\n\t\t\tvar numberWidth = 100;//this.numberWidth();\r\n\t\t\tvar rect = this.itemRect(index);\r\n\t\t\t//rect.width -= this.textPadding();\r\n\t\t\t\r\n\t\t\tif(!itemDef.isActiveHandler(actor)){\r\n\t\t\t\tthis.changeTextColor(\"#AAAAAA\");\r\n\t\t\t} else {\r\n\t\t\t\tthis.resetTextColor();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.drawItemName(item, rect.x, rect.y, this.windowWidth() - numberWidth);\r\n\t\t\t\r\n\t\t\tvar useInfo = $abilityCommandManger.getUseInfo(actor, cmdAbilityIdx);\r\n\t\t\tif(typeof useInfo != \"object\"){\r\n\t\t\t\tuseInfo = {\r\n\t\t\t\t\ttype: \"ammo\",\r\n\t\t\t\t\tcost: useInfo\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\tif(useInfo.type == \"ammo\"){\r\n\t\t\t\tvar timesUsed = actor.SRWStats.stageTemp.abilityUsed[cmdAbilityIdx] || 0;\r\n\t\t\t\tvar maxCount = useInfo.cost;\r\n\t\t\t\tvar remaining = maxCount - timesUsed;\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tif(remaining <= 0) {\r\n\t\t\t\t\tthis.changeTextColor(\"#FF0000\");\r\n\t\t\t\t} \r\n\t\t\t\tthis.drawText(remaining+\"/\"+maxCount, this.windowWidth() - numberWidth + 5, rect.y, numberWidth);\r\n\t\t\t} else if(useInfo.type == \"EN\"){\r\n\t\t\t\tif(actor.SRWStats.mech.stats.calculated.currentEN < useInfo.cost){\r\n\t\t\t\t\tthis.changeTextColor(\"#FF0000\");\r\n\t\t\t\t}\r\n\t\t\t\tthis.drawText(useInfo.cost+\" \"+APPSTRINGS.GENERAL.label_EN, this.windowWidth() - numberWidth - 15, rect.y, numberWidth);\r\n\t\t\t} else if(useInfo.type == \"MP\"){\r\n\t\t\t\tif(actor.SRWStats.pilot.stats.calculated.currentMP < useInfo.cost){\r\n\t\t\t\t\tthis.changeTextColor(\"#FF0000\");\r\n\t\t\t\t}\r\n\t\t\t\tthis.drawText(useInfo.cost+\" \"+APPSTRINGS.GENERAL.label_MP, this.windowWidth() - numberWidth - 15, rect.y, numberWidth);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t};\r\n\t\r\n\tWindow_SRWAbilityCommand.prototype.drawItemName = function(item, x, y, width) {\r\n\t\twidth = width || 312;\r\n\t\tif (item) {\r\n\t\t\tthis.drawText(item.name, x + 10, y, width - 20);\r\n\t\t}\r\n\t};\r\n\t\r\n\tWindow_SRWAbilityCommand.prototype.makeItemList = function() {\r\n\t\tvar actor = $gameSystem.EventToUnit($gameTemp.activeEvent().eventId())[1];\r\n\t\tthis._data = $statCalc.getAbilityCommands(actor);\r\n\t};\r\n\t\r\n\tWindow_SRWAbilityCommand.prototype.isEnabled = function(item) {\r\n\t\tvar actor = $gameSystem.EventToUnit($gameTemp.activeEvent().eventId())[1];\r\n\t\tvar itemDef = $abilityCommandManger.getAbilityDef(item);\r\n\t\t\r\n\t\tvar useInfo = $abilityCommandManger.getUseInfo(actor, item);\r\n\t\tlet canPayCost = true;\t\t\r\n\t\tif(useInfo.type == \"ammo\"){\r\n\t\t\tvar timesUsed = actor.SRWStats.stageTemp.abilityUsed[item] || 0;\r\n\t\t\tvar maxCount = useInfo.cost;\r\n\t\t\tvar remaining = maxCount - timesUsed;\t\t\t\r\n\t\t\tif(remaining <= 0) {\r\n\t\t\t\tcanPayCost = false;\r\n\t\t\t} \r\n\t\t} else if(useInfo.type == \"EN\"){\r\n\t\t\tif(actor.SRWStats.mech.stats.calculated.currentEN * 1 < useInfo.cost * 1){\r\n\t\t\t\tcanPayCost = false;\r\n\t\t\t}\r\n\t\t} else if(useInfo.type == \"MP\"){\r\n\t\t\tif(actor.SRWStats.pilot.stats.calculated.currentMP * 1 < useInfo.cost * 1){\r\n\t\t\t\tcanPayCost = false;\r\n\t\t\t}\r\n\t\t} else if(Number.isInteger(useInfo)){\r\n\t\t\tvar timesUsed = actor.SRWStats.stageTemp.abilityUsed[item] || 0;\r\n\t\t\tcanPayCost = timesUsed * 1 < useInfo * 1;\r\n\t\t\t\r\n\t\t}\r\n\t\treturn itemDef.isActiveHandler(actor) && canPayCost;\r\n\t};\t\r\n\t\r\n\tfunction Window_SRWTransformSelection() {\r\n\t\tthis._parent = Window_BattleItem.prototype;\r\n\t\tthis.initialize.apply(this, arguments);\t\r\n    }\r\n\r\n    Window_SRWTransformSelection.prototype = Object.create(Window_BattleItem.prototype);\r\n    Window_SRWTransformSelection.prototype.constructor = Window_SRWTransformSelection;\r\n\t\r\n\tWindow_SRWTransformSelection.prototype.maxCols = function(){\r\n\t\treturn 1;\r\n\t}\r\n\t\r\n\tWindow_SRWTransformSelection.prototype.windowWidth = function() {\r\n        return 240;\r\n    };\r\n\r\n    Window_SRWTransformSelection.prototype.windowHeight = function() {\r\n        return this.fittingHeight(4);\r\n    };\r\n\t\r\n\tWindow_SRWTransformSelection.prototype.refresh = function(){\r\n\t\tthis._parent.refresh.call(this);\r\n\t}\r\n\t\r\n\tWindow_SRWTransformSelection.prototype.drawItem = function(index) {\r\n\t\tvar item = this._data[index];\r\n\t\tif (item != null) {\r\n\t\t\titem = $dataClasses[item];\r\n\t\t\tvar numberWidth = 0;//this.numberWidth();\r\n\t\t\tvar rect = this.itemRect(index);\r\n\t\t\t//rect.width -= this.textPadding();\r\n\t\t\tthis.drawItemName(item, rect.x, rect.y, rect.width - numberWidth);\r\n\t\t}\r\n\t};\r\n\t\r\n\tWindow_SRWTransformSelection.prototype.drawItemName = function(item, x, y, width) {\r\n\t\twidth = width || 312;\r\n\t\tif (item) {\r\n\t\t\tthis.resetTextColor();\r\n\t\t\tthis.drawText(item.name, x + 10, y, width - 20);\r\n\t\t}\r\n\t};\r\n\t\r\n\tWindow_SRWTransformSelection.prototype.makeItemList = function() {\r\n\t\tvar actor = $gameSystem.EventToUnit($gameTemp.activeEvent().eventId())[1];\r\n\t\tthis._data = $statCalc.getTransformationList(actor);\r\n\t};\r\n\t\r\n\tWindow_SRWTransformSelection.prototype.isEnabled = function(item) {\r\n\t\treturn true;\r\n\t};\t\r\n\t\r\n\t\r\n\t\r\n\tfunction Window_SRWPilotSelection() {\r\n\t\tthis._parent = Window_BattleItem.prototype;\r\n\t\tthis.initialize.apply(this, arguments);\t\r\n    }\r\n\r\n    Window_SRWPilotSelection.prototype = Object.create(Window_BattleItem.prototype);\r\n    Window_SRWPilotSelection.prototype.constructor = Window_SRWPilotSelection;\r\n\t\r\n\tWindow_SRWPilotSelection.prototype.maxCols = function(){\r\n\t\treturn 1;\r\n\t}\r\n\t\r\n\tWindow_SRWPilotSelection.prototype.windowWidth = function() {\r\n        return 240;\r\n    };\r\n\r\n    Window_SRWPilotSelection.prototype.windowHeight = function() {\r\n\t\tif(!this._data){\r\n\t\t\treturn this.fittingHeight(4);\r\n\t\t} else {\r\n\t\t\treturn this.fittingHeight(this._data.length);\r\n\t\t}        \r\n    };\r\n\t\r\n\t\r\n\tWindow_SRWPilotSelection.prototype.refresh = function(){\t\t\r\n\t\tthis.makeItemList();\r\n\t\tthis.height = this.windowHeight();\r\n\t\tthis.createContents();\r\n\t\tthis.drawAllItems();\r\n\t}\r\n\t\r\n\tWindow_SRWPilotSelection.prototype.drawItem = function(index) {\r\n\t\tvar item = this._data[index];\r\n\t\tif (item != null) {\r\n\t\t\titem = $gameActors.actor(item);\r\n\t\t\tvar numberWidth = 0;//this.numberWidth();\r\n\t\t\tvar rect = this.itemRect(index);\r\n\t\t\t//rect.width -= this.textPadding();\r\n\t\t\tthis.drawItemName(item, rect.x, rect.y, rect.width - numberWidth);\r\n\t\t}\r\n\t};\r\n\t\r\n\tWindow_SRWPilotSelection.prototype.drawItemName = function(item, x, y, width) {\r\n\t\tconst _this = this;\r\n\t\twidth = width || 312;\r\n\t\tif (item) {\r\n\t\t\tthis.resetTextColor();\r\n\t\t\tthis.drawText(item.name(), x + 10, y, width - 60);\r\n\t\t\tlet attr1 = $statCalc.getParticipantAttribute(item, \"attribute1\");\r\n\t\t\tif(attr1){\r\n\t\t\t\tlet attrInfo = ENGINE_SETTINGS.ATTRIBUTE_DISPLAY_NAMES[attr1] || {};\r\n\t\t\t\tvar bitmap = ImageManager.loadSystem(\"attribute_\"+attr1);\r\n\t\t\t\tbitmap.addLoadListener(function(){\r\n\t\t\t\t\t_this.contents.blt(bitmap, 0, 0, 32, 32, x + width - 42, y+2);\r\n\t\t\t\t});\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\t\r\n\tWindow_SRWPilotSelection.prototype.makeItemList = function() {\r\n\t\tvar actor = $gameSystem.EventToUnit($gameTemp.activeEvent().eventId())[1];\r\n\t\tthis._data = $statCalc.getSwapOptions(actor);\r\n\t};\r\n\t\r\n\tWindow_SRWPilotSelection.prototype.isEnabled = function(item) {\r\n\t\treturn true;\r\n\t};\t\r\n\t\r\n\tfunction Window_StageInfo() {\r\n\t\tthis.initialize.apply(this, arguments);\r\n\t}\r\n\r\n\tWindow_StageInfo.prototype = Object.create(Window_Base.prototype);\r\n\tWindow_StageInfo.prototype.constructor = Window_StageInfo;\r\n\r\n\tWindow_StageInfo.prototype.initialize = function(x, y) {\r\n\t\tvar width = this.windowWidth();\r\n\t\tvar height = this.windowHeight();\r\n\t\tWindow_Base.prototype.initialize.call(this, x, y, width, height);\r\n\t\tthis.refresh();\r\n\t};\r\n\r\n\tWindow_StageInfo.prototype.windowWidth = function() {\r\n\t\treturn 240;\r\n\t};\r\n\r\n\tWindow_StageInfo.prototype.windowHeight = function() {\r\n\t\tif($gameSystem.isSRPGMode()){\r\n\t\t\treturn this.fittingHeight(5);\r\n\t\t} else {\r\n\t\t\treturn this.fittingHeight(1);\r\n\t\t}\t\t\r\n\t};\r\n\r\n\tWindow_StageInfo.prototype.refresh = function() {\r\n\t\tvar lineheight = 35;\r\n\t\tvar columnOffset = 95;\r\n\t\tvar x = 5;\r\n\t\tvar y = 0;\r\n\t\tvar width = this.contents.width - this.textPadding() * 2;\r\n\t\tthis.contents.clear();\r\n\t\t\r\n\t\t//this.drawCurrencyValue(this.value(), this.currencyUnit(), x, 0, width);\r\n\t\tlet currentHeight = 0;\r\n\t\tif(ENGINE_SETTINGS.DIFFICULTY_MODS && ENGINE_SETTINGS.DIFFICULTY_MODS.displayInMenus){\r\n\t\t\tconst modeInfo = ENGINE_SETTINGS.DIFFICULTY_MODS.levels[$gameSystem.getCurrentDifficultyLevel()];\r\n\t\t\tthis.changeTextColor(modeInfo.color);\r\n\t\t\tthis.drawText(modeInfo.name + \" \" +APPSTRINGS.GENERAL.label_mode, x, currentHeight, width);\r\n\t\t\tcurrentHeight+=lineheight;\r\n\t\t}\r\n\t\t\r\n\t\tthis.changeTextColor(\"#FFFFFF\");\r\n\t\tthis.drawText(APPSTRINGS.MAPMENU.label_funds, x, currentHeight, width);\r\n\t\tthis.drawText(this.value(), x + columnOffset , currentHeight, width);\r\n\t\t\r\n\t\tcurrentHeight+=lineheight;\r\n\t\tthis.drawText(APPSTRINGS.MAPMENU.label_turn, x,  currentHeight, width);\r\n\t\t/*--text-color-highlight: #f9e343;\t\r\n\t \t--text-color-highlight2: #43dbf9;\t*/\r\n\t\tthis.changeTextColor(\"#43dbf9\");\r\n\t\tthis.drawText($gameVariables.value(_turnVarID), x + columnOffset, currentHeight, width);\r\n\t\tthis.changeTextColor(\"#FFFFFF\");\r\n\t\tcurrentHeight+=lineheight;\r\n\t\tthis.drawText(APPSTRINGS.MAPMENU.label_enemy, x,  currentHeight, width);\r\n\t\tthis.changeTextColor(\"#AA2222\");\r\n\t\tthis.drawText($gameVariables.value(_enemiesDestroyed), x + columnOffset,  currentHeight, width);\r\n\t\tthis.changeTextColor(\"#FFFFFF\");\r\n\t\tthis.drawText(\"/\", x + columnOffset + 30, currentHeight, width);\r\n\t\tthis.changeTextColor(\"#43dbf9\");\r\n\t\tthis.drawText($gameVariables.value(_enemiesDestroyed) + $gameVariables.value(_existEnemyVarID), x + columnOffset + 45,  currentHeight, width);\r\n\t\tthis.changeTextColor(\"#FFFFFF\");\r\n\t\t\r\n\t\tcurrentHeight+=lineheight;\r\n\t\tthis.drawText(APPSTRINGS.MAPMENU.label_ally, x,  currentHeight, width);\r\n\t\tthis.changeTextColor(\"#AA2222\");\r\n\t\tthis.drawText($gameVariables.value(_actorsDestroyed), x + columnOffset,  currentHeight, width);\r\n\t\tthis.changeTextColor(\"#FFFFFF\");\r\n\t\tthis.drawText(\"/\", x + columnOffset + 30,  currentHeight, width);\r\n\t\tthis.changeTextColor(\"#43dbf9\");\r\n\t\tthis.drawText($gameVariables.value(_actorsDestroyed) + $gameVariables.value(_existActorVarID), x + columnOffset + 45,  currentHeight, width);\r\n\t\tthis.changeTextColor(\"#FFFFFF\");\r\n\t\t\r\n\t};\r\n\r\n\tWindow_StageInfo.prototype.value = function() {\r\n\t\treturn $gameParty.gold();\r\n\t};\r\n\r\n\tWindow_StageInfo.prototype.currencyUnit = function() {\r\n\t\treturn TextManager.currencyUnit;\r\n\t};\r\n\r\n\tWindow_StageInfo.prototype.open = function() {\r\n\t\tthis.refresh();\r\n\t\tWindow_Base.prototype.open.call(this);\r\n\t};\r\n\t\r\n\t\r\n\tfunction Window_ConditionsInfo() {\r\n\t\tthis.initialize.apply(this, arguments);\r\n\t}\r\n\r\n\tWindow_ConditionsInfo.prototype = Object.create(Window_Base.prototype);\r\n\tWindow_ConditionsInfo.prototype.constructor = Window_ConditionsInfo;\r\n\r\n\tWindow_ConditionsInfo.prototype.initialize = function(x, y) {\r\n\t\tvar width = this.windowWidth();\r\n\t\tvar height = this.windowHeight();\r\n\t\tWindow_Base.prototype.initialize.call(this, x, y, width, height);\r\n\t\tthis.refresh();\r\n\t};\r\n\r\n\tWindow_ConditionsInfo.prototype.windowWidth = function() {\r\n\t\treturn 760;\r\n\t};\r\n\r\n\tWindow_ConditionsInfo.prototype.windowHeight = function() {\r\n\t\treturn this.fittingHeight(9);\r\n\t};\r\n\t\r\n\tWindow_ConditionsInfo.prototype.drawText = function(text, x, y, maxWidth, align) {\r\n\t\t//text = this.convertEscapeCharacters(text);\r\n\t\t//this.processEscapeCharacter(text);\r\n\t\tvar parts = text.split(\"\\n\");\r\n\t\tfor(var i = 0; i < parts.length; i++){\r\n\t\t\tWindow_Base.prototype.drawText.call(this, parts[i], x, y + (35 * i), maxWidth, align)\r\n\t\t}\t\t\r\n\t}\r\n\r\n\tWindow_ConditionsInfo.prototype.refresh = function() {\r\n\t\tvar lineheight = 35;\r\n\t\tvar columnOffset = 95;\r\n\t\tvar x = 5;\r\n\t\tvar y = 0;\r\n\t\tvar width = this.contents.width - this.textPadding() * 2;\r\n\t\tthis.contents.clear();\r\n\t\tthis.changeTextColor(\"#FFFFFF\");\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tthis.changeTextColor(\"#FFFFFF\");\r\n\t\t\r\n\t\tvar valueOffset = 20;\r\n\t\tthis.drawText($gameVariables.value(_victoryConditionText) || \"\", x + valueOffset, lineheight, width - valueOffset);\r\n\t\t\r\n\t\tthis.drawText($gameVariables.value(_defeatConditionText) || \"\", x + valueOffset, lineheight * 4, width - valueOffset);\r\n\t\t\r\n\t\tvar masteryText = $gameVariables.value(_masteryConditionText);\r\n\t\tif($SRWSaveManager.isMapSRPointLocked($gameMap.mapId())){\r\n\t\t\tmasteryText = APPSTRINGS.GENERAL.label_mastery_locked;\r\n\t\t}\r\n\t\tthis.drawText(masteryText || \"\", x + valueOffset, lineheight * 7, width - valueOffset);\r\n\t\t\r\n\t\tthis.changeTextColor(\"#43dbf9\");\r\n\t\tthis.drawText(APPSTRINGS.GENERAL.label_victory_condition, x, 0, width);\r\n\t\t\r\n\t\tthis.drawText(APPSTRINGS.GENERAL.label_defeat_condition, x, lineheight * 3, width);\r\n\t\t\r\n\t\tthis.drawText(APPSTRINGS.GENERAL.label_mastery_condition, x, lineheight * 6, width);\r\n\t\t\r\n\t};\r\n\r\n\tWindow_ConditionsInfo.prototype.value = function() {\r\n\t\treturn $gameParty.gold();\r\n\t};\r\n\r\n\tWindow_ConditionsInfo.prototype.currencyUnit = function() {\r\n\t\treturn TextManager.currencyUnit;\r\n\t};\r\n\r\n\tWindow_ConditionsInfo.prototype.open = function() {\r\n\t\tthis.refresh();\r\n\t\tWindow_Base.prototype.open.call(this);\r\n\t};\r\n\t\r\n\tfunction Window_SRWAbilityDescription(x,y) {\r\n\t\tthis.initialize.apply(this, arguments);\t\t\r\n\t}\r\n\r\n\tWindow_SRWAbilityDescription.prototype = Object.create(Window_Base.prototype);\r\n\tWindow_SRWAbilityDescription.prototype.constructor = Window_SRWAbilityDescription;\r\n\r\n\tWindow_SRWAbilityDescription.prototype.initialize = function(x, y) {\r\n\t\tvar width = this.windowWidth();\r\n\t\tvar height = this.windowHeight();\r\n\t\tvar x = 0;\r\n\t\tvar y =  SceneManager._screenHeight - height - 50;\r\n\t\tWindow_Base.prototype.initialize.call(this, x, y, width, height);\r\n\t\tthis.refresh();\r\n\t};\r\n\r\n\tWindow_SRWAbilityDescription.prototype.windowWidth = function() {\r\n\t\treturn 1110;\r\n\t};\r\n\r\n\tWindow_SRWAbilityDescription.prototype.windowHeight = function() {\r\n\t\treturn this.fittingHeight(2);\r\n\t};\r\n\t\r\n\tWindow_SRWAbilityDescription.prototype.drawText = function(text, x, y, maxWidth, align) {\r\n\t\t//text = this.convertEscapeCharacters(text);\r\n\t\t//this.processEscapeCharacter(text);\r\n\t\tvar parts = text.split(\"\\n\");\r\n\t\tfor(var i = 0; i < parts.length; i++){\r\n\t\t\tWindow_Base.prototype.drawText.call(this, parts[i], x, y + (35 * i), maxWidth, align)\r\n\t\t}\t\t\r\n\t}\r\n\r\n\tWindow_SRWAbilityDescription.prototype.refresh = function(cmdAbilityIdx) {\r\n\t\tthis.contents.clear();\r\n\t\tvar lineheight = 35;\r\n\t\tvar columnOffset = 95;\r\n\t\tvar x = 5;\r\n\t\tvar y = 0;\r\n\t\tvar event = $gameTemp.activeEvent();\r\n\t\tif(event){\r\n\t\t\tvar actorInfo = $gameSystem.EventToUnit(event.eventId());\r\n\t\t\tif(actorInfo){\r\n\t\t\t\tvar actor = actorInfo[1];\r\n\t\t\t\tif (cmdAbilityIdx != null && actor) {\r\n\t\t\t\t\tvar item = $abilityCommandManger.getAbilityDisplayInfo(cmdAbilityIdx);\r\n\t\t\t\t\tvar itemDef = $abilityCommandManger.getAbilityDef(cmdAbilityIdx);\r\n\t\t\t\t\tvar txt;\r\n\t\t\t\t\tif(typeof item.desc == \"function\"){\r\n\t\t\t\t\t\ttxt = item.desc(actor);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttxt = item.desc;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.drawText((txt || \"\"), 0, 0, 1110 - 38);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t};\r\n\r\n\tWindow_SRWAbilityDescription.prototype.open = function() {\r\n\t\tthis.refresh();\r\n\t\tWindow_Base.prototype.open.call(this);\r\n\t};\r\n\t\r\n\t\r\n\tfunction Window_LocationHeader(x,y) {\r\n\t\tthis.initialize.apply(this, arguments);\t\t\r\n\t}\r\n\r\n\tWindow_LocationHeader.prototype = Object.create(Window_Base.prototype);\r\n\tWindow_LocationHeader.prototype.constructor = Window_LocationHeader;\r\n\r\n\tWindow_LocationHeader.prototype.initialize = function(x, y) {\r\n\t\tvar width = this.windowWidth();\r\n\t\tvar height = this.windowHeight();\r\n\t\tWindow_Base.prototype.initialize.call(this, x, y, width, height);\r\n\t\tthis.setBackgroundType(1);\r\n\t\tthis.refresh();\r\n\t};\r\n\r\n\tWindow_LocationHeader.prototype.windowWidth = function() {\r\n\t\treturn 1110;\r\n\t};\r\n\r\n\tWindow_LocationHeader.prototype.windowHeight = function() {\r\n\t\treturn this.fittingHeight(1);\r\n\t};\r\n\t\r\n\tWindow_LocationHeader.prototype.refresh = function() {\r\n\t\tthis.contents.clear();\t\t\r\n\t\t\r\n\t\tthis.drawText($gameTemp.locationHeader, 0, 0, 1110 - 38);\r\n\t\t\t\r\n\t};\r\n\r\n\tWindow_LocationHeader.prototype.open = function() {\r\n\t\tthis.refresh();\r\n\t\tWindow_Base.prototype.open.call(this);\r\n\t};\r\n\t\r\n\t\n\n//# sourceURL=webpack://src/./js/SRW_Core/Windows.js?");

/***/ }),

/***/ "./js/SRW Core/main.js":
/*!*****************************!*\
  !*** ./js/SRW Core/main.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Windows_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Windows.js */ \"./js/SRW Core/Windows.js\");\n/* harmony import */ var _PluginCommands_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PluginCommands.js */ \"./js/SRW Core/PluginCommands.js\");\n/* harmony import */ var _GameTemp_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./GameTemp.js */ \"./js/SRW Core/GameTemp.js\");\n/* harmony import */ var _GameSystem_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./GameSystem.js */ \"./js/SRW Core/GameSystem.js\");\n/* harmony import */ var _GameMessage_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./GameMessage.js */ \"./js/SRW Core/GameMessage.js\");\n/* harmony import */ var _DataManagement_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./DataManagement.js */ \"./js/SRW Core/DataManagement.js\");\n/* harmony import */ var _GameInterpreter_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./GameInterpreter.js */ \"./js/SRW Core/GameInterpreter.js\");\n/* harmony import */ var _Sprites_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Sprites.js */ \"./js/SRW Core/Sprites.js\");\n/* harmony import */ var _Map_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Map.js */ \"./js/SRW Core/Map.js\");\n/* harmony import */ var _Scenes_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Scenes.js */ \"./js/SRW Core/Scenes.js\");\n/* harmony import */ var _Entities_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Entities.js */ \"./js/SRW Core/Entities.js\");\n/* harmony import */ var _Audio_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Audio.js */ \"./js/SRW Core/Audio.js\");\nfunction importGlobal(exports){\r\n\tObject.keys(exports).forEach(function(className){\r\n\t\twindow[className] = exports[className];\r\n\t});\r\n}\r\n\r\n\r\n\r\nimportGlobal(_Windows_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\r\n_Windows_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].patches.apply();\r\n\r\n\r\n_PluginCommands_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].patches.apply();\r\n\r\n\r\n_GameTemp_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].patches.apply();\r\n\r\n\r\n_GameSystem_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].patches.apply();\r\n\r\n\r\n_GameMessage_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].patches.apply();\r\n\r\n\r\n_DataManagement_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].patches.apply();\r\nimportGlobal(_DataManagement_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]);\r\n\r\n\r\n_GameInterpreter_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"].patches.apply();\r\n\r\n\r\nimportGlobal(_Sprites_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"]);\r\n_Sprites_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"].patches.apply();\r\n\r\n\r\n_Map_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"].patches.apply();\r\n\r\n\r\n_Scenes_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"].patches.apply();\r\n\r\n\r\n_Entities_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].patches.apply();\r\n\r\n\r\n_Audio_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"].patches.apply();\n\n//# sourceURL=webpack://src/./js/SRW_Core/main.js?");

/***/ }),

/***/ "./node_modules/acorn/dist/acorn.js":
/*!******************************************!*\
  !*** ./node_modules/acorn/dist/acorn.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("(function (global, factory) {\n   true ? factory(exports) :\n  0;\n})(this, (function (exports) { 'use strict';\n\n  // This file was generated. Do not modify manually!\n  var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 81, 2, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 9, 5351, 0, 7, 14, 13835, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 983, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\n\n  // This file was generated. Do not modify manually!\n  var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 4026, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 757, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191];\n\n  // This file was generated. Do not modify manually!\n  var nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\u30fb\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\\uff65\";\n\n  // This file was generated. Do not modify manually!\n  var nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n\n  // These are a run-length and offset encoded representation of the\n  // >0xffff code points that are a valid part of identifiers. The\n  // offset starts at 0x10000, and each pair of numbers represents an\n  // offset to the next range, and then a size of the range.\n\n  // Reserved word lists for various dialects of the language\n\n  var reservedWords = {\n    3: \"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",\n    5: \"class enum extends super const export import\",\n    6: \"enum\",\n    strict: \"implements interface let package private protected public static yield\",\n    strictBind: \"eval arguments\"\n  };\n\n  // And the keywords\n\n  var ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\";\n\n  var keywords$1 = {\n    5: ecma5AndLessKeywords,\n    \"5module\": ecma5AndLessKeywords + \" export import\",\n    6: ecma5AndLessKeywords + \" const class extends export import super\"\n  };\n\n  var keywordRelationalOperator = /^in(stanceof)?$/;\n\n  // ## Character categories\n\n  var nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\n  var nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\n  // This has a complexity linear to the value of the code. The\n  // assumption is that looking up astral identifier characters is\n  // rare.\n  function isInAstralSet(code, set) {\n    var pos = 0x10000;\n    for (var i = 0; i < set.length; i += 2) {\n      pos += set[i];\n      if (pos > code) { return false }\n      pos += set[i + 1];\n      if (pos >= code) { return true }\n    }\n    return false\n  }\n\n  // Test whether a given character code starts an identifier.\n\n  function isIdentifierStart(code, astral) {\n    if (code < 65) { return code === 36 }\n    if (code < 91) { return true }\n    if (code < 97) { return code === 95 }\n    if (code < 123) { return true }\n    if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code)) }\n    if (astral === false) { return false }\n    return isInAstralSet(code, astralIdentifierStartCodes)\n  }\n\n  // Test whether a given character is part of an identifier.\n\n  function isIdentifierChar(code, astral) {\n    if (code < 48) { return code === 36 }\n    if (code < 58) { return true }\n    if (code < 65) { return false }\n    if (code < 91) { return true }\n    if (code < 97) { return code === 95 }\n    if (code < 123) { return true }\n    if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code)) }\n    if (astral === false) { return false }\n    return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)\n  }\n\n  // ## Token types\n\n  // The assignment of fine-grained, information-carrying type objects\n  // allows the tokenizer to store the information it has about a\n  // token in a way that is very cheap for the parser to look up.\n\n  // All token type variables start with an underscore, to make them\n  // easy to recognize.\n\n  // The `beforeExpr` property is used to disambiguate between regular\n  // expressions and divisions. It is set on all token types that can\n  // be followed by an expression (thus, a slash after them would be a\n  // regular expression).\n  //\n  // The `startsExpr` property is used to check if the token ends a\n  // `yield` expression. It is set on all token types that either can\n  // directly start an expression (like a quotation mark) or can\n  // continue an expression (like the body of a string).\n  //\n  // `isLoop` marks a keyword as starting a loop, which is important\n  // to know when parsing a label, in order to allow or disallow\n  // continue jumps to that label.\n\n  var TokenType = function TokenType(label, conf) {\n    if ( conf === void 0 ) conf = {};\n\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop || null;\n    this.updateContext = null;\n  };\n\n  function binop(name, prec) {\n    return new TokenType(name, {beforeExpr: true, binop: prec})\n  }\n  var beforeExpr = {beforeExpr: true}, startsExpr = {startsExpr: true};\n\n  // Map keyword names to token types.\n\n  var keywords = {};\n\n  // Succinct definitions of keyword token types\n  function kw(name, options) {\n    if ( options === void 0 ) options = {};\n\n    options.keyword = name;\n    return keywords[name] = new TokenType(name, options)\n  }\n\n  var types$1 = {\n    num: new TokenType(\"num\", startsExpr),\n    regexp: new TokenType(\"regexp\", startsExpr),\n    string: new TokenType(\"string\", startsExpr),\n    name: new TokenType(\"name\", startsExpr),\n    privateId: new TokenType(\"privateId\", startsExpr),\n    eof: new TokenType(\"eof\"),\n\n    // Punctuation token types.\n    bracketL: new TokenType(\"[\", {beforeExpr: true, startsExpr: true}),\n    bracketR: new TokenType(\"]\"),\n    braceL: new TokenType(\"{\", {beforeExpr: true, startsExpr: true}),\n    braceR: new TokenType(\"}\"),\n    parenL: new TokenType(\"(\", {beforeExpr: true, startsExpr: true}),\n    parenR: new TokenType(\")\"),\n    comma: new TokenType(\",\", beforeExpr),\n    semi: new TokenType(\";\", beforeExpr),\n    colon: new TokenType(\":\", beforeExpr),\n    dot: new TokenType(\".\"),\n    question: new TokenType(\"?\", beforeExpr),\n    questionDot: new TokenType(\"?.\"),\n    arrow: new TokenType(\"=>\", beforeExpr),\n    template: new TokenType(\"template\"),\n    invalidTemplate: new TokenType(\"invalidTemplate\"),\n    ellipsis: new TokenType(\"...\", beforeExpr),\n    backQuote: new TokenType(\"`\", startsExpr),\n    dollarBraceL: new TokenType(\"${\", {beforeExpr: true, startsExpr: true}),\n\n    // Operators. These carry several kinds of properties to help the\n    // parser use them properly (the presence of these properties is\n    // what categorizes them as operators).\n    //\n    // `binop`, when present, specifies that this operator is a binary\n    // operator, and will refer to its precedence.\n    //\n    // `prefix` and `postfix` mark the operator as a prefix or postfix\n    // unary operator.\n    //\n    // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n    // binary operators with a very low precedence, that should result\n    // in AssignmentExpression nodes.\n\n    eq: new TokenType(\"=\", {beforeExpr: true, isAssign: true}),\n    assign: new TokenType(\"_=\", {beforeExpr: true, isAssign: true}),\n    incDec: new TokenType(\"++/--\", {prefix: true, postfix: true, startsExpr: true}),\n    prefix: new TokenType(\"!/~\", {beforeExpr: true, prefix: true, startsExpr: true}),\n    logicalOR: binop(\"||\", 1),\n    logicalAND: binop(\"&&\", 2),\n    bitwiseOR: binop(\"|\", 3),\n    bitwiseXOR: binop(\"^\", 4),\n    bitwiseAND: binop(\"&\", 5),\n    equality: binop(\"==/!=/===/!==\", 6),\n    relational: binop(\"</>/<=/>=\", 7),\n    bitShift: binop(\"<</>>/>>>\", 8),\n    plusMin: new TokenType(\"+/-\", {beforeExpr: true, binop: 9, prefix: true, startsExpr: true}),\n    modulo: binop(\"%\", 10),\n    star: binop(\"*\", 10),\n    slash: binop(\"/\", 10),\n    starstar: new TokenType(\"**\", {beforeExpr: true}),\n    coalesce: binop(\"??\", 1),\n\n    // Keyword token types.\n    _break: kw(\"break\"),\n    _case: kw(\"case\", beforeExpr),\n    _catch: kw(\"catch\"),\n    _continue: kw(\"continue\"),\n    _debugger: kw(\"debugger\"),\n    _default: kw(\"default\", beforeExpr),\n    _do: kw(\"do\", {isLoop: true, beforeExpr: true}),\n    _else: kw(\"else\", beforeExpr),\n    _finally: kw(\"finally\"),\n    _for: kw(\"for\", {isLoop: true}),\n    _function: kw(\"function\", startsExpr),\n    _if: kw(\"if\"),\n    _return: kw(\"return\", beforeExpr),\n    _switch: kw(\"switch\"),\n    _throw: kw(\"throw\", beforeExpr),\n    _try: kw(\"try\"),\n    _var: kw(\"var\"),\n    _const: kw(\"const\"),\n    _while: kw(\"while\", {isLoop: true}),\n    _with: kw(\"with\"),\n    _new: kw(\"new\", {beforeExpr: true, startsExpr: true}),\n    _this: kw(\"this\", startsExpr),\n    _super: kw(\"super\", startsExpr),\n    _class: kw(\"class\", startsExpr),\n    _extends: kw(\"extends\", beforeExpr),\n    _export: kw(\"export\"),\n    _import: kw(\"import\", startsExpr),\n    _null: kw(\"null\", startsExpr),\n    _true: kw(\"true\", startsExpr),\n    _false: kw(\"false\", startsExpr),\n    _in: kw(\"in\", {beforeExpr: true, binop: 7}),\n    _instanceof: kw(\"instanceof\", {beforeExpr: true, binop: 7}),\n    _typeof: kw(\"typeof\", {beforeExpr: true, prefix: true, startsExpr: true}),\n    _void: kw(\"void\", {beforeExpr: true, prefix: true, startsExpr: true}),\n    _delete: kw(\"delete\", {beforeExpr: true, prefix: true, startsExpr: true})\n  };\n\n  // Matches a whole line break (where CRLF is considered a single\n  // line break). Used to count lines.\n\n  var lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/;\n  var lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n  function isNewLine(code) {\n    return code === 10 || code === 13 || code === 0x2028 || code === 0x2029\n  }\n\n  function nextLineBreak(code, from, end) {\n    if ( end === void 0 ) end = code.length;\n\n    for (var i = from; i < end; i++) {\n      var next = code.charCodeAt(i);\n      if (isNewLine(next))\n        { return i < end - 1 && next === 13 && code.charCodeAt(i + 1) === 10 ? i + 2 : i + 1 }\n    }\n    return -1\n  }\n\n  var nonASCIIwhitespace = /[\\u1680\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\n\n  var skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\n  var ref = Object.prototype;\n  var hasOwnProperty = ref.hasOwnProperty;\n  var toString = ref.toString;\n\n  var hasOwn = Object.hasOwn || (function (obj, propName) { return (\n    hasOwnProperty.call(obj, propName)\n  ); });\n\n  var isArray = Array.isArray || (function (obj) { return (\n    toString.call(obj) === \"[object Array]\"\n  ); });\n\n  var regexpCache = Object.create(null);\n\n  function wordsRegexp(words) {\n    return regexpCache[words] || (regexpCache[words] = new RegExp(\"^(?:\" + words.replace(/ /g, \"|\") + \")$\"))\n  }\n\n  function codePointToString(code) {\n    // UTF-16 Decoding\n    if (code <= 0xFFFF) { return String.fromCharCode(code) }\n    code -= 0x10000;\n    return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)\n  }\n\n  var loneSurrogate = /(?:[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])/;\n\n  // These are used when `options.locations` is on, for the\n  // `startLoc` and `endLoc` properties.\n\n  var Position = function Position(line, col) {\n    this.line = line;\n    this.column = col;\n  };\n\n  Position.prototype.offset = function offset (n) {\n    return new Position(this.line, this.column + n)\n  };\n\n  var SourceLocation = function SourceLocation(p, start, end) {\n    this.start = start;\n    this.end = end;\n    if (p.sourceFile !== null) { this.source = p.sourceFile; }\n  };\n\n  // The `getLineInfo` function is mostly useful when the\n  // `locations` option is off (for performance reasons) and you\n  // want to find the line/column position for a given character\n  // offset. `input` should be the code string that the offset refers\n  // into.\n\n  function getLineInfo(input, offset) {\n    for (var line = 1, cur = 0;;) {\n      var nextBreak = nextLineBreak(input, cur, offset);\n      if (nextBreak < 0) { return new Position(line, offset - cur) }\n      ++line;\n      cur = nextBreak;\n    }\n  }\n\n  // A second argument must be given to configure the parser process.\n  // These options are recognized (only `ecmaVersion` is required):\n\n  var defaultOptions = {\n    // `ecmaVersion` indicates the ECMAScript version to parse. Must be\n    // either 3, 5, 6 (or 2015), 7 (2016), 8 (2017), 9 (2018), 10\n    // (2019), 11 (2020), 12 (2021), 13 (2022), 14 (2023), or `\"latest\"`\n    // (the latest version the library supports). This influences\n    // support for strict mode, the set of reserved words, and support\n    // for new syntax features.\n    ecmaVersion: null,\n    // `sourceType` indicates the mode the code should be parsed in.\n    // Can be either `\"script\"` or `\"module\"`. This influences global\n    // strict mode and parsing of `import` and `export` declarations.\n    sourceType: \"script\",\n    // `onInsertedSemicolon` can be a callback that will be called when\n    // a semicolon is automatically inserted. It will be passed the\n    // position of the inserted semicolon as an offset, and if\n    // `locations` is enabled, it is given the location as a `{line,\n    // column}` object as second argument.\n    onInsertedSemicolon: null,\n    // `onTrailingComma` is similar to `onInsertedSemicolon`, but for\n    // trailing commas.\n    onTrailingComma: null,\n    // By default, reserved words are only enforced if ecmaVersion >= 5.\n    // Set `allowReserved` to a boolean value to explicitly turn this on\n    // an off. When this option has the value \"never\", reserved words\n    // and keywords can also not be used as property names.\n    allowReserved: null,\n    // When enabled, a return at the top level is not considered an\n    // error.\n    allowReturnOutsideFunction: false,\n    // When enabled, import/export statements are not constrained to\n    // appearing at the top of the program, and an import.meta expression\n    // in a script isn't considered an error.\n    allowImportExportEverywhere: false,\n    // By default, await identifiers are allowed to appear at the top-level scope only if ecmaVersion >= 2022.\n    // When enabled, await identifiers are allowed to appear at the top-level scope,\n    // but they are still not allowed in non-async functions.\n    allowAwaitOutsideFunction: null,\n    // When enabled, super identifiers are not constrained to\n    // appearing in methods and do not raise an error when they appear elsewhere.\n    allowSuperOutsideMethod: null,\n    // When enabled, hashbang directive in the beginning of file is\n    // allowed and treated as a line comment. Enabled by default when\n    // `ecmaVersion` >= 2023.\n    allowHashBang: false,\n    // By default, the parser will verify that private properties are\n    // only used in places where they are valid and have been declared.\n    // Set this to false to turn such checks off.\n    checkPrivateFields: true,\n    // When `locations` is on, `loc` properties holding objects with\n    // `start` and `end` properties in `{line, column}` form (with\n    // line being 1-based and column 0-based) will be attached to the\n    // nodes.\n    locations: false,\n    // A function can be passed as `onToken` option, which will\n    // cause Acorn to call that function with object in the same\n    // format as tokens returned from `tokenizer().getToken()`. Note\n    // that you are not allowed to call the parser from the\n    // callback—that will corrupt its internal state.\n    onToken: null,\n    // A function can be passed as `onComment` option, which will\n    // cause Acorn to call that function with `(block, text, start,\n    // end)` parameters whenever a comment is skipped. `block` is a\n    // boolean indicating whether this is a block (`/* */`) comment,\n    // `text` is the content of the comment, and `start` and `end` are\n    // character offsets that denote the start and end of the comment.\n    // When the `locations` option is on, two more parameters are\n    // passed, the full `{line, column}` locations of the start and\n    // end of the comments. Note that you are not allowed to call the\n    // parser from the callback—that will corrupt its internal state.\n    // When this option has an array as value, objects representing the\n    // comments are pushed to it.\n    onComment: null,\n    // Nodes have their start and end characters offsets recorded in\n    // `start` and `end` properties (directly on the node, rather than\n    // the `loc` object, which holds line/column data. To also add a\n    // [semi-standardized][range] `range` property holding a `[start,\n    // end]` array with the same numbers, set the `ranges` option to\n    // `true`.\n    //\n    // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n    ranges: false,\n    // It is possible to parse multiple files into a single AST by\n    // passing the tree produced by parsing the first file as\n    // `program` option in subsequent parses. This will add the\n    // toplevel forms of the parsed file to the `Program` (top) node\n    // of an existing parse tree.\n    program: null,\n    // When `locations` is on, you can pass this to record the source\n    // file in every node's `loc` object.\n    sourceFile: null,\n    // This value, if given, is stored in every node, whether\n    // `locations` is on or off.\n    directSourceFile: null,\n    // When enabled, parenthesized expressions are represented by\n    // (non-standard) ParenthesizedExpression nodes\n    preserveParens: false\n  };\n\n  // Interpret and default an options object\n\n  var warnedAboutEcmaVersion = false;\n\n  function getOptions(opts) {\n    var options = {};\n\n    for (var opt in defaultOptions)\n      { options[opt] = opts && hasOwn(opts, opt) ? opts[opt] : defaultOptions[opt]; }\n\n    if (options.ecmaVersion === \"latest\") {\n      options.ecmaVersion = 1e8;\n    } else if (options.ecmaVersion == null) {\n      if (!warnedAboutEcmaVersion && typeof console === \"object\" && console.warn) {\n        warnedAboutEcmaVersion = true;\n        console.warn(\"Since Acorn 8.0.0, options.ecmaVersion is required.\\nDefaulting to 2020, but this will stop working in the future.\");\n      }\n      options.ecmaVersion = 11;\n    } else if (options.ecmaVersion >= 2015) {\n      options.ecmaVersion -= 2009;\n    }\n\n    if (options.allowReserved == null)\n      { options.allowReserved = options.ecmaVersion < 5; }\n\n    if (!opts || opts.allowHashBang == null)\n      { options.allowHashBang = options.ecmaVersion >= 14; }\n\n    if (isArray(options.onToken)) {\n      var tokens = options.onToken;\n      options.onToken = function (token) { return tokens.push(token); };\n    }\n    if (isArray(options.onComment))\n      { options.onComment = pushComment(options, options.onComment); }\n\n    return options\n  }\n\n  function pushComment(options, array) {\n    return function(block, text, start, end, startLoc, endLoc) {\n      var comment = {\n        type: block ? \"Block\" : \"Line\",\n        value: text,\n        start: start,\n        end: end\n      };\n      if (options.locations)\n        { comment.loc = new SourceLocation(this, startLoc, endLoc); }\n      if (options.ranges)\n        { comment.range = [start, end]; }\n      array.push(comment);\n    }\n  }\n\n  // Each scope gets a bitset that may contain these flags\n  var\n      SCOPE_TOP = 1,\n      SCOPE_FUNCTION = 2,\n      SCOPE_ASYNC = 4,\n      SCOPE_GENERATOR = 8,\n      SCOPE_ARROW = 16,\n      SCOPE_SIMPLE_CATCH = 32,\n      SCOPE_SUPER = 64,\n      SCOPE_DIRECT_SUPER = 128,\n      SCOPE_CLASS_STATIC_BLOCK = 256,\n      SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION | SCOPE_CLASS_STATIC_BLOCK;\n\n  function functionFlags(async, generator) {\n    return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0)\n  }\n\n  // Used in checkLVal* and declareName to determine the type of a binding\n  var\n      BIND_NONE = 0, // Not a binding\n      BIND_VAR = 1, // Var-style binding\n      BIND_LEXICAL = 2, // Let- or const-style binding\n      BIND_FUNCTION = 3, // Function declaration\n      BIND_SIMPLE_CATCH = 4, // Simple (identifier pattern) catch binding\n      BIND_OUTSIDE = 5; // Special case for function names as bound inside the function\n\n  var Parser = function Parser(options, input, startPos) {\n    this.options = options = getOptions(options);\n    this.sourceFile = options.sourceFile;\n    this.keywords = wordsRegexp(keywords$1[options.ecmaVersion >= 6 ? 6 : options.sourceType === \"module\" ? \"5module\" : 5]);\n    var reserved = \"\";\n    if (options.allowReserved !== true) {\n      reserved = reservedWords[options.ecmaVersion >= 6 ? 6 : options.ecmaVersion === 5 ? 5 : 3];\n      if (options.sourceType === \"module\") { reserved += \" await\"; }\n    }\n    this.reservedWords = wordsRegexp(reserved);\n    var reservedStrict = (reserved ? reserved + \" \" : \"\") + reservedWords.strict;\n    this.reservedWordsStrict = wordsRegexp(reservedStrict);\n    this.reservedWordsStrictBind = wordsRegexp(reservedStrict + \" \" + reservedWords.strictBind);\n    this.input = String(input);\n\n    // Used to signal to callers of `readWord1` whether the word\n    // contained any escape sequences. This is needed because words with\n    // escape sequences must not be interpreted as keywords.\n    this.containsEsc = false;\n\n    // Set up token state\n\n    // The current position of the tokenizer in the input.\n    if (startPos) {\n      this.pos = startPos;\n      this.lineStart = this.input.lastIndexOf(\"\\n\", startPos - 1) + 1;\n      this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;\n    } else {\n      this.pos = this.lineStart = 0;\n      this.curLine = 1;\n    }\n\n    // Properties of the current token:\n    // Its type\n    this.type = types$1.eof;\n    // For tokens that include more information than their type, the value\n    this.value = null;\n    // Its start and end offset\n    this.start = this.end = this.pos;\n    // And, if locations are used, the {line, column} object\n    // corresponding to those offsets\n    this.startLoc = this.endLoc = this.curPosition();\n\n    // Position information for the previous token\n    this.lastTokEndLoc = this.lastTokStartLoc = null;\n    this.lastTokStart = this.lastTokEnd = this.pos;\n\n    // The context stack is used to superficially track syntactic\n    // context to predict whether a regular expression is allowed in a\n    // given position.\n    this.context = this.initialContext();\n    this.exprAllowed = true;\n\n    // Figure out if it's a module code.\n    this.inModule = options.sourceType === \"module\";\n    this.strict = this.inModule || this.strictDirective(this.pos);\n\n    // Used to signify the start of a potential arrow function\n    this.potentialArrowAt = -1;\n    this.potentialArrowInForAwait = false;\n\n    // Positions to delayed-check that yield/await does not exist in default parameters.\n    this.yieldPos = this.awaitPos = this.awaitIdentPos = 0;\n    // Labels in scope.\n    this.labels = [];\n    // Thus-far undefined exports.\n    this.undefinedExports = Object.create(null);\n\n    // If enabled, skip leading hashbang line.\n    if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === \"#!\")\n      { this.skipLineComment(2); }\n\n    // Scope tracking for duplicate variable names (see scope.js)\n    this.scopeStack = [];\n    this.enterScope(SCOPE_TOP);\n\n    // For RegExp validation\n    this.regexpState = null;\n\n    // The stack of private names.\n    // Each element has two properties: 'declared' and 'used'.\n    // When it exited from the outermost class definition, all used private names must be declared.\n    this.privateNameStack = [];\n  };\n\n  var prototypeAccessors = { inFunction: { configurable: true },inGenerator: { configurable: true },inAsync: { configurable: true },canAwait: { configurable: true },allowSuper: { configurable: true },allowDirectSuper: { configurable: true },treatFunctionsAsVar: { configurable: true },allowNewDotTarget: { configurable: true },inClassStaticBlock: { configurable: true } };\n\n  Parser.prototype.parse = function parse () {\n    var node = this.options.program || this.startNode();\n    this.nextToken();\n    return this.parseTopLevel(node)\n  };\n\n  prototypeAccessors.inFunction.get = function () { return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0 };\n\n  prototypeAccessors.inGenerator.get = function () { return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0 && !this.currentVarScope().inClassFieldInit };\n\n  prototypeAccessors.inAsync.get = function () { return (this.currentVarScope().flags & SCOPE_ASYNC) > 0 && !this.currentVarScope().inClassFieldInit };\n\n  prototypeAccessors.canAwait.get = function () {\n    for (var i = this.scopeStack.length - 1; i >= 0; i--) {\n      var scope = this.scopeStack[i];\n      if (scope.inClassFieldInit || scope.flags & SCOPE_CLASS_STATIC_BLOCK) { return false }\n      if (scope.flags & SCOPE_FUNCTION) { return (scope.flags & SCOPE_ASYNC) > 0 }\n    }\n    return (this.inModule && this.options.ecmaVersion >= 13) || this.options.allowAwaitOutsideFunction\n  };\n\n  prototypeAccessors.allowSuper.get = function () {\n    var ref = this.currentThisScope();\n      var flags = ref.flags;\n      var inClassFieldInit = ref.inClassFieldInit;\n    return (flags & SCOPE_SUPER) > 0 || inClassFieldInit || this.options.allowSuperOutsideMethod\n  };\n\n  prototypeAccessors.allowDirectSuper.get = function () { return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0 };\n\n  prototypeAccessors.treatFunctionsAsVar.get = function () { return this.treatFunctionsAsVarInScope(this.currentScope()) };\n\n  prototypeAccessors.allowNewDotTarget.get = function () {\n    var ref = this.currentThisScope();\n      var flags = ref.flags;\n      var inClassFieldInit = ref.inClassFieldInit;\n    return (flags & (SCOPE_FUNCTION | SCOPE_CLASS_STATIC_BLOCK)) > 0 || inClassFieldInit\n  };\n\n  prototypeAccessors.inClassStaticBlock.get = function () {\n    return (this.currentVarScope().flags & SCOPE_CLASS_STATIC_BLOCK) > 0\n  };\n\n  Parser.extend = function extend () {\n      var plugins = [], len = arguments.length;\n      while ( len-- ) plugins[ len ] = arguments[ len ];\n\n    var cls = this;\n    for (var i = 0; i < plugins.length; i++) { cls = plugins[i](cls); }\n    return cls\n  };\n\n  Parser.parse = function parse (input, options) {\n    return new this(options, input).parse()\n  };\n\n  Parser.parseExpressionAt = function parseExpressionAt (input, pos, options) {\n    var parser = new this(options, input, pos);\n    parser.nextToken();\n    return parser.parseExpression()\n  };\n\n  Parser.tokenizer = function tokenizer (input, options) {\n    return new this(options, input)\n  };\n\n  Object.defineProperties( Parser.prototype, prototypeAccessors );\n\n  var pp$9 = Parser.prototype;\n\n  // ## Parser utilities\n\n  var literal = /^(?:'((?:\\\\.|[^'\\\\])*?)'|\"((?:\\\\.|[^\"\\\\])*?)\")/;\n  pp$9.strictDirective = function(start) {\n    if (this.options.ecmaVersion < 5) { return false }\n    for (;;) {\n      // Try to find string literal.\n      skipWhiteSpace.lastIndex = start;\n      start += skipWhiteSpace.exec(this.input)[0].length;\n      var match = literal.exec(this.input.slice(start));\n      if (!match) { return false }\n      if ((match[1] || match[2]) === \"use strict\") {\n        skipWhiteSpace.lastIndex = start + match[0].length;\n        var spaceAfter = skipWhiteSpace.exec(this.input), end = spaceAfter.index + spaceAfter[0].length;\n        var next = this.input.charAt(end);\n        return next === \";\" || next === \"}\" ||\n          (lineBreak.test(spaceAfter[0]) &&\n           !(/[(`.[+\\-/*%<>=,?^&]/.test(next) || next === \"!\" && this.input.charAt(end + 1) === \"=\"))\n      }\n      start += match[0].length;\n\n      // Skip semicolon, if any.\n      skipWhiteSpace.lastIndex = start;\n      start += skipWhiteSpace.exec(this.input)[0].length;\n      if (this.input[start] === \";\")\n        { start++; }\n    }\n  };\n\n  // Predicate that tests whether the next token is of the given\n  // type, and if yes, consumes it as a side effect.\n\n  pp$9.eat = function(type) {\n    if (this.type === type) {\n      this.next();\n      return true\n    } else {\n      return false\n    }\n  };\n\n  // Tests whether parsed token is a contextual keyword.\n\n  pp$9.isContextual = function(name) {\n    return this.type === types$1.name && this.value === name && !this.containsEsc\n  };\n\n  // Consumes contextual keyword if possible.\n\n  pp$9.eatContextual = function(name) {\n    if (!this.isContextual(name)) { return false }\n    this.next();\n    return true\n  };\n\n  // Asserts that following token is given contextual keyword.\n\n  pp$9.expectContextual = function(name) {\n    if (!this.eatContextual(name)) { this.unexpected(); }\n  };\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  pp$9.canInsertSemicolon = function() {\n    return this.type === types$1.eof ||\n      this.type === types$1.braceR ||\n      lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n  };\n\n  pp$9.insertSemicolon = function() {\n    if (this.canInsertSemicolon()) {\n      if (this.options.onInsertedSemicolon)\n        { this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc); }\n      return true\n    }\n  };\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  pp$9.semicolon = function() {\n    if (!this.eat(types$1.semi) && !this.insertSemicolon()) { this.unexpected(); }\n  };\n\n  pp$9.afterTrailingComma = function(tokType, notNext) {\n    if (this.type === tokType) {\n      if (this.options.onTrailingComma)\n        { this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc); }\n      if (!notNext)\n        { this.next(); }\n      return true\n    }\n  };\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error.\n\n  pp$9.expect = function(type) {\n    this.eat(type) || this.unexpected();\n  };\n\n  // Raise an unexpected token error.\n\n  pp$9.unexpected = function(pos) {\n    this.raise(pos != null ? pos : this.start, \"Unexpected token\");\n  };\n\n  var DestructuringErrors = function DestructuringErrors() {\n    this.shorthandAssign =\n    this.trailingComma =\n    this.parenthesizedAssign =\n    this.parenthesizedBind =\n    this.doubleProto =\n      -1;\n  };\n\n  pp$9.checkPatternErrors = function(refDestructuringErrors, isAssign) {\n    if (!refDestructuringErrors) { return }\n    if (refDestructuringErrors.trailingComma > -1)\n      { this.raiseRecoverable(refDestructuringErrors.trailingComma, \"Comma is not permitted after the rest element\"); }\n    var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;\n    if (parens > -1) { this.raiseRecoverable(parens, isAssign ? \"Assigning to rvalue\" : \"Parenthesized pattern\"); }\n  };\n\n  pp$9.checkExpressionErrors = function(refDestructuringErrors, andThrow) {\n    if (!refDestructuringErrors) { return false }\n    var shorthandAssign = refDestructuringErrors.shorthandAssign;\n    var doubleProto = refDestructuringErrors.doubleProto;\n    if (!andThrow) { return shorthandAssign >= 0 || doubleProto >= 0 }\n    if (shorthandAssign >= 0)\n      { this.raise(shorthandAssign, \"Shorthand property assignments are valid only in destructuring patterns\"); }\n    if (doubleProto >= 0)\n      { this.raiseRecoverable(doubleProto, \"Redefinition of __proto__ property\"); }\n  };\n\n  pp$9.checkYieldAwaitInDefaultParams = function() {\n    if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos))\n      { this.raise(this.yieldPos, \"Yield expression cannot be a default value\"); }\n    if (this.awaitPos)\n      { this.raise(this.awaitPos, \"Await expression cannot be a default value\"); }\n  };\n\n  pp$9.isSimpleAssignTarget = function(expr) {\n    if (expr.type === \"ParenthesizedExpression\")\n      { return this.isSimpleAssignTarget(expr.expression) }\n    return expr.type === \"Identifier\" || expr.type === \"MemberExpression\"\n  };\n\n  var pp$8 = Parser.prototype;\n\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  pp$8.parseTopLevel = function(node) {\n    var exports = Object.create(null);\n    if (!node.body) { node.body = []; }\n    while (this.type !== types$1.eof) {\n      var stmt = this.parseStatement(null, true, exports);\n      node.body.push(stmt);\n    }\n    if (this.inModule)\n      { for (var i = 0, list = Object.keys(this.undefinedExports); i < list.length; i += 1)\n        {\n          var name = list[i];\n\n          this.raiseRecoverable(this.undefinedExports[name].start, (\"Export '\" + name + \"' is not defined\"));\n        } }\n    this.adaptDirectivePrologue(node.body);\n    this.next();\n    node.sourceType = this.options.sourceType;\n    return this.finishNode(node, \"Program\")\n  };\n\n  var loopLabel = {kind: \"loop\"}, switchLabel = {kind: \"switch\"};\n\n  pp$8.isLet = function(context) {\n    if (this.options.ecmaVersion < 6 || !this.isContextual(\"let\")) { return false }\n    skipWhiteSpace.lastIndex = this.pos;\n    var skip = skipWhiteSpace.exec(this.input);\n    var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\n    // For ambiguous cases, determine if a LexicalDeclaration (or only a\n    // Statement) is allowed here. If context is not empty then only a Statement\n    // is allowed. However, `let [` is an explicit negative lookahead for\n    // ExpressionStatement, so special-case it first.\n    if (nextCh === 91 || nextCh === 92) { return true } // '[', '/'\n    if (context) { return false }\n\n    if (nextCh === 123 || nextCh > 0xd7ff && nextCh < 0xdc00) { return true } // '{', astral\n    if (isIdentifierStart(nextCh, true)) {\n      var pos = next + 1;\n      while (isIdentifierChar(nextCh = this.input.charCodeAt(pos), true)) { ++pos; }\n      if (nextCh === 92 || nextCh > 0xd7ff && nextCh < 0xdc00) { return true }\n      var ident = this.input.slice(next, pos);\n      if (!keywordRelationalOperator.test(ident)) { return true }\n    }\n    return false\n  };\n\n  // check 'async [no LineTerminator here] function'\n  // - 'async /*foo*/ function' is OK.\n  // - 'async /*\\n*/ function' is invalid.\n  pp$8.isAsyncFunction = function() {\n    if (this.options.ecmaVersion < 8 || !this.isContextual(\"async\"))\n      { return false }\n\n    skipWhiteSpace.lastIndex = this.pos;\n    var skip = skipWhiteSpace.exec(this.input);\n    var next = this.pos + skip[0].length, after;\n    return !lineBreak.test(this.input.slice(this.pos, next)) &&\n      this.input.slice(next, next + 8) === \"function\" &&\n      (next + 8 === this.input.length ||\n       !(isIdentifierChar(after = this.input.charCodeAt(next + 8)) || after > 0xd7ff && after < 0xdc00))\n  };\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n\n  pp$8.parseStatement = function(context, topLevel, exports) {\n    var starttype = this.type, node = this.startNode(), kind;\n\n    if (this.isLet(context)) {\n      starttype = types$1._var;\n      kind = \"let\";\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n    case types$1._break: case types$1._continue: return this.parseBreakContinueStatement(node, starttype.keyword)\n    case types$1._debugger: return this.parseDebuggerStatement(node)\n    case types$1._do: return this.parseDoStatement(node)\n    case types$1._for: return this.parseForStatement(node)\n    case types$1._function:\n      // Function as sole body of either an if statement or a labeled statement\n      // works, but not when it is part of a labeled statement that is the sole\n      // body of an if statement.\n      if ((context && (this.strict || context !== \"if\" && context !== \"label\")) && this.options.ecmaVersion >= 6) { this.unexpected(); }\n      return this.parseFunctionStatement(node, false, !context)\n    case types$1._class:\n      if (context) { this.unexpected(); }\n      return this.parseClass(node, true)\n    case types$1._if: return this.parseIfStatement(node)\n    case types$1._return: return this.parseReturnStatement(node)\n    case types$1._switch: return this.parseSwitchStatement(node)\n    case types$1._throw: return this.parseThrowStatement(node)\n    case types$1._try: return this.parseTryStatement(node)\n    case types$1._const: case types$1._var:\n      kind = kind || this.value;\n      if (context && kind !== \"var\") { this.unexpected(); }\n      return this.parseVarStatement(node, kind)\n    case types$1._while: return this.parseWhileStatement(node)\n    case types$1._with: return this.parseWithStatement(node)\n    case types$1.braceL: return this.parseBlock(true, node)\n    case types$1.semi: return this.parseEmptyStatement(node)\n    case types$1._export:\n    case types$1._import:\n      if (this.options.ecmaVersion > 10 && starttype === types$1._import) {\n        skipWhiteSpace.lastIndex = this.pos;\n        var skip = skipWhiteSpace.exec(this.input);\n        var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\n        if (nextCh === 40 || nextCh === 46) // '(' or '.'\n          { return this.parseExpressionStatement(node, this.parseExpression()) }\n      }\n\n      if (!this.options.allowImportExportEverywhere) {\n        if (!topLevel)\n          { this.raise(this.start, \"'import' and 'export' may only appear at the top level\"); }\n        if (!this.inModule)\n          { this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\"); }\n      }\n      return starttype === types$1._import ? this.parseImport(node) : this.parseExport(node, exports)\n\n      // If the statement does not start with a statement keyword or a\n      // brace, it's an ExpressionStatement or LabeledStatement. We\n      // simply start parsing an expression, and afterwards, if the\n      // next token is a colon and the expression was a simple\n      // Identifier node, we switch to interpreting it as a label.\n    default:\n      if (this.isAsyncFunction()) {\n        if (context) { this.unexpected(); }\n        this.next();\n        return this.parseFunctionStatement(node, true, !context)\n      }\n\n      var maybeName = this.value, expr = this.parseExpression();\n      if (starttype === types$1.name && expr.type === \"Identifier\" && this.eat(types$1.colon))\n        { return this.parseLabeledStatement(node, maybeName, expr, context) }\n      else { return this.parseExpressionStatement(node, expr) }\n    }\n  };\n\n  pp$8.parseBreakContinueStatement = function(node, keyword) {\n    var isBreak = keyword === \"break\";\n    this.next();\n    if (this.eat(types$1.semi) || this.insertSemicolon()) { node.label = null; }\n    else if (this.type !== types$1.name) { this.unexpected(); }\n    else {\n      node.label = this.parseIdent();\n      this.semicolon();\n    }\n\n    // Verify that there is an actual destination to break or\n    // continue to.\n    var i = 0;\n    for (; i < this.labels.length; ++i) {\n      var lab = this.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) { break }\n        if (node.label && isBreak) { break }\n      }\n    }\n    if (i === this.labels.length) { this.raise(node.start, \"Unsyntactic \" + keyword); }\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")\n  };\n\n  pp$8.parseDebuggerStatement = function(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\")\n  };\n\n  pp$8.parseDoStatement = function(node) {\n    this.next();\n    this.labels.push(loopLabel);\n    node.body = this.parseStatement(\"do\");\n    this.labels.pop();\n    this.expect(types$1._while);\n    node.test = this.parseParenExpression();\n    if (this.options.ecmaVersion >= 6)\n      { this.eat(types$1.semi); }\n    else\n      { this.semicolon(); }\n    return this.finishNode(node, \"DoWhileStatement\")\n  };\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  pp$8.parseForStatement = function(node) {\n    this.next();\n    var awaitAt = (this.options.ecmaVersion >= 9 && this.canAwait && this.eatContextual(\"await\")) ? this.lastTokStart : -1;\n    this.labels.push(loopLabel);\n    this.enterScope(0);\n    this.expect(types$1.parenL);\n    if (this.type === types$1.semi) {\n      if (awaitAt > -1) { this.unexpected(awaitAt); }\n      return this.parseFor(node, null)\n    }\n    var isLet = this.isLet();\n    if (this.type === types$1._var || this.type === types$1._const || isLet) {\n      var init$1 = this.startNode(), kind = isLet ? \"let\" : this.value;\n      this.next();\n      this.parseVar(init$1, true, kind);\n      this.finishNode(init$1, \"VariableDeclaration\");\n      if ((this.type === types$1._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) && init$1.declarations.length === 1) {\n        if (this.options.ecmaVersion >= 9) {\n          if (this.type === types$1._in) {\n            if (awaitAt > -1) { this.unexpected(awaitAt); }\n          } else { node.await = awaitAt > -1; }\n        }\n        return this.parseForIn(node, init$1)\n      }\n      if (awaitAt > -1) { this.unexpected(awaitAt); }\n      return this.parseFor(node, init$1)\n    }\n    var startsWithLet = this.isContextual(\"let\"), isForOf = false;\n    var refDestructuringErrors = new DestructuringErrors;\n    var init = this.parseExpression(awaitAt > -1 ? \"await\" : true, refDestructuringErrors);\n    if (this.type === types$1._in || (isForOf = this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\n      if (this.options.ecmaVersion >= 9) {\n        if (this.type === types$1._in) {\n          if (awaitAt > -1) { this.unexpected(awaitAt); }\n        } else { node.await = awaitAt > -1; }\n      }\n      if (startsWithLet && isForOf) { this.raise(init.start, \"The left-hand side of a for-of loop may not start with 'let'.\"); }\n      this.toAssignable(init, false, refDestructuringErrors);\n      this.checkLValPattern(init);\n      return this.parseForIn(node, init)\n    } else {\n      this.checkExpressionErrors(refDestructuringErrors, true);\n    }\n    if (awaitAt > -1) { this.unexpected(awaitAt); }\n    return this.parseFor(node, init)\n  };\n\n  pp$8.parseFunctionStatement = function(node, isAsync, declarationPosition) {\n    this.next();\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync)\n  };\n\n  pp$8.parseIfStatement = function(node) {\n    this.next();\n    node.test = this.parseParenExpression();\n    // allow function declarations in branches, but only in non-strict mode\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(types$1._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\")\n  };\n\n  pp$8.parseReturnStatement = function(node) {\n    if (!this.inFunction && !this.options.allowReturnOutsideFunction)\n      { this.raise(this.start, \"'return' outside of function\"); }\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.eat(types$1.semi) || this.insertSemicolon()) { node.argument = null; }\n    else { node.argument = this.parseExpression(); this.semicolon(); }\n    return this.finishNode(node, \"ReturnStatement\")\n  };\n\n  pp$8.parseSwitchStatement = function(node) {\n    this.next();\n    node.discriminant = this.parseParenExpression();\n    node.cases = [];\n    this.expect(types$1.braceL);\n    this.labels.push(switchLabel);\n    this.enterScope(0);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    var cur;\n    for (var sawDefault = false; this.type !== types$1.braceR;) {\n      if (this.type === types$1._case || this.type === types$1._default) {\n        var isCase = this.type === types$1._case;\n        if (cur) { this.finishNode(cur, \"SwitchCase\"); }\n        node.cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) { this.raiseRecoverable(this.lastTokStart, \"Multiple default clauses\"); }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(types$1.colon);\n      } else {\n        if (!cur) { this.unexpected(); }\n        cur.consequent.push(this.parseStatement(null));\n      }\n    }\n    this.exitScope();\n    if (cur) { this.finishNode(cur, \"SwitchCase\"); }\n    this.next(); // Closing brace\n    this.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\")\n  };\n\n  pp$8.parseThrowStatement = function(node) {\n    this.next();\n    if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))\n      { this.raise(this.lastTokEnd, \"Illegal newline after throw\"); }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\")\n  };\n\n  // Reused empty array added for node fields that are always empty.\n\n  var empty$1 = [];\n\n  pp$8.parseCatchClauseParam = function() {\n    var param = this.parseBindingAtom();\n    var simple = param.type === \"Identifier\";\n    this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLValPattern(param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL);\n    this.expect(types$1.parenR);\n\n    return param\n  };\n\n  pp$8.parseTryStatement = function(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n    if (this.type === types$1._catch) {\n      var clause = this.startNode();\n      this.next();\n      if (this.eat(types$1.parenL)) {\n        clause.param = this.parseCatchClauseParam();\n      } else {\n        if (this.options.ecmaVersion < 10) { this.unexpected(); }\n        clause.param = null;\n        this.enterScope(0);\n      }\n      clause.body = this.parseBlock(false);\n      this.exitScope();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n    node.finalizer = this.eat(types$1._finally) ? this.parseBlock() : null;\n    if (!node.handler && !node.finalizer)\n      { this.raise(node.start, \"Missing catch or finally clause\"); }\n    return this.finishNode(node, \"TryStatement\")\n  };\n\n  pp$8.parseVarStatement = function(node, kind, allowMissingInitializer) {\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\")\n  };\n\n  pp$8.parseWhileStatement = function(node) {\n    this.next();\n    node.test = this.parseParenExpression();\n    this.labels.push(loopLabel);\n    node.body = this.parseStatement(\"while\");\n    this.labels.pop();\n    return this.finishNode(node, \"WhileStatement\")\n  };\n\n  pp$8.parseWithStatement = function(node) {\n    if (this.strict) { this.raise(this.start, \"'with' in strict mode\"); }\n    this.next();\n    node.object = this.parseParenExpression();\n    node.body = this.parseStatement(\"with\");\n    return this.finishNode(node, \"WithStatement\")\n  };\n\n  pp$8.parseEmptyStatement = function(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\")\n  };\n\n  pp$8.parseLabeledStatement = function(node, maybeName, expr, context) {\n    for (var i$1 = 0, list = this.labels; i$1 < list.length; i$1 += 1)\n      {\n      var label = list[i$1];\n\n      if (label.name === maybeName)\n        { this.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\n    } }\n    var kind = this.type.isLoop ? \"loop\" : this.type === types$1._switch ? \"switch\" : null;\n    for (var i = this.labels.length - 1; i >= 0; i--) {\n      var label$1 = this.labels[i];\n      if (label$1.statementStart === node.start) {\n        // Update information about previous labels on this node\n        label$1.statementStart = this.start;\n        label$1.kind = kind;\n      } else { break }\n    }\n    this.labels.push({name: maybeName, kind: kind, statementStart: this.start});\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\")\n  };\n\n  pp$8.parseExpressionStatement = function(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\")\n  };\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowStrict` is true (used for\n  // function bodies).\n\n  pp$8.parseBlock = function(createNewLexicalScope, node, exitStrict) {\n    if ( createNewLexicalScope === void 0 ) createNewLexicalScope = true;\n    if ( node === void 0 ) node = this.startNode();\n\n    node.body = [];\n    this.expect(types$1.braceL);\n    if (createNewLexicalScope) { this.enterScope(0); }\n    while (this.type !== types$1.braceR) {\n      var stmt = this.parseStatement(null);\n      node.body.push(stmt);\n    }\n    if (exitStrict) { this.strict = false; }\n    this.next();\n    if (createNewLexicalScope) { this.exitScope(); }\n    return this.finishNode(node, \"BlockStatement\")\n  };\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  pp$8.parseFor = function(node, init) {\n    node.init = init;\n    this.expect(types$1.semi);\n    node.test = this.type === types$1.semi ? null : this.parseExpression();\n    this.expect(types$1.semi);\n    node.update = this.type === types$1.parenR ? null : this.parseExpression();\n    this.expect(types$1.parenR);\n    node.body = this.parseStatement(\"for\");\n    this.exitScope();\n    this.labels.pop();\n    return this.finishNode(node, \"ForStatement\")\n  };\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  pp$8.parseForIn = function(node, init) {\n    var isForIn = this.type === types$1._in;\n    this.next();\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (\n        !isForIn ||\n        this.options.ecmaVersion < 8 ||\n        this.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\"\n      )\n    ) {\n      this.raise(\n        init.start,\n        ((isForIn ? \"for-in\" : \"for-of\") + \" loop variable declaration may not have an initializer\")\n      );\n    }\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();\n    this.expect(types$1.parenR);\n    node.body = this.parseStatement(\"for\");\n    this.exitScope();\n    this.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\")\n  };\n\n  // Parse a list of variable declarations.\n\n  pp$8.parseVar = function(node, isFor, kind, allowMissingInitializer) {\n    node.declarations = [];\n    node.kind = kind;\n    for (;;) {\n      var decl = this.startNode();\n      this.parseVarId(decl, kind);\n      if (this.eat(types$1.eq)) {\n        decl.init = this.parseMaybeAssign(isFor);\n      } else if (!allowMissingInitializer && kind === \"const\" && !(this.type === types$1._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\")))) {\n        this.unexpected();\n      } else if (!allowMissingInitializer && decl.id.type !== \"Identifier\" && !(isFor && (this.type === types$1._in || this.isContextual(\"of\")))) {\n        this.raise(this.lastTokEnd, \"Complex binding patterns require an initialization value\");\n      } else {\n        decl.init = null;\n      }\n      node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(types$1.comma)) { break }\n    }\n    return node\n  };\n\n  pp$8.parseVarId = function(decl, kind) {\n    decl.id = this.parseBindingAtom();\n    this.checkLValPattern(decl.id, kind === \"var\" ? BIND_VAR : BIND_LEXICAL, false);\n  };\n\n  var FUNC_STATEMENT = 1, FUNC_HANGING_STATEMENT = 2, FUNC_NULLABLE_ID = 4;\n\n  // Parse a function declaration or literal (depending on the\n  // `statement & FUNC_STATEMENT`).\n\n  // Remove `allowExpressionBody` for 7.0.0, as it is only called with false\n  pp$8.parseFunction = function(node, statement, allowExpressionBody, isAsync, forInit) {\n    this.initFunction(node);\n    if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {\n      if (this.type === types$1.star && (statement & FUNC_HANGING_STATEMENT))\n        { this.unexpected(); }\n      node.generator = this.eat(types$1.star);\n    }\n    if (this.options.ecmaVersion >= 8)\n      { node.async = !!isAsync; }\n\n    if (statement & FUNC_STATEMENT) {\n      node.id = (statement & FUNC_NULLABLE_ID) && this.type !== types$1.name ? null : this.parseIdent();\n      if (node.id && !(statement & FUNC_HANGING_STATEMENT))\n        // If it is a regular function declaration in sloppy mode, then it is\n        // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n        // mode depends on properties of the current scope (see\n        // treatFunctionsAsVar).\n        { this.checkLValSimple(node.id, (this.strict || node.generator || node.async) ? this.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION); }\n    }\n\n    var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    this.awaitIdentPos = 0;\n    this.enterScope(functionFlags(node.async, node.generator));\n\n    if (!(statement & FUNC_STATEMENT))\n      { node.id = this.type === types$1.name ? this.parseIdent() : null; }\n\n    this.parseFunctionParams(node);\n    this.parseFunctionBody(node, allowExpressionBody, false, forInit);\n\n    this.yieldPos = oldYieldPos;\n    this.awaitPos = oldAwaitPos;\n    this.awaitIdentPos = oldAwaitIdentPos;\n    return this.finishNode(node, (statement & FUNC_STATEMENT) ? \"FunctionDeclaration\" : \"FunctionExpression\")\n  };\n\n  pp$8.parseFunctionParams = function(node) {\n    this.expect(types$1.parenL);\n    node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8);\n    this.checkYieldAwaitInDefaultParams();\n  };\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  pp$8.parseClass = function(node, isStatement) {\n    this.next();\n\n    // ecma-262 14.6 Class Definitions\n    // A class definition is always strict mode code.\n    var oldStrict = this.strict;\n    this.strict = true;\n\n    this.parseClassId(node, isStatement);\n    this.parseClassSuper(node);\n    var privateNameMap = this.enterClassBody();\n    var classBody = this.startNode();\n    var hadConstructor = false;\n    classBody.body = [];\n    this.expect(types$1.braceL);\n    while (this.type !== types$1.braceR) {\n      var element = this.parseClassElement(node.superClass !== null);\n      if (element) {\n        classBody.body.push(element);\n        if (element.type === \"MethodDefinition\" && element.kind === \"constructor\") {\n          if (hadConstructor) { this.raiseRecoverable(element.start, \"Duplicate constructor in the same class\"); }\n          hadConstructor = true;\n        } else if (element.key && element.key.type === \"PrivateIdentifier\" && isPrivateNameConflicted(privateNameMap, element)) {\n          this.raiseRecoverable(element.key.start, (\"Identifier '#\" + (element.key.name) + \"' has already been declared\"));\n        }\n      }\n    }\n    this.strict = oldStrict;\n    this.next();\n    node.body = this.finishNode(classBody, \"ClassBody\");\n    this.exitClassBody();\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")\n  };\n\n  pp$8.parseClassElement = function(constructorAllowsSuper) {\n    if (this.eat(types$1.semi)) { return null }\n\n    var ecmaVersion = this.options.ecmaVersion;\n    var node = this.startNode();\n    var keyName = \"\";\n    var isGenerator = false;\n    var isAsync = false;\n    var kind = \"method\";\n    var isStatic = false;\n\n    if (this.eatContextual(\"static\")) {\n      // Parse static init block\n      if (ecmaVersion >= 13 && this.eat(types$1.braceL)) {\n        this.parseClassStaticBlock(node);\n        return node\n      }\n      if (this.isClassElementNameStart() || this.type === types$1.star) {\n        isStatic = true;\n      } else {\n        keyName = \"static\";\n      }\n    }\n    node.static = isStatic;\n    if (!keyName && ecmaVersion >= 8 && this.eatContextual(\"async\")) {\n      if ((this.isClassElementNameStart() || this.type === types$1.star) && !this.canInsertSemicolon()) {\n        isAsync = true;\n      } else {\n        keyName = \"async\";\n      }\n    }\n    if (!keyName && (ecmaVersion >= 9 || !isAsync) && this.eat(types$1.star)) {\n      isGenerator = true;\n    }\n    if (!keyName && !isAsync && !isGenerator) {\n      var lastValue = this.value;\n      if (this.eatContextual(\"get\") || this.eatContextual(\"set\")) {\n        if (this.isClassElementNameStart()) {\n          kind = lastValue;\n        } else {\n          keyName = lastValue;\n        }\n      }\n    }\n\n    // Parse element name\n    if (keyName) {\n      // 'async', 'get', 'set', or 'static' were not a keyword contextually.\n      // The last token is any of those. Make it the element name.\n      node.computed = false;\n      node.key = this.startNodeAt(this.lastTokStart, this.lastTokStartLoc);\n      node.key.name = keyName;\n      this.finishNode(node.key, \"Identifier\");\n    } else {\n      this.parseClassElementName(node);\n    }\n\n    // Parse element value\n    if (ecmaVersion < 13 || this.type === types$1.parenL || kind !== \"method\" || isGenerator || isAsync) {\n      var isConstructor = !node.static && checkKeyName(node, \"constructor\");\n      var allowsDirectSuper = isConstructor && constructorAllowsSuper;\n      // Couldn't move this check into the 'parseClassMethod' method for backward compatibility.\n      if (isConstructor && kind !== \"method\") { this.raise(node.key.start, \"Constructor can't have get/set modifier\"); }\n      node.kind = isConstructor ? \"constructor\" : kind;\n      this.parseClassMethod(node, isGenerator, isAsync, allowsDirectSuper);\n    } else {\n      this.parseClassField(node);\n    }\n\n    return node\n  };\n\n  pp$8.isClassElementNameStart = function() {\n    return (\n      this.type === types$1.name ||\n      this.type === types$1.privateId ||\n      this.type === types$1.num ||\n      this.type === types$1.string ||\n      this.type === types$1.bracketL ||\n      this.type.keyword\n    )\n  };\n\n  pp$8.parseClassElementName = function(element) {\n    if (this.type === types$1.privateId) {\n      if (this.value === \"constructor\") {\n        this.raise(this.start, \"Classes can't have an element named '#constructor'\");\n      }\n      element.computed = false;\n      element.key = this.parsePrivateIdent();\n    } else {\n      this.parsePropertyName(element);\n    }\n  };\n\n  pp$8.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {\n    // Check key and flags\n    var key = method.key;\n    if (method.kind === \"constructor\") {\n      if (isGenerator) { this.raise(key.start, \"Constructor can't be a generator\"); }\n      if (isAsync) { this.raise(key.start, \"Constructor can't be an async method\"); }\n    } else if (method.static && checkKeyName(method, \"prototype\")) {\n      this.raise(key.start, \"Classes may not have a static property named prototype\");\n    }\n\n    // Parse value\n    var value = method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);\n\n    // Check value\n    if (method.kind === \"get\" && value.params.length !== 0)\n      { this.raiseRecoverable(value.start, \"getter should have no params\"); }\n    if (method.kind === \"set\" && value.params.length !== 1)\n      { this.raiseRecoverable(value.start, \"setter should have exactly one param\"); }\n    if (method.kind === \"set\" && value.params[0].type === \"RestElement\")\n      { this.raiseRecoverable(value.params[0].start, \"Setter cannot use rest params\"); }\n\n    return this.finishNode(method, \"MethodDefinition\")\n  };\n\n  pp$8.parseClassField = function(field) {\n    if (checkKeyName(field, \"constructor\")) {\n      this.raise(field.key.start, \"Classes can't have a field named 'constructor'\");\n    } else if (field.static && checkKeyName(field, \"prototype\")) {\n      this.raise(field.key.start, \"Classes can't have a static field named 'prototype'\");\n    }\n\n    if (this.eat(types$1.eq)) {\n      // To raise SyntaxError if 'arguments' exists in the initializer.\n      var scope = this.currentThisScope();\n      var inClassFieldInit = scope.inClassFieldInit;\n      scope.inClassFieldInit = true;\n      field.value = this.parseMaybeAssign();\n      scope.inClassFieldInit = inClassFieldInit;\n    } else {\n      field.value = null;\n    }\n    this.semicolon();\n\n    return this.finishNode(field, \"PropertyDefinition\")\n  };\n\n  pp$8.parseClassStaticBlock = function(node) {\n    node.body = [];\n\n    var oldLabels = this.labels;\n    this.labels = [];\n    this.enterScope(SCOPE_CLASS_STATIC_BLOCK | SCOPE_SUPER);\n    while (this.type !== types$1.braceR) {\n      var stmt = this.parseStatement(null);\n      node.body.push(stmt);\n    }\n    this.next();\n    this.exitScope();\n    this.labels = oldLabels;\n\n    return this.finishNode(node, \"StaticBlock\")\n  };\n\n  pp$8.parseClassId = function(node, isStatement) {\n    if (this.type === types$1.name) {\n      node.id = this.parseIdent();\n      if (isStatement)\n        { this.checkLValSimple(node.id, BIND_LEXICAL, false); }\n    } else {\n      if (isStatement === true)\n        { this.unexpected(); }\n      node.id = null;\n    }\n  };\n\n  pp$8.parseClassSuper = function(node) {\n    node.superClass = this.eat(types$1._extends) ? this.parseExprSubscripts(null, false) : null;\n  };\n\n  pp$8.enterClassBody = function() {\n    var element = {declared: Object.create(null), used: []};\n    this.privateNameStack.push(element);\n    return element.declared\n  };\n\n  pp$8.exitClassBody = function() {\n    var ref = this.privateNameStack.pop();\n    var declared = ref.declared;\n    var used = ref.used;\n    if (!this.options.checkPrivateFields) { return }\n    var len = this.privateNameStack.length;\n    var parent = len === 0 ? null : this.privateNameStack[len - 1];\n    for (var i = 0; i < used.length; ++i) {\n      var id = used[i];\n      if (!hasOwn(declared, id.name)) {\n        if (parent) {\n          parent.used.push(id);\n        } else {\n          this.raiseRecoverable(id.start, (\"Private field '#\" + (id.name) + \"' must be declared in an enclosing class\"));\n        }\n      }\n    }\n  };\n\n  function isPrivateNameConflicted(privateNameMap, element) {\n    var name = element.key.name;\n    var curr = privateNameMap[name];\n\n    var next = \"true\";\n    if (element.type === \"MethodDefinition\" && (element.kind === \"get\" || element.kind === \"set\")) {\n      next = (element.static ? \"s\" : \"i\") + element.kind;\n    }\n\n    // `class { get #a(){}; static set #a(_){} }` is also conflict.\n    if (\n      curr === \"iget\" && next === \"iset\" ||\n      curr === \"iset\" && next === \"iget\" ||\n      curr === \"sget\" && next === \"sset\" ||\n      curr === \"sset\" && next === \"sget\"\n    ) {\n      privateNameMap[name] = \"true\";\n      return false\n    } else if (!curr) {\n      privateNameMap[name] = next;\n      return false\n    } else {\n      return true\n    }\n  }\n\n  function checkKeyName(node, name) {\n    var computed = node.computed;\n    var key = node.key;\n    return !computed && (\n      key.type === \"Identifier\" && key.name === name ||\n      key.type === \"Literal\" && key.value === name\n    )\n  }\n\n  // Parses module export declaration.\n\n  pp$8.parseExportAllDeclaration = function(node, exports) {\n    if (this.options.ecmaVersion >= 11) {\n      if (this.eatContextual(\"as\")) {\n        node.exported = this.parseModuleExportName();\n        this.checkExport(exports, node.exported, this.lastTokStart);\n      } else {\n        node.exported = null;\n      }\n    }\n    this.expectContextual(\"from\");\n    if (this.type !== types$1.string) { this.unexpected(); }\n    node.source = this.parseExprAtom();\n    this.semicolon();\n    return this.finishNode(node, \"ExportAllDeclaration\")\n  };\n\n  pp$8.parseExport = function(node, exports) {\n    this.next();\n    // export * from '...'\n    if (this.eat(types$1.star)) {\n      return this.parseExportAllDeclaration(node, exports)\n    }\n    if (this.eat(types$1._default)) { // export default ...\n      this.checkExport(exports, \"default\", this.lastTokStart);\n      node.declaration = this.parseExportDefaultDeclaration();\n      return this.finishNode(node, \"ExportDefaultDeclaration\")\n    }\n    // export var|const|let|function|class ...\n    if (this.shouldParseExportStatement()) {\n      node.declaration = this.parseExportDeclaration(node);\n      if (node.declaration.type === \"VariableDeclaration\")\n        { this.checkVariableExport(exports, node.declaration.declarations); }\n      else\n        { this.checkExport(exports, node.declaration.id, node.declaration.id.start); }\n      node.specifiers = [];\n      node.source = null;\n    } else { // export { x, y as z } [from '...']\n      node.declaration = null;\n      node.specifiers = this.parseExportSpecifiers(exports);\n      if (this.eatContextual(\"from\")) {\n        if (this.type !== types$1.string) { this.unexpected(); }\n        node.source = this.parseExprAtom();\n      } else {\n        for (var i = 0, list = node.specifiers; i < list.length; i += 1) {\n          // check for keywords used as local names\n          var spec = list[i];\n\n          this.checkUnreserved(spec.local);\n          // check if export is defined\n          this.checkLocalExport(spec.local);\n\n          if (spec.local.type === \"Literal\") {\n            this.raise(spec.local.start, \"A string literal cannot be used as an exported binding without `from`.\");\n          }\n        }\n\n        node.source = null;\n      }\n      this.semicolon();\n    }\n    return this.finishNode(node, \"ExportNamedDeclaration\")\n  };\n\n  pp$8.parseExportDeclaration = function(node) {\n    return this.parseStatement(null)\n  };\n\n  pp$8.parseExportDefaultDeclaration = function() {\n    var isAsync;\n    if (this.type === types$1._function || (isAsync = this.isAsyncFunction())) {\n      var fNode = this.startNode();\n      this.next();\n      if (isAsync) { this.next(); }\n      return this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync)\n    } else if (this.type === types$1._class) {\n      var cNode = this.startNode();\n      return this.parseClass(cNode, \"nullableID\")\n    } else {\n      var declaration = this.parseMaybeAssign();\n      this.semicolon();\n      return declaration\n    }\n  };\n\n  pp$8.checkExport = function(exports, name, pos) {\n    if (!exports) { return }\n    if (typeof name !== \"string\")\n      { name = name.type === \"Identifier\" ? name.name : name.value; }\n    if (hasOwn(exports, name))\n      { this.raiseRecoverable(pos, \"Duplicate export '\" + name + \"'\"); }\n    exports[name] = true;\n  };\n\n  pp$8.checkPatternExport = function(exports, pat) {\n    var type = pat.type;\n    if (type === \"Identifier\")\n      { this.checkExport(exports, pat, pat.start); }\n    else if (type === \"ObjectPattern\")\n      { for (var i = 0, list = pat.properties; i < list.length; i += 1)\n        {\n          var prop = list[i];\n\n          this.checkPatternExport(exports, prop);\n        } }\n    else if (type === \"ArrayPattern\")\n      { for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {\n        var elt = list$1[i$1];\n\n          if (elt) { this.checkPatternExport(exports, elt); }\n      } }\n    else if (type === \"Property\")\n      { this.checkPatternExport(exports, pat.value); }\n    else if (type === \"AssignmentPattern\")\n      { this.checkPatternExport(exports, pat.left); }\n    else if (type === \"RestElement\")\n      { this.checkPatternExport(exports, pat.argument); }\n  };\n\n  pp$8.checkVariableExport = function(exports, decls) {\n    if (!exports) { return }\n    for (var i = 0, list = decls; i < list.length; i += 1)\n      {\n      var decl = list[i];\n\n      this.checkPatternExport(exports, decl.id);\n    }\n  };\n\n  pp$8.shouldParseExportStatement = function() {\n    return this.type.keyword === \"var\" ||\n      this.type.keyword === \"const\" ||\n      this.type.keyword === \"class\" ||\n      this.type.keyword === \"function\" ||\n      this.isLet() ||\n      this.isAsyncFunction()\n  };\n\n  // Parses a comma-separated list of module exports.\n\n  pp$8.parseExportSpecifier = function(exports) {\n    var node = this.startNode();\n    node.local = this.parseModuleExportName();\n\n    node.exported = this.eatContextual(\"as\") ? this.parseModuleExportName() : node.local;\n    this.checkExport(\n      exports,\n      node.exported,\n      node.exported.start\n    );\n\n    return this.finishNode(node, \"ExportSpecifier\")\n  };\n\n  pp$8.parseExportSpecifiers = function(exports) {\n    var nodes = [], first = true;\n    // export { x, y as z } [from '...']\n    this.expect(types$1.braceL);\n    while (!this.eat(types$1.braceR)) {\n      if (!first) {\n        this.expect(types$1.comma);\n        if (this.afterTrailingComma(types$1.braceR)) { break }\n      } else { first = false; }\n\n      nodes.push(this.parseExportSpecifier(exports));\n    }\n    return nodes\n  };\n\n  // Parses import declaration.\n\n  pp$8.parseImport = function(node) {\n    this.next();\n\n    // import '...'\n    if (this.type === types$1.string) {\n      node.specifiers = empty$1;\n      node.source = this.parseExprAtom();\n    } else {\n      node.specifiers = this.parseImportSpecifiers();\n      this.expectContextual(\"from\");\n      node.source = this.type === types$1.string ? this.parseExprAtom() : this.unexpected();\n    }\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\")\n  };\n\n  // Parses a comma-separated list of module imports.\n\n  pp$8.parseImportSpecifier = function() {\n    var node = this.startNode();\n    node.imported = this.parseModuleExportName();\n\n    if (this.eatContextual(\"as\")) {\n      node.local = this.parseIdent();\n    } else {\n      this.checkUnreserved(node.imported);\n      node.local = node.imported;\n    }\n    this.checkLValSimple(node.local, BIND_LEXICAL);\n\n    return this.finishNode(node, \"ImportSpecifier\")\n  };\n\n  pp$8.parseImportDefaultSpecifier = function() {\n    // import defaultObj, { x, y as z } from '...'\n    var node = this.startNode();\n    node.local = this.parseIdent();\n    this.checkLValSimple(node.local, BIND_LEXICAL);\n    return this.finishNode(node, \"ImportDefaultSpecifier\")\n  };\n\n  pp$8.parseImportNamespaceSpecifier = function() {\n    var node = this.startNode();\n    this.next();\n    this.expectContextual(\"as\");\n    node.local = this.parseIdent();\n    this.checkLValSimple(node.local, BIND_LEXICAL);\n    return this.finishNode(node, \"ImportNamespaceSpecifier\")\n  };\n\n  pp$8.parseImportSpecifiers = function() {\n    var nodes = [], first = true;\n    if (this.type === types$1.name) {\n      nodes.push(this.parseImportDefaultSpecifier());\n      if (!this.eat(types$1.comma)) { return nodes }\n    }\n    if (this.type === types$1.star) {\n      nodes.push(this.parseImportNamespaceSpecifier());\n      return nodes\n    }\n    this.expect(types$1.braceL);\n    while (!this.eat(types$1.braceR)) {\n      if (!first) {\n        this.expect(types$1.comma);\n        if (this.afterTrailingComma(types$1.braceR)) { break }\n      } else { first = false; }\n\n      nodes.push(this.parseImportSpecifier());\n    }\n    return nodes\n  };\n\n  pp$8.parseModuleExportName = function() {\n    if (this.options.ecmaVersion >= 13 && this.type === types$1.string) {\n      var stringLiteral = this.parseLiteral(this.value);\n      if (loneSurrogate.test(stringLiteral.value)) {\n        this.raise(stringLiteral.start, \"An export name cannot include a lone surrogate.\");\n      }\n      return stringLiteral\n    }\n    return this.parseIdent(true)\n  };\n\n  // Set `ExpressionStatement#directive` property for directive prologues.\n  pp$8.adaptDirectivePrologue = function(statements) {\n    for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {\n      statements[i].directive = statements[i].expression.raw.slice(1, -1);\n    }\n  };\n  pp$8.isDirectiveCandidate = function(statement) {\n    return (\n      this.options.ecmaVersion >= 5 &&\n      statement.type === \"ExpressionStatement\" &&\n      statement.expression.type === \"Literal\" &&\n      typeof statement.expression.value === \"string\" &&\n      // Reject parenthesized strings.\n      (this.input[statement.start] === \"\\\"\" || this.input[statement.start] === \"'\")\n    )\n  };\n\n  var pp$7 = Parser.prototype;\n\n  // Convert existing expression atom to assignable pattern\n  // if possible.\n\n  pp$7.toAssignable = function(node, isBinding, refDestructuringErrors) {\n    if (this.options.ecmaVersion >= 6 && node) {\n      switch (node.type) {\n      case \"Identifier\":\n        if (this.inAsync && node.name === \"await\")\n          { this.raise(node.start, \"Cannot use 'await' as identifier inside an async function\"); }\n        break\n\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n        for (var i = 0, list = node.properties; i < list.length; i += 1) {\n          var prop = list[i];\n\n        this.toAssignable(prop, isBinding);\n          // Early error:\n          //   AssignmentRestProperty[Yield, Await] :\n          //     `...` DestructuringAssignmentTarget[Yield, Await]\n          //\n          //   It is a Syntax Error if |DestructuringAssignmentTarget| is an |ArrayLiteral| or an |ObjectLiteral|.\n          if (\n            prop.type === \"RestElement\" &&\n            (prop.argument.type === \"ArrayPattern\" || prop.argument.type === \"ObjectPattern\")\n          ) {\n            this.raise(prop.argument.start, \"Unexpected token\");\n          }\n        }\n        break\n\n      case \"Property\":\n        // AssignmentProperty has type === \"Property\"\n        if (node.kind !== \"init\") { this.raise(node.key.start, \"Object pattern can't contain getter or setter\"); }\n        this.toAssignable(node.value, isBinding);\n        break\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n        this.toAssignableList(node.elements, isBinding);\n        break\n\n      case \"SpreadElement\":\n        node.type = \"RestElement\";\n        this.toAssignable(node.argument, isBinding);\n        if (node.argument.type === \"AssignmentPattern\")\n          { this.raise(node.argument.start, \"Rest elements cannot have a default value\"); }\n        break\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") { this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\"); }\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isBinding);\n        break\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(node.expression, isBinding, refDestructuringErrors);\n        break\n\n      case \"ChainExpression\":\n        this.raiseRecoverable(node.start, \"Optional chaining cannot appear in left-hand side\");\n        break\n\n      case \"MemberExpression\":\n        if (!isBinding) { break }\n\n      default:\n        this.raise(node.start, \"Assigning to rvalue\");\n      }\n    } else if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n    return node\n  };\n\n  // Convert list of expression atoms to binding list.\n\n  pp$7.toAssignableList = function(exprList, isBinding) {\n    var end = exprList.length;\n    for (var i = 0; i < end; i++) {\n      var elt = exprList[i];\n      if (elt) { this.toAssignable(elt, isBinding); }\n    }\n    if (end) {\n      var last = exprList[end - 1];\n      if (this.options.ecmaVersion === 6 && isBinding && last && last.type === \"RestElement\" && last.argument.type !== \"Identifier\")\n        { this.unexpected(last.argument.start); }\n    }\n    return exprList\n  };\n\n  // Parses spread element.\n\n  pp$7.parseSpread = function(refDestructuringErrors) {\n    var node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n    return this.finishNode(node, \"SpreadElement\")\n  };\n\n  pp$7.parseRestBinding = function() {\n    var node = this.startNode();\n    this.next();\n\n    // RestElement inside of a function parameter must be an identifier\n    if (this.options.ecmaVersion === 6 && this.type !== types$1.name)\n      { this.unexpected(); }\n\n    node.argument = this.parseBindingAtom();\n\n    return this.finishNode(node, \"RestElement\")\n  };\n\n  // Parses lvalue (assignable) atom.\n\n  pp$7.parseBindingAtom = function() {\n    if (this.options.ecmaVersion >= 6) {\n      switch (this.type) {\n      case types$1.bracketL:\n        var node = this.startNode();\n        this.next();\n        node.elements = this.parseBindingList(types$1.bracketR, true, true);\n        return this.finishNode(node, \"ArrayPattern\")\n\n      case types$1.braceL:\n        return this.parseObj(true)\n      }\n    }\n    return this.parseIdent()\n  };\n\n  pp$7.parseBindingList = function(close, allowEmpty, allowTrailingComma, allowModifiers) {\n    var elts = [], first = true;\n    while (!this.eat(close)) {\n      if (first) { first = false; }\n      else { this.expect(types$1.comma); }\n      if (allowEmpty && this.type === types$1.comma) {\n        elts.push(null);\n      } else if (allowTrailingComma && this.afterTrailingComma(close)) {\n        break\n      } else if (this.type === types$1.ellipsis) {\n        var rest = this.parseRestBinding();\n        this.parseBindingListItem(rest);\n        elts.push(rest);\n        if (this.type === types$1.comma) { this.raiseRecoverable(this.start, \"Comma is not permitted after the rest element\"); }\n        this.expect(close);\n        break\n      } else {\n        elts.push(this.parseAssignableListItem(allowModifiers));\n      }\n    }\n    return elts\n  };\n\n  pp$7.parseAssignableListItem = function(allowModifiers) {\n    var elem = this.parseMaybeDefault(this.start, this.startLoc);\n    this.parseBindingListItem(elem);\n    return elem\n  };\n\n  pp$7.parseBindingListItem = function(param) {\n    return param\n  };\n\n  // Parses assignment pattern around given atom if possible.\n\n  pp$7.parseMaybeDefault = function(startPos, startLoc, left) {\n    left = left || this.parseBindingAtom();\n    if (this.options.ecmaVersion < 6 || !this.eat(types$1.eq)) { return left }\n    var node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssign();\n    return this.finishNode(node, \"AssignmentPattern\")\n  };\n\n  // The following three functions all verify that a node is an lvalue —\n  // something that can be bound, or assigned to. In order to do so, they perform\n  // a variety of checks:\n  //\n  // - Check that none of the bound/assigned-to identifiers are reserved words.\n  // - Record name declarations for bindings in the appropriate scope.\n  // - Check duplicate argument names, if checkClashes is set.\n  //\n  // If a complex binding pattern is encountered (e.g., object and array\n  // destructuring), the entire pattern is recursively checked.\n  //\n  // There are three versions of checkLVal*() appropriate for different\n  // circumstances:\n  //\n  // - checkLValSimple() shall be used if the syntactic construct supports\n  //   nothing other than identifiers and member expressions. Parenthesized\n  //   expressions are also correctly handled. This is generally appropriate for\n  //   constructs for which the spec says\n  //\n  //   > It is a Syntax Error if AssignmentTargetType of [the production] is not\n  //   > simple.\n  //\n  //   It is also appropriate for checking if an identifier is valid and not\n  //   defined elsewhere, like import declarations or function/class identifiers.\n  //\n  //   Examples where this is used include:\n  //     a += …;\n  //     import a from '…';\n  //   where a is the node to be checked.\n  //\n  // - checkLValPattern() shall be used if the syntactic construct supports\n  //   anything checkLValSimple() supports, as well as object and array\n  //   destructuring patterns. This is generally appropriate for constructs for\n  //   which the spec says\n  //\n  //   > It is a Syntax Error if [the production] is neither an ObjectLiteral nor\n  //   > an ArrayLiteral and AssignmentTargetType of [the production] is not\n  //   > simple.\n  //\n  //   Examples where this is used include:\n  //     (a = …);\n  //     const a = …;\n  //     try { … } catch (a) { … }\n  //   where a is the node to be checked.\n  //\n  // - checkLValInnerPattern() shall be used if the syntactic construct supports\n  //   anything checkLValPattern() supports, as well as default assignment\n  //   patterns, rest elements, and other constructs that may appear within an\n  //   object or array destructuring pattern.\n  //\n  //   As a special case, function parameters also use checkLValInnerPattern(),\n  //   as they also support defaults and rest constructs.\n  //\n  // These functions deliberately support both assignment and binding constructs,\n  // as the logic for both is exceedingly similar. If the node is the target of\n  // an assignment, then bindingType should be set to BIND_NONE. Otherwise, it\n  // should be set to the appropriate BIND_* constant, like BIND_VAR or\n  // BIND_LEXICAL.\n  //\n  // If the function is called with a non-BIND_NONE bindingType, then\n  // additionally a checkClashes object may be specified to allow checking for\n  // duplicate argument names. checkClashes is ignored if the provided construct\n  // is an assignment (i.e., bindingType is BIND_NONE).\n\n  pp$7.checkLValSimple = function(expr, bindingType, checkClashes) {\n    if ( bindingType === void 0 ) bindingType = BIND_NONE;\n\n    var isBind = bindingType !== BIND_NONE;\n\n    switch (expr.type) {\n    case \"Identifier\":\n      if (this.strict && this.reservedWordsStrictBind.test(expr.name))\n        { this.raiseRecoverable(expr.start, (isBind ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\"); }\n      if (isBind) {\n        if (bindingType === BIND_LEXICAL && expr.name === \"let\")\n          { this.raiseRecoverable(expr.start, \"let is disallowed as a lexically bound name\"); }\n        if (checkClashes) {\n          if (hasOwn(checkClashes, expr.name))\n            { this.raiseRecoverable(expr.start, \"Argument name clash\"); }\n          checkClashes[expr.name] = true;\n        }\n        if (bindingType !== BIND_OUTSIDE) { this.declareName(expr.name, bindingType, expr.start); }\n      }\n      break\n\n    case \"ChainExpression\":\n      this.raiseRecoverable(expr.start, \"Optional chaining cannot appear in left-hand side\");\n      break\n\n    case \"MemberExpression\":\n      if (isBind) { this.raiseRecoverable(expr.start, \"Binding member expression\"); }\n      break\n\n    case \"ParenthesizedExpression\":\n      if (isBind) { this.raiseRecoverable(expr.start, \"Binding parenthesized expression\"); }\n      return this.checkLValSimple(expr.expression, bindingType, checkClashes)\n\n    default:\n      this.raise(expr.start, (isBind ? \"Binding\" : \"Assigning to\") + \" rvalue\");\n    }\n  };\n\n  pp$7.checkLValPattern = function(expr, bindingType, checkClashes) {\n    if ( bindingType === void 0 ) bindingType = BIND_NONE;\n\n    switch (expr.type) {\n    case \"ObjectPattern\":\n      for (var i = 0, list = expr.properties; i < list.length; i += 1) {\n        var prop = list[i];\n\n      this.checkLValInnerPattern(prop, bindingType, checkClashes);\n      }\n      break\n\n    case \"ArrayPattern\":\n      for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {\n        var elem = list$1[i$1];\n\n      if (elem) { this.checkLValInnerPattern(elem, bindingType, checkClashes); }\n      }\n      break\n\n    default:\n      this.checkLValSimple(expr, bindingType, checkClashes);\n    }\n  };\n\n  pp$7.checkLValInnerPattern = function(expr, bindingType, checkClashes) {\n    if ( bindingType === void 0 ) bindingType = BIND_NONE;\n\n    switch (expr.type) {\n    case \"Property\":\n      // AssignmentProperty has type === \"Property\"\n      this.checkLValInnerPattern(expr.value, bindingType, checkClashes);\n      break\n\n    case \"AssignmentPattern\":\n      this.checkLValPattern(expr.left, bindingType, checkClashes);\n      break\n\n    case \"RestElement\":\n      this.checkLValPattern(expr.argument, bindingType, checkClashes);\n      break\n\n    default:\n      this.checkLValPattern(expr, bindingType, checkClashes);\n    }\n  };\n\n  // The algorithm used to determine whether a regexp can appear at a\n  // given point in the program is loosely based on sweet.js' approach.\n  // See https://github.com/mozilla/sweet.js/wiki/design\n\n\n  var TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {\n    this.token = token;\n    this.isExpr = !!isExpr;\n    this.preserveSpace = !!preserveSpace;\n    this.override = override;\n    this.generator = !!generator;\n  };\n\n  var types = {\n    b_stat: new TokContext(\"{\", false),\n    b_expr: new TokContext(\"{\", true),\n    b_tmpl: new TokContext(\"${\", false),\n    p_stat: new TokContext(\"(\", false),\n    p_expr: new TokContext(\"(\", true),\n    q_tmpl: new TokContext(\"`\", true, true, function (p) { return p.tryReadTemplateToken(); }),\n    f_stat: new TokContext(\"function\", false),\n    f_expr: new TokContext(\"function\", true),\n    f_expr_gen: new TokContext(\"function\", true, false, null, true),\n    f_gen: new TokContext(\"function\", false, false, null, true)\n  };\n\n  var pp$6 = Parser.prototype;\n\n  pp$6.initialContext = function() {\n    return [types.b_stat]\n  };\n\n  pp$6.curContext = function() {\n    return this.context[this.context.length - 1]\n  };\n\n  pp$6.braceIsBlock = function(prevType) {\n    var parent = this.curContext();\n    if (parent === types.f_expr || parent === types.f_stat)\n      { return true }\n    if (prevType === types$1.colon && (parent === types.b_stat || parent === types.b_expr))\n      { return !parent.isExpr }\n\n    // The check for `tt.name && exprAllowed` detects whether we are\n    // after a `yield` or `of` construct. See the `updateContext` for\n    // `tt.name`.\n    if (prevType === types$1._return || prevType === types$1.name && this.exprAllowed)\n      { return lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) }\n    if (prevType === types$1._else || prevType === types$1.semi || prevType === types$1.eof || prevType === types$1.parenR || prevType === types$1.arrow)\n      { return true }\n    if (prevType === types$1.braceL)\n      { return parent === types.b_stat }\n    if (prevType === types$1._var || prevType === types$1._const || prevType === types$1.name)\n      { return false }\n    return !this.exprAllowed\n  };\n\n  pp$6.inGeneratorContext = function() {\n    for (var i = this.context.length - 1; i >= 1; i--) {\n      var context = this.context[i];\n      if (context.token === \"function\")\n        { return context.generator }\n    }\n    return false\n  };\n\n  pp$6.updateContext = function(prevType) {\n    var update, type = this.type;\n    if (type.keyword && prevType === types$1.dot)\n      { this.exprAllowed = false; }\n    else if (update = type.updateContext)\n      { update.call(this, prevType); }\n    else\n      { this.exprAllowed = type.beforeExpr; }\n  };\n\n  // Used to handle edge cases when token context could not be inferred correctly during tokenization phase\n\n  pp$6.overrideContext = function(tokenCtx) {\n    if (this.curContext() !== tokenCtx) {\n      this.context[this.context.length - 1] = tokenCtx;\n    }\n  };\n\n  // Token-specific context update code\n\n  types$1.parenR.updateContext = types$1.braceR.updateContext = function() {\n    if (this.context.length === 1) {\n      this.exprAllowed = true;\n      return\n    }\n    var out = this.context.pop();\n    if (out === types.b_stat && this.curContext().token === \"function\") {\n      out = this.context.pop();\n    }\n    this.exprAllowed = !out.isExpr;\n  };\n\n  types$1.braceL.updateContext = function(prevType) {\n    this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr);\n    this.exprAllowed = true;\n  };\n\n  types$1.dollarBraceL.updateContext = function() {\n    this.context.push(types.b_tmpl);\n    this.exprAllowed = true;\n  };\n\n  types$1.parenL.updateContext = function(prevType) {\n    var statementParens = prevType === types$1._if || prevType === types$1._for || prevType === types$1._with || prevType === types$1._while;\n    this.context.push(statementParens ? types.p_stat : types.p_expr);\n    this.exprAllowed = true;\n  };\n\n  types$1.incDec.updateContext = function() {\n    // tokExprAllowed stays unchanged\n  };\n\n  types$1._function.updateContext = types$1._class.updateContext = function(prevType) {\n    if (prevType.beforeExpr && prevType !== types$1._else &&\n        !(prevType === types$1.semi && this.curContext() !== types.p_stat) &&\n        !(prevType === types$1._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) &&\n        !((prevType === types$1.colon || prevType === types$1.braceL) && this.curContext() === types.b_stat))\n      { this.context.push(types.f_expr); }\n    else\n      { this.context.push(types.f_stat); }\n    this.exprAllowed = false;\n  };\n\n  types$1.colon.updateContext = function() {\n    if (this.curContext().token === \"function\") { this.context.pop(); }\n    this.exprAllowed = true;\n  };\n\n  types$1.backQuote.updateContext = function() {\n    if (this.curContext() === types.q_tmpl)\n      { this.context.pop(); }\n    else\n      { this.context.push(types.q_tmpl); }\n    this.exprAllowed = false;\n  };\n\n  types$1.star.updateContext = function(prevType) {\n    if (prevType === types$1._function) {\n      var index = this.context.length - 1;\n      if (this.context[index] === types.f_expr)\n        { this.context[index] = types.f_expr_gen; }\n      else\n        { this.context[index] = types.f_gen; }\n    }\n    this.exprAllowed = true;\n  };\n\n  types$1.name.updateContext = function(prevType) {\n    var allowed = false;\n    if (this.options.ecmaVersion >= 6 && prevType !== types$1.dot) {\n      if (this.value === \"of\" && !this.exprAllowed ||\n          this.value === \"yield\" && this.inGeneratorContext())\n        { allowed = true; }\n    }\n    this.exprAllowed = allowed;\n  };\n\n  // A recursive descent parser operates by defining functions for all\n  // syntactic elements, and recursively calling those, each function\n  // advancing the input stream and returning an AST node. Precedence\n  // of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n  // instead of `(!x)[1]` is handled by the fact that the parser\n  // function that parses unary prefix operators is called first, and\n  // in turn calls the function that parses `[]` subscripts — that\n  // way, it'll receive the node for `x[1]` already parsed, and wraps\n  // *that* in the unary operator node.\n  //\n  // Acorn uses an [operator precedence parser][opp] to handle binary\n  // operator precedence, because it is much more compact than using\n  // the technique outlined above, which uses different, nesting\n  // functions to specify precedence, for all of the ten binary\n  // precedence levels that JavaScript defines.\n  //\n  // [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\n\n  var pp$5 = Parser.prototype;\n\n  // Check if property name clashes with already added.\n  // Object/class getters and setters are not allowed to clash —\n  // either with each other or with an init property — and in\n  // strict mode, init properties are also not allowed to be repeated.\n\n  pp$5.checkPropClash = function(prop, propHash, refDestructuringErrors) {\n    if (this.options.ecmaVersion >= 9 && prop.type === \"SpreadElement\")\n      { return }\n    if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))\n      { return }\n    var key = prop.key;\n    var name;\n    switch (key.type) {\n    case \"Identifier\": name = key.name; break\n    case \"Literal\": name = String(key.value); break\n    default: return\n    }\n    var kind = prop.kind;\n    if (this.options.ecmaVersion >= 6) {\n      if (name === \"__proto__\" && kind === \"init\") {\n        if (propHash.proto) {\n          if (refDestructuringErrors) {\n            if (refDestructuringErrors.doubleProto < 0) {\n              refDestructuringErrors.doubleProto = key.start;\n            }\n          } else {\n            this.raiseRecoverable(key.start, \"Redefinition of __proto__ property\");\n          }\n        }\n        propHash.proto = true;\n      }\n      return\n    }\n    name = \"$\" + name;\n    var other = propHash[name];\n    if (other) {\n      var redefinition;\n      if (kind === \"init\") {\n        redefinition = this.strict && other.init || other.get || other.set;\n      } else {\n        redefinition = other.init || other[kind];\n      }\n      if (redefinition)\n        { this.raiseRecoverable(key.start, \"Redefinition of property\"); }\n    } else {\n      other = propHash[name] = {\n        init: false,\n        get: false,\n        set: false\n      };\n    }\n    other[kind] = true;\n  };\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function(s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression. The optional arguments are used to\n  // forbid the `in` operator (in for loops initalization expressions)\n  // and provide reference for storing '=' operator inside shorthand\n  // property assignment in contexts where both object expression\n  // and object pattern might appear (so it's possible to raise\n  // delayed syntax error at correct position).\n\n  pp$5.parseExpression = function(forInit, refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc;\n    var expr = this.parseMaybeAssign(forInit, refDestructuringErrors);\n    if (this.type === types$1.comma) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n      while (this.eat(types$1.comma)) { node.expressions.push(this.parseMaybeAssign(forInit, refDestructuringErrors)); }\n      return this.finishNode(node, \"SequenceExpression\")\n    }\n    return expr\n  };\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n\n  pp$5.parseMaybeAssign = function(forInit, refDestructuringErrors, afterLeftParse) {\n    if (this.isContextual(\"yield\")) {\n      if (this.inGenerator) { return this.parseYield(forInit) }\n      // The tokenizer will assume an expression is allowed after\n      // `yield`, but this isn't that kind of yield\n      else { this.exprAllowed = false; }\n    }\n\n    var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1, oldDoubleProto = -1;\n    if (refDestructuringErrors) {\n      oldParenAssign = refDestructuringErrors.parenthesizedAssign;\n      oldTrailingComma = refDestructuringErrors.trailingComma;\n      oldDoubleProto = refDestructuringErrors.doubleProto;\n      refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;\n    } else {\n      refDestructuringErrors = new DestructuringErrors;\n      ownDestructuringErrors = true;\n    }\n\n    var startPos = this.start, startLoc = this.startLoc;\n    if (this.type === types$1.parenL || this.type === types$1.name) {\n      this.potentialArrowAt = this.start;\n      this.potentialArrowInForAwait = forInit === \"await\";\n    }\n    var left = this.parseMaybeConditional(forInit, refDestructuringErrors);\n    if (afterLeftParse) { left = afterLeftParse.call(this, left, startPos, startLoc); }\n    if (this.type.isAssign) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.value;\n      if (this.type === types$1.eq)\n        { left = this.toAssignable(left, false, refDestructuringErrors); }\n      if (!ownDestructuringErrors) {\n        refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1;\n      }\n      if (refDestructuringErrors.shorthandAssign >= left.start)\n        { refDestructuringErrors.shorthandAssign = -1; } // reset because shorthand default was used correctly\n      if (this.type === types$1.eq)\n        { this.checkLValPattern(left); }\n      else\n        { this.checkLValSimple(left); }\n      node.left = left;\n      this.next();\n      node.right = this.parseMaybeAssign(forInit);\n      if (oldDoubleProto > -1) { refDestructuringErrors.doubleProto = oldDoubleProto; }\n      return this.finishNode(node, \"AssignmentExpression\")\n    } else {\n      if (ownDestructuringErrors) { this.checkExpressionErrors(refDestructuringErrors, true); }\n    }\n    if (oldParenAssign > -1) { refDestructuringErrors.parenthesizedAssign = oldParenAssign; }\n    if (oldTrailingComma > -1) { refDestructuringErrors.trailingComma = oldTrailingComma; }\n    return left\n  };\n\n  // Parse a ternary conditional (`?:`) operator.\n\n  pp$5.parseMaybeConditional = function(forInit, refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc;\n    var expr = this.parseExprOps(forInit, refDestructuringErrors);\n    if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n    if (this.eat(types$1.question)) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssign();\n      this.expect(types$1.colon);\n      node.alternate = this.parseMaybeAssign(forInit);\n      return this.finishNode(node, \"ConditionalExpression\")\n    }\n    return expr\n  };\n\n  // Start the precedence parser.\n\n  pp$5.parseExprOps = function(forInit, refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc;\n    var expr = this.parseMaybeUnary(refDestructuringErrors, false, false, forInit);\n    if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n    return expr.start === startPos && expr.type === \"ArrowFunctionExpression\" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, forInit)\n  };\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  pp$5.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, forInit) {\n    var prec = this.type.binop;\n    if (prec != null && (!forInit || this.type !== types$1._in)) {\n      if (prec > minPrec) {\n        var logical = this.type === types$1.logicalOR || this.type === types$1.logicalAND;\n        var coalesce = this.type === types$1.coalesce;\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = types$1.logicalAND.binop;\n        }\n        var op = this.value;\n        this.next();\n        var startPos = this.start, startLoc = this.startLoc;\n        var right = this.parseExprOp(this.parseMaybeUnary(null, false, false, forInit), startPos, startLoc, prec, forInit);\n        var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical || coalesce);\n        if ((logical && this.type === types$1.coalesce) || (coalesce && (this.type === types$1.logicalOR || this.type === types$1.logicalAND))) {\n          this.raiseRecoverable(this.start, \"Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses\");\n        }\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, forInit)\n      }\n    }\n    return left\n  };\n\n  pp$5.buildBinary = function(startPos, startLoc, left, right, op, logical) {\n    if (right.type === \"PrivateIdentifier\") { this.raise(right.start, \"Private identifier can only be left side of binary expression\"); }\n    var node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.operator = op;\n    node.right = right;\n    return this.finishNode(node, logical ? \"LogicalExpression\" : \"BinaryExpression\")\n  };\n\n  // Parse unary operators, both prefix and postfix.\n\n  pp$5.parseMaybeUnary = function(refDestructuringErrors, sawUnary, incDec, forInit) {\n    var startPos = this.start, startLoc = this.startLoc, expr;\n    if (this.isContextual(\"await\") && this.canAwait) {\n      expr = this.parseAwait(forInit);\n      sawUnary = true;\n    } else if (this.type.prefix) {\n      var node = this.startNode(), update = this.type === types$1.incDec;\n      node.operator = this.value;\n      node.prefix = true;\n      this.next();\n      node.argument = this.parseMaybeUnary(null, true, update, forInit);\n      this.checkExpressionErrors(refDestructuringErrors, true);\n      if (update) { this.checkLValSimple(node.argument); }\n      else if (this.strict && node.operator === \"delete\" &&\n               node.argument.type === \"Identifier\")\n        { this.raiseRecoverable(node.start, \"Deleting local variable in strict mode\"); }\n      else if (node.operator === \"delete\" && isPrivateFieldAccess(node.argument))\n        { this.raiseRecoverable(node.start, \"Private fields can not be deleted\"); }\n      else { sawUnary = true; }\n      expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n    } else if (!sawUnary && this.type === types$1.privateId) {\n      if ((forInit || this.privateNameStack.length === 0) && this.options.checkPrivateFields) { this.unexpected(); }\n      expr = this.parsePrivateIdent();\n      // only could be private fields in 'in', such as #x in obj\n      if (this.type !== types$1._in) { this.unexpected(); }\n    } else {\n      expr = this.parseExprSubscripts(refDestructuringErrors, forInit);\n      if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n      while (this.type.postfix && !this.canInsertSemicolon()) {\n        var node$1 = this.startNodeAt(startPos, startLoc);\n        node$1.operator = this.value;\n        node$1.prefix = false;\n        node$1.argument = expr;\n        this.checkLValSimple(expr);\n        this.next();\n        expr = this.finishNode(node$1, \"UpdateExpression\");\n      }\n    }\n\n    if (!incDec && this.eat(types$1.starstar)) {\n      if (sawUnary)\n        { this.unexpected(this.lastTokStart); }\n      else\n        { return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false, false, forInit), \"**\", false) }\n    } else {\n      return expr\n    }\n  };\n\n  function isPrivateFieldAccess(node) {\n    return (\n      node.type === \"MemberExpression\" && node.property.type === \"PrivateIdentifier\" ||\n      node.type === \"ChainExpression\" && isPrivateFieldAccess(node.expression)\n    )\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n\n  pp$5.parseExprSubscripts = function(refDestructuringErrors, forInit) {\n    var startPos = this.start, startLoc = this.startLoc;\n    var expr = this.parseExprAtom(refDestructuringErrors, forInit);\n    if (expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\")\n      { return expr }\n    var result = this.parseSubscripts(expr, startPos, startLoc, false, forInit);\n    if (refDestructuringErrors && result.type === \"MemberExpression\") {\n      if (refDestructuringErrors.parenthesizedAssign >= result.start) { refDestructuringErrors.parenthesizedAssign = -1; }\n      if (refDestructuringErrors.parenthesizedBind >= result.start) { refDestructuringErrors.parenthesizedBind = -1; }\n      if (refDestructuringErrors.trailingComma >= result.start) { refDestructuringErrors.trailingComma = -1; }\n    }\n    return result\n  };\n\n  pp$5.parseSubscripts = function(base, startPos, startLoc, noCalls, forInit) {\n    var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === \"Identifier\" && base.name === \"async\" &&\n        this.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 &&\n        this.potentialArrowAt === base.start;\n    var optionalChained = false;\n\n    while (true) {\n      var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit);\n\n      if (element.optional) { optionalChained = true; }\n      if (element === base || element.type === \"ArrowFunctionExpression\") {\n        if (optionalChained) {\n          var chainNode = this.startNodeAt(startPos, startLoc);\n          chainNode.expression = element;\n          element = this.finishNode(chainNode, \"ChainExpression\");\n        }\n        return element\n      }\n\n      base = element;\n    }\n  };\n\n  pp$5.shouldParseAsyncArrow = function() {\n    return !this.canInsertSemicolon() && this.eat(types$1.arrow)\n  };\n\n  pp$5.parseSubscriptAsyncArrow = function(startPos, startLoc, exprList, forInit) {\n    return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true, forInit)\n  };\n\n  pp$5.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit) {\n    var optionalSupported = this.options.ecmaVersion >= 11;\n    var optional = optionalSupported && this.eat(types$1.questionDot);\n    if (noCalls && optional) { this.raise(this.lastTokStart, \"Optional chaining cannot appear in the callee of new expressions\"); }\n\n    var computed = this.eat(types$1.bracketL);\n    if (computed || (optional && this.type !== types$1.parenL && this.type !== types$1.backQuote) || this.eat(types$1.dot)) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      if (computed) {\n        node.property = this.parseExpression();\n        this.expect(types$1.bracketR);\n      } else if (this.type === types$1.privateId && base.type !== \"Super\") {\n        node.property = this.parsePrivateIdent();\n      } else {\n        node.property = this.parseIdent(this.options.allowReserved !== \"never\");\n      }\n      node.computed = !!computed;\n      if (optionalSupported) {\n        node.optional = optional;\n      }\n      base = this.finishNode(node, \"MemberExpression\");\n    } else if (!noCalls && this.eat(types$1.parenL)) {\n      var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n      this.yieldPos = 0;\n      this.awaitPos = 0;\n      this.awaitIdentPos = 0;\n      var exprList = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);\n      if (maybeAsyncArrow && !optional && this.shouldParseAsyncArrow()) {\n        this.checkPatternErrors(refDestructuringErrors, false);\n        this.checkYieldAwaitInDefaultParams();\n        if (this.awaitIdentPos > 0)\n          { this.raise(this.awaitIdentPos, \"Cannot use 'await' as identifier inside an async function\"); }\n        this.yieldPos = oldYieldPos;\n        this.awaitPos = oldAwaitPos;\n        this.awaitIdentPos = oldAwaitIdentPos;\n        return this.parseSubscriptAsyncArrow(startPos, startLoc, exprList, forInit)\n      }\n      this.checkExpressionErrors(refDestructuringErrors, true);\n      this.yieldPos = oldYieldPos || this.yieldPos;\n      this.awaitPos = oldAwaitPos || this.awaitPos;\n      this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;\n      var node$1 = this.startNodeAt(startPos, startLoc);\n      node$1.callee = base;\n      node$1.arguments = exprList;\n      if (optionalSupported) {\n        node$1.optional = optional;\n      }\n      base = this.finishNode(node$1, \"CallExpression\");\n    } else if (this.type === types$1.backQuote) {\n      if (optional || optionalChained) {\n        this.raise(this.start, \"Optional chaining cannot appear in the tag of tagged template expressions\");\n      }\n      var node$2 = this.startNodeAt(startPos, startLoc);\n      node$2.tag = base;\n      node$2.quasi = this.parseTemplate({isTagged: true});\n      base = this.finishNode(node$2, \"TaggedTemplateExpression\");\n    }\n    return base\n  };\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  pp$5.parseExprAtom = function(refDestructuringErrors, forInit, forNew) {\n    // If a division operator appears in an expression position, the\n    // tokenizer got confused, and we force it to read a regexp instead.\n    if (this.type === types$1.slash) { this.readRegexp(); }\n\n    var node, canBeArrow = this.potentialArrowAt === this.start;\n    switch (this.type) {\n    case types$1._super:\n      if (!this.allowSuper)\n        { this.raise(this.start, \"'super' keyword outside a method\"); }\n      node = this.startNode();\n      this.next();\n      if (this.type === types$1.parenL && !this.allowDirectSuper)\n        { this.raise(node.start, \"super() call outside constructor of a subclass\"); }\n      // The `super` keyword can appear at below:\n      // SuperProperty:\n      //     super [ Expression ]\n      //     super . IdentifierName\n      // SuperCall:\n      //     super ( Arguments )\n      if (this.type !== types$1.dot && this.type !== types$1.bracketL && this.type !== types$1.parenL)\n        { this.unexpected(); }\n      return this.finishNode(node, \"Super\")\n\n    case types$1._this:\n      node = this.startNode();\n      this.next();\n      return this.finishNode(node, \"ThisExpression\")\n\n    case types$1.name:\n      var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;\n      var id = this.parseIdent(false);\n      if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === \"async\" && !this.canInsertSemicolon() && this.eat(types$1._function)) {\n        this.overrideContext(types.f_expr);\n        return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true, forInit)\n      }\n      if (canBeArrow && !this.canInsertSemicolon()) {\n        if (this.eat(types$1.arrow))\n          { return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false, forInit) }\n        if (this.options.ecmaVersion >= 8 && id.name === \"async\" && this.type === types$1.name && !containsEsc &&\n            (!this.potentialArrowInForAwait || this.value !== \"of\" || this.containsEsc)) {\n          id = this.parseIdent(false);\n          if (this.canInsertSemicolon() || !this.eat(types$1.arrow))\n            { this.unexpected(); }\n          return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true, forInit)\n        }\n      }\n      return id\n\n    case types$1.regexp:\n      var value = this.value;\n      node = this.parseLiteral(value.value);\n      node.regex = {pattern: value.pattern, flags: value.flags};\n      return node\n\n    case types$1.num: case types$1.string:\n      return this.parseLiteral(this.value)\n\n    case types$1._null: case types$1._true: case types$1._false:\n      node = this.startNode();\n      node.value = this.type === types$1._null ? null : this.type === types$1._true;\n      node.raw = this.type.keyword;\n      this.next();\n      return this.finishNode(node, \"Literal\")\n\n    case types$1.parenL:\n      var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow, forInit);\n      if (refDestructuringErrors) {\n        if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr))\n          { refDestructuringErrors.parenthesizedAssign = start; }\n        if (refDestructuringErrors.parenthesizedBind < 0)\n          { refDestructuringErrors.parenthesizedBind = start; }\n      }\n      return expr\n\n    case types$1.bracketL:\n      node = this.startNode();\n      this.next();\n      node.elements = this.parseExprList(types$1.bracketR, true, true, refDestructuringErrors);\n      return this.finishNode(node, \"ArrayExpression\")\n\n    case types$1.braceL:\n      this.overrideContext(types.b_expr);\n      return this.parseObj(false, refDestructuringErrors)\n\n    case types$1._function:\n      node = this.startNode();\n      this.next();\n      return this.parseFunction(node, 0)\n\n    case types$1._class:\n      return this.parseClass(this.startNode(), false)\n\n    case types$1._new:\n      return this.parseNew()\n\n    case types$1.backQuote:\n      return this.parseTemplate()\n\n    case types$1._import:\n      if (this.options.ecmaVersion >= 11) {\n        return this.parseExprImport(forNew)\n      } else {\n        return this.unexpected()\n      }\n\n    default:\n      return this.parseExprAtomDefault()\n    }\n  };\n\n  pp$5.parseExprAtomDefault = function() {\n    this.unexpected();\n  };\n\n  pp$5.parseExprImport = function(forNew) {\n    var node = this.startNode();\n\n    // Consume `import` as an identifier for `import.meta`.\n    // Because `this.parseIdent(true)` doesn't check escape sequences, it needs the check of `this.containsEsc`.\n    if (this.containsEsc) { this.raiseRecoverable(this.start, \"Escape sequence in keyword import\"); }\n    this.next();\n\n    if (this.type === types$1.parenL && !forNew) {\n      return this.parseDynamicImport(node)\n    } else if (this.type === types$1.dot) {\n      var meta = this.startNodeAt(node.start, node.loc && node.loc.start);\n      meta.name = \"import\";\n      node.meta = this.finishNode(meta, \"Identifier\");\n      return this.parseImportMeta(node)\n    } else {\n      this.unexpected();\n    }\n  };\n\n  pp$5.parseDynamicImport = function(node) {\n    this.next(); // skip `(`\n\n    // Parse node.source.\n    node.source = this.parseMaybeAssign();\n\n    // Verify ending.\n    if (!this.eat(types$1.parenR)) {\n      var errorPos = this.start;\n      if (this.eat(types$1.comma) && this.eat(types$1.parenR)) {\n        this.raiseRecoverable(errorPos, \"Trailing comma is not allowed in import()\");\n      } else {\n        this.unexpected(errorPos);\n      }\n    }\n\n    return this.finishNode(node, \"ImportExpression\")\n  };\n\n  pp$5.parseImportMeta = function(node) {\n    this.next(); // skip `.`\n\n    var containsEsc = this.containsEsc;\n    node.property = this.parseIdent(true);\n\n    if (node.property.name !== \"meta\")\n      { this.raiseRecoverable(node.property.start, \"The only valid meta property for import is 'import.meta'\"); }\n    if (containsEsc)\n      { this.raiseRecoverable(node.start, \"'import.meta' must not contain escaped characters\"); }\n    if (this.options.sourceType !== \"module\" && !this.options.allowImportExportEverywhere)\n      { this.raiseRecoverable(node.start, \"Cannot use 'import.meta' outside a module\"); }\n\n    return this.finishNode(node, \"MetaProperty\")\n  };\n\n  pp$5.parseLiteral = function(value) {\n    var node = this.startNode();\n    node.value = value;\n    node.raw = this.input.slice(this.start, this.end);\n    if (node.raw.charCodeAt(node.raw.length - 1) === 110) { node.bigint = node.raw.slice(0, -1).replace(/_/g, \"\"); }\n    this.next();\n    return this.finishNode(node, \"Literal\")\n  };\n\n  pp$5.parseParenExpression = function() {\n    this.expect(types$1.parenL);\n    var val = this.parseExpression();\n    this.expect(types$1.parenR);\n    return val\n  };\n\n  pp$5.shouldParseArrow = function(exprList) {\n    return !this.canInsertSemicolon()\n  };\n\n  pp$5.parseParenAndDistinguishExpression = function(canBeArrow, forInit) {\n    var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;\n    if (this.options.ecmaVersion >= 6) {\n      this.next();\n\n      var innerStartPos = this.start, innerStartLoc = this.startLoc;\n      var exprList = [], first = true, lastIsComma = false;\n      var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;\n      this.yieldPos = 0;\n      this.awaitPos = 0;\n      // Do not save awaitIdentPos to allow checking awaits nested in parameters\n      while (this.type !== types$1.parenR) {\n        first ? first = false : this.expect(types$1.comma);\n        if (allowTrailingComma && this.afterTrailingComma(types$1.parenR, true)) {\n          lastIsComma = true;\n          break\n        } else if (this.type === types$1.ellipsis) {\n          spreadStart = this.start;\n          exprList.push(this.parseParenItem(this.parseRestBinding()));\n          if (this.type === types$1.comma) {\n            this.raiseRecoverable(\n              this.start,\n              \"Comma is not permitted after the rest element\"\n            );\n          }\n          break\n        } else {\n          exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));\n        }\n      }\n      var innerEndPos = this.lastTokEnd, innerEndLoc = this.lastTokEndLoc;\n      this.expect(types$1.parenR);\n\n      if (canBeArrow && this.shouldParseArrow(exprList) && this.eat(types$1.arrow)) {\n        this.checkPatternErrors(refDestructuringErrors, false);\n        this.checkYieldAwaitInDefaultParams();\n        this.yieldPos = oldYieldPos;\n        this.awaitPos = oldAwaitPos;\n        return this.parseParenArrowList(startPos, startLoc, exprList, forInit)\n      }\n\n      if (!exprList.length || lastIsComma) { this.unexpected(this.lastTokStart); }\n      if (spreadStart) { this.unexpected(spreadStart); }\n      this.checkExpressionErrors(refDestructuringErrors, true);\n      this.yieldPos = oldYieldPos || this.yieldPos;\n      this.awaitPos = oldAwaitPos || this.awaitPos;\n\n      if (exprList.length > 1) {\n        val = this.startNodeAt(innerStartPos, innerStartLoc);\n        val.expressions = exprList;\n        this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n      } else {\n        val = exprList[0];\n      }\n    } else {\n      val = this.parseParenExpression();\n    }\n\n    if (this.options.preserveParens) {\n      var par = this.startNodeAt(startPos, startLoc);\n      par.expression = val;\n      return this.finishNode(par, \"ParenthesizedExpression\")\n    } else {\n      return val\n    }\n  };\n\n  pp$5.parseParenItem = function(item) {\n    return item\n  };\n\n  pp$5.parseParenArrowList = function(startPos, startLoc, exprList, forInit) {\n    return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, false, forInit)\n  };\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n\n  var empty = [];\n\n  pp$5.parseNew = function() {\n    if (this.containsEsc) { this.raiseRecoverable(this.start, \"Escape sequence in keyword new\"); }\n    var node = this.startNode();\n    this.next();\n    if (this.options.ecmaVersion >= 6 && this.type === types$1.dot) {\n      var meta = this.startNodeAt(node.start, node.loc && node.loc.start);\n      meta.name = \"new\";\n      node.meta = this.finishNode(meta, \"Identifier\");\n      this.next();\n      var containsEsc = this.containsEsc;\n      node.property = this.parseIdent(true);\n      if (node.property.name !== \"target\")\n        { this.raiseRecoverable(node.property.start, \"The only valid meta property for new is 'new.target'\"); }\n      if (containsEsc)\n        { this.raiseRecoverable(node.start, \"'new.target' must not contain escaped characters\"); }\n      if (!this.allowNewDotTarget)\n        { this.raiseRecoverable(node.start, \"'new.target' can only be used in functions and class static block\"); }\n      return this.finishNode(node, \"MetaProperty\")\n    }\n    var startPos = this.start, startLoc = this.startLoc;\n    node.callee = this.parseSubscripts(this.parseExprAtom(null, false, true), startPos, startLoc, true, false);\n    if (this.eat(types$1.parenL)) { node.arguments = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false); }\n    else { node.arguments = empty; }\n    return this.finishNode(node, \"NewExpression\")\n  };\n\n  // Parse template expression.\n\n  pp$5.parseTemplateElement = function(ref) {\n    var isTagged = ref.isTagged;\n\n    var elem = this.startNode();\n    if (this.type === types$1.invalidTemplate) {\n      if (!isTagged) {\n        this.raiseRecoverable(this.start, \"Bad escape sequence in untagged template literal\");\n      }\n      elem.value = {\n        raw: this.value,\n        cooked: null\n      };\n    } else {\n      elem.value = {\n        raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, \"\\n\"),\n        cooked: this.value\n      };\n    }\n    this.next();\n    elem.tail = this.type === types$1.backQuote;\n    return this.finishNode(elem, \"TemplateElement\")\n  };\n\n  pp$5.parseTemplate = function(ref) {\n    if ( ref === void 0 ) ref = {};\n    var isTagged = ref.isTagged; if ( isTagged === void 0 ) isTagged = false;\n\n    var node = this.startNode();\n    this.next();\n    node.expressions = [];\n    var curElt = this.parseTemplateElement({isTagged: isTagged});\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      if (this.type === types$1.eof) { this.raise(this.pos, \"Unterminated template literal\"); }\n      this.expect(types$1.dollarBraceL);\n      node.expressions.push(this.parseExpression());\n      this.expect(types$1.braceR);\n      node.quasis.push(curElt = this.parseTemplateElement({isTagged: isTagged}));\n    }\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\")\n  };\n\n  pp$5.isAsyncProp = function(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && prop.key.name === \"async\" &&\n      (this.type === types$1.name || this.type === types$1.num || this.type === types$1.string || this.type === types$1.bracketL || this.type.keyword || (this.options.ecmaVersion >= 9 && this.type === types$1.star)) &&\n      !lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n  };\n\n  // Parse an object literal or binding pattern.\n\n  pp$5.parseObj = function(isPattern, refDestructuringErrors) {\n    var node = this.startNode(), first = true, propHash = {};\n    node.properties = [];\n    this.next();\n    while (!this.eat(types$1.braceR)) {\n      if (!first) {\n        this.expect(types$1.comma);\n        if (this.options.ecmaVersion >= 5 && this.afterTrailingComma(types$1.braceR)) { break }\n      } else { first = false; }\n\n      var prop = this.parseProperty(isPattern, refDestructuringErrors);\n      if (!isPattern) { this.checkPropClash(prop, propHash, refDestructuringErrors); }\n      node.properties.push(prop);\n    }\n    return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\")\n  };\n\n  pp$5.parseProperty = function(isPattern, refDestructuringErrors) {\n    var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;\n    if (this.options.ecmaVersion >= 9 && this.eat(types$1.ellipsis)) {\n      if (isPattern) {\n        prop.argument = this.parseIdent(false);\n        if (this.type === types$1.comma) {\n          this.raiseRecoverable(this.start, \"Comma is not permitted after the rest element\");\n        }\n        return this.finishNode(prop, \"RestElement\")\n      }\n      // Parse argument.\n      prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n      // To disallow trailing comma via `this.toAssignable()`.\n      if (this.type === types$1.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {\n        refDestructuringErrors.trailingComma = this.start;\n      }\n      // Finish\n      return this.finishNode(prop, \"SpreadElement\")\n    }\n    if (this.options.ecmaVersion >= 6) {\n      prop.method = false;\n      prop.shorthand = false;\n      if (isPattern || refDestructuringErrors) {\n        startPos = this.start;\n        startLoc = this.startLoc;\n      }\n      if (!isPattern)\n        { isGenerator = this.eat(types$1.star); }\n    }\n    var containsEsc = this.containsEsc;\n    this.parsePropertyName(prop);\n    if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {\n      isAsync = true;\n      isGenerator = this.options.ecmaVersion >= 9 && this.eat(types$1.star);\n      this.parsePropertyName(prop);\n    } else {\n      isAsync = false;\n    }\n    this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);\n    return this.finishNode(prop, \"Property\")\n  };\n\n  pp$5.parseGetterSetter = function(prop) {\n    prop.kind = prop.key.name;\n    this.parsePropertyName(prop);\n    prop.value = this.parseMethod(false);\n    var paramCount = prop.kind === \"get\" ? 0 : 1;\n    if (prop.value.params.length !== paramCount) {\n      var start = prop.value.start;\n      if (prop.kind === \"get\")\n        { this.raiseRecoverable(start, \"getter should have no params\"); }\n      else\n        { this.raiseRecoverable(start, \"setter should have exactly one param\"); }\n    } else {\n      if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\")\n        { this.raiseRecoverable(prop.value.params[0].start, \"Setter cannot use rest params\"); }\n    }\n  };\n\n  pp$5.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {\n    if ((isGenerator || isAsync) && this.type === types$1.colon)\n      { this.unexpected(); }\n\n    if (this.eat(types$1.colon)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);\n      prop.kind = \"init\";\n    } else if (this.options.ecmaVersion >= 6 && this.type === types$1.parenL) {\n      if (isPattern) { this.unexpected(); }\n      prop.kind = \"init\";\n      prop.method = true;\n      prop.value = this.parseMethod(isGenerator, isAsync);\n    } else if (!isPattern && !containsEsc &&\n               this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" &&\n               (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n               (this.type !== types$1.comma && this.type !== types$1.braceR && this.type !== types$1.eq)) {\n      if (isGenerator || isAsync) { this.unexpected(); }\n      this.parseGetterSetter(prop);\n    } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\n      if (isGenerator || isAsync) { this.unexpected(); }\n      this.checkUnreserved(prop.key);\n      if (prop.key.name === \"await\" && !this.awaitIdentPos)\n        { this.awaitIdentPos = startPos; }\n      prop.kind = \"init\";\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));\n      } else if (this.type === types$1.eq && refDestructuringErrors) {\n        if (refDestructuringErrors.shorthandAssign < 0)\n          { refDestructuringErrors.shorthandAssign = this.start; }\n        prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));\n      } else {\n        prop.value = this.copyNode(prop.key);\n      }\n      prop.shorthand = true;\n    } else { this.unexpected(); }\n  };\n\n  pp$5.parsePropertyName = function(prop) {\n    if (this.options.ecmaVersion >= 6) {\n      if (this.eat(types$1.bracketL)) {\n        prop.computed = true;\n        prop.key = this.parseMaybeAssign();\n        this.expect(types$1.bracketR);\n        return prop.key\n      } else {\n        prop.computed = false;\n      }\n    }\n    return prop.key = this.type === types$1.num || this.type === types$1.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== \"never\")\n  };\n\n  // Initialize empty function node.\n\n  pp$5.initFunction = function(node) {\n    node.id = null;\n    if (this.options.ecmaVersion >= 6) { node.generator = node.expression = false; }\n    if (this.options.ecmaVersion >= 8) { node.async = false; }\n  };\n\n  // Parse object or class method.\n\n  pp$5.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {\n    var node = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n\n    this.initFunction(node);\n    if (this.options.ecmaVersion >= 6)\n      { node.generator = isGenerator; }\n    if (this.options.ecmaVersion >= 8)\n      { node.async = !!isAsync; }\n\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    this.awaitIdentPos = 0;\n    this.enterScope(functionFlags(isAsync, node.generator) | SCOPE_SUPER | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n\n    this.expect(types$1.parenL);\n    node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8);\n    this.checkYieldAwaitInDefaultParams();\n    this.parseFunctionBody(node, false, true, false);\n\n    this.yieldPos = oldYieldPos;\n    this.awaitPos = oldAwaitPos;\n    this.awaitIdentPos = oldAwaitIdentPos;\n    return this.finishNode(node, \"FunctionExpression\")\n  };\n\n  // Parse arrow function expression with given parameters.\n\n  pp$5.parseArrowExpression = function(node, params, isAsync, forInit) {\n    var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n\n    this.enterScope(functionFlags(isAsync, false) | SCOPE_ARROW);\n    this.initFunction(node);\n    if (this.options.ecmaVersion >= 8) { node.async = !!isAsync; }\n\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    this.awaitIdentPos = 0;\n\n    node.params = this.toAssignableList(params, true);\n    this.parseFunctionBody(node, true, false, forInit);\n\n    this.yieldPos = oldYieldPos;\n    this.awaitPos = oldAwaitPos;\n    this.awaitIdentPos = oldAwaitIdentPos;\n    return this.finishNode(node, \"ArrowFunctionExpression\")\n  };\n\n  // Parse function body and check parameters.\n\n  pp$5.parseFunctionBody = function(node, isArrowFunction, isMethod, forInit) {\n    var isExpression = isArrowFunction && this.type !== types$1.braceL;\n    var oldStrict = this.strict, useStrict = false;\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign(forInit);\n      node.expression = true;\n      this.checkParams(node, false);\n    } else {\n      var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);\n      if (!oldStrict || nonSimple) {\n        useStrict = this.strictDirective(this.end);\n        // If this is a strict mode function, verify that argument names\n        // are not repeated, and it does not try to bind the words `eval`\n        // or `arguments`.\n        if (useStrict && nonSimple)\n          { this.raiseRecoverable(node.start, \"Illegal 'use strict' directive in function with non-simple parameter list\"); }\n      }\n      // Start a new scope with regard to labels and the `inFunction`\n      // flag (restore them to their old value afterwards).\n      var oldLabels = this.labels;\n      this.labels = [];\n      if (useStrict) { this.strict = true; }\n\n      // Add the params to varDeclaredNames to ensure that an error is thrown\n      // if a let/const declaration in the function clashes with one of the params.\n      this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params));\n      // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n      if (this.strict && node.id) { this.checkLValSimple(node.id, BIND_OUTSIDE); }\n      node.body = this.parseBlock(false, undefined, useStrict && !oldStrict);\n      node.expression = false;\n      this.adaptDirectivePrologue(node.body.body);\n      this.labels = oldLabels;\n    }\n    this.exitScope();\n  };\n\n  pp$5.isSimpleParamList = function(params) {\n    for (var i = 0, list = params; i < list.length; i += 1)\n      {\n      var param = list[i];\n\n      if (param.type !== \"Identifier\") { return false\n    } }\n    return true\n  };\n\n  // Checks function params for various disallowed patterns such as using \"eval\"\n  // or \"arguments\" and duplicate parameters.\n\n  pp$5.checkParams = function(node, allowDuplicates) {\n    var nameHash = Object.create(null);\n    for (var i = 0, list = node.params; i < list.length; i += 1)\n      {\n      var param = list[i];\n\n      this.checkLValInnerPattern(param, BIND_VAR, allowDuplicates ? null : nameHash);\n    }\n  };\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  pp$5.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {\n    var elts = [], first = true;\n    while (!this.eat(close)) {\n      if (!first) {\n        this.expect(types$1.comma);\n        if (allowTrailingComma && this.afterTrailingComma(close)) { break }\n      } else { first = false; }\n\n      var elt = (void 0);\n      if (allowEmpty && this.type === types$1.comma)\n        { elt = null; }\n      else if (this.type === types$1.ellipsis) {\n        elt = this.parseSpread(refDestructuringErrors);\n        if (refDestructuringErrors && this.type === types$1.comma && refDestructuringErrors.trailingComma < 0)\n          { refDestructuringErrors.trailingComma = this.start; }\n      } else {\n        elt = this.parseMaybeAssign(false, refDestructuringErrors);\n      }\n      elts.push(elt);\n    }\n    return elts\n  };\n\n  pp$5.checkUnreserved = function(ref) {\n    var start = ref.start;\n    var end = ref.end;\n    var name = ref.name;\n\n    if (this.inGenerator && name === \"yield\")\n      { this.raiseRecoverable(start, \"Cannot use 'yield' as identifier inside a generator\"); }\n    if (this.inAsync && name === \"await\")\n      { this.raiseRecoverable(start, \"Cannot use 'await' as identifier inside an async function\"); }\n    if (this.currentThisScope().inClassFieldInit && name === \"arguments\")\n      { this.raiseRecoverable(start, \"Cannot use 'arguments' in class field initializer\"); }\n    if (this.inClassStaticBlock && (name === \"arguments\" || name === \"await\"))\n      { this.raise(start, (\"Cannot use \" + name + \" in class static initialization block\")); }\n    if (this.keywords.test(name))\n      { this.raise(start, (\"Unexpected keyword '\" + name + \"'\")); }\n    if (this.options.ecmaVersion < 6 &&\n      this.input.slice(start, end).indexOf(\"\\\\\") !== -1) { return }\n    var re = this.strict ? this.reservedWordsStrict : this.reservedWords;\n    if (re.test(name)) {\n      if (!this.inAsync && name === \"await\")\n        { this.raiseRecoverable(start, \"Cannot use keyword 'await' outside an async function\"); }\n      this.raiseRecoverable(start, (\"The keyword '\" + name + \"' is reserved\"));\n    }\n  };\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n\n  pp$5.parseIdent = function(liberal) {\n    var node = this.parseIdentNode();\n    this.next(!!liberal);\n    this.finishNode(node, \"Identifier\");\n    if (!liberal) {\n      this.checkUnreserved(node);\n      if (node.name === \"await\" && !this.awaitIdentPos)\n        { this.awaitIdentPos = node.start; }\n    }\n    return node\n  };\n\n  pp$5.parseIdentNode = function() {\n    var node = this.startNode();\n    if (this.type === types$1.name) {\n      node.name = this.value;\n    } else if (this.type.keyword) {\n      node.name = this.type.keyword;\n\n      // To fix https://github.com/acornjs/acorn/issues/575\n      // `class` and `function` keywords push new context into this.context.\n      // But there is no chance to pop the context if the keyword is consumed as an identifier such as a property name.\n      // If the previous token is a dot, this does not apply because the context-managing code already ignored the keyword\n      if ((node.name === \"class\" || node.name === \"function\") &&\n        (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {\n        this.context.pop();\n      }\n      this.type = types$1.name;\n    } else {\n      this.unexpected();\n    }\n    return node\n  };\n\n  pp$5.parsePrivateIdent = function() {\n    var node = this.startNode();\n    if (this.type === types$1.privateId) {\n      node.name = this.value;\n    } else {\n      this.unexpected();\n    }\n    this.next();\n    this.finishNode(node, \"PrivateIdentifier\");\n\n    // For validating existence\n    if (this.options.checkPrivateFields) {\n      if (this.privateNameStack.length === 0) {\n        this.raise(node.start, (\"Private field '#\" + (node.name) + \"' must be declared in an enclosing class\"));\n      } else {\n        this.privateNameStack[this.privateNameStack.length - 1].used.push(node);\n      }\n    }\n\n    return node\n  };\n\n  // Parses yield expression inside generator.\n\n  pp$5.parseYield = function(forInit) {\n    if (!this.yieldPos) { this.yieldPos = this.start; }\n\n    var node = this.startNode();\n    this.next();\n    if (this.type === types$1.semi || this.canInsertSemicolon() || (this.type !== types$1.star && !this.type.startsExpr)) {\n      node.delegate = false;\n      node.argument = null;\n    } else {\n      node.delegate = this.eat(types$1.star);\n      node.argument = this.parseMaybeAssign(forInit);\n    }\n    return this.finishNode(node, \"YieldExpression\")\n  };\n\n  pp$5.parseAwait = function(forInit) {\n    if (!this.awaitPos) { this.awaitPos = this.start; }\n\n    var node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeUnary(null, true, false, forInit);\n    return this.finishNode(node, \"AwaitExpression\")\n  };\n\n  var pp$4 = Parser.prototype;\n\n  // This function is used to raise exceptions on parse errors. It\n  // takes an offset integer (into the current `input`) to indicate\n  // the location of the error, attaches the position to the end\n  // of the error message, and then raises a `SyntaxError` with that\n  // message.\n\n  pp$4.raise = function(pos, message) {\n    var loc = getLineInfo(this.input, pos);\n    message += \" (\" + loc.line + \":\" + loc.column + \")\";\n    var err = new SyntaxError(message);\n    err.pos = pos; err.loc = loc; err.raisedAt = this.pos;\n    throw err\n  };\n\n  pp$4.raiseRecoverable = pp$4.raise;\n\n  pp$4.curPosition = function() {\n    if (this.options.locations) {\n      return new Position(this.curLine, this.pos - this.lineStart)\n    }\n  };\n\n  var pp$3 = Parser.prototype;\n\n  var Scope = function Scope(flags) {\n    this.flags = flags;\n    // A list of var-declared names in the current lexical scope\n    this.var = [];\n    // A list of lexically-declared names in the current lexical scope\n    this.lexical = [];\n    // A list of lexically-declared FunctionDeclaration names in the current lexical scope\n    this.functions = [];\n    // A switch to disallow the identifier reference 'arguments'\n    this.inClassFieldInit = false;\n  };\n\n  // The functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.\n\n  pp$3.enterScope = function(flags) {\n    this.scopeStack.push(new Scope(flags));\n  };\n\n  pp$3.exitScope = function() {\n    this.scopeStack.pop();\n  };\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  pp$3.treatFunctionsAsVarInScope = function(scope) {\n    return (scope.flags & SCOPE_FUNCTION) || !this.inModule && (scope.flags & SCOPE_TOP)\n  };\n\n  pp$3.declareName = function(name, bindingType, pos) {\n    var redeclared = false;\n    if (bindingType === BIND_LEXICAL) {\n      var scope = this.currentScope();\n      redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;\n      scope.lexical.push(name);\n      if (this.inModule && (scope.flags & SCOPE_TOP))\n        { delete this.undefinedExports[name]; }\n    } else if (bindingType === BIND_SIMPLE_CATCH) {\n      var scope$1 = this.currentScope();\n      scope$1.lexical.push(name);\n    } else if (bindingType === BIND_FUNCTION) {\n      var scope$2 = this.currentScope();\n      if (this.treatFunctionsAsVar)\n        { redeclared = scope$2.lexical.indexOf(name) > -1; }\n      else\n        { redeclared = scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1; }\n      scope$2.functions.push(name);\n    } else {\n      for (var i = this.scopeStack.length - 1; i >= 0; --i) {\n        var scope$3 = this.scopeStack[i];\n        if (scope$3.lexical.indexOf(name) > -1 && !((scope$3.flags & SCOPE_SIMPLE_CATCH) && scope$3.lexical[0] === name) ||\n            !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {\n          redeclared = true;\n          break\n        }\n        scope$3.var.push(name);\n        if (this.inModule && (scope$3.flags & SCOPE_TOP))\n          { delete this.undefinedExports[name]; }\n        if (scope$3.flags & SCOPE_VAR) { break }\n      }\n    }\n    if (redeclared) { this.raiseRecoverable(pos, (\"Identifier '\" + name + \"' has already been declared\")); }\n  };\n\n  pp$3.checkLocalExport = function(id) {\n    // scope.functions must be empty as Module code is always strict.\n    if (this.scopeStack[0].lexical.indexOf(id.name) === -1 &&\n        this.scopeStack[0].var.indexOf(id.name) === -1) {\n      this.undefinedExports[id.name] = id;\n    }\n  };\n\n  pp$3.currentScope = function() {\n    return this.scopeStack[this.scopeStack.length - 1]\n  };\n\n  pp$3.currentVarScope = function() {\n    for (var i = this.scopeStack.length - 1;; i--) {\n      var scope = this.scopeStack[i];\n      if (scope.flags & SCOPE_VAR) { return scope }\n    }\n  };\n\n  // Could be useful for `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  pp$3.currentThisScope = function() {\n    for (var i = this.scopeStack.length - 1;; i--) {\n      var scope = this.scopeStack[i];\n      if (scope.flags & SCOPE_VAR && !(scope.flags & SCOPE_ARROW)) { return scope }\n    }\n  };\n\n  var Node = function Node(parser, pos, loc) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    if (parser.options.locations)\n      { this.loc = new SourceLocation(parser, loc); }\n    if (parser.options.directSourceFile)\n      { this.sourceFile = parser.options.directSourceFile; }\n    if (parser.options.ranges)\n      { this.range = [pos, 0]; }\n  };\n\n  // Start an AST node, attaching a start offset.\n\n  var pp$2 = Parser.prototype;\n\n  pp$2.startNode = function() {\n    return new Node(this, this.start, this.startLoc)\n  };\n\n  pp$2.startNodeAt = function(pos, loc) {\n    return new Node(this, pos, loc)\n  };\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  function finishNodeAt(node, type, pos, loc) {\n    node.type = type;\n    node.end = pos;\n    if (this.options.locations)\n      { node.loc.end = loc; }\n    if (this.options.ranges)\n      { node.range[1] = pos; }\n    return node\n  }\n\n  pp$2.finishNode = function(node, type) {\n    return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)\n  };\n\n  // Finish node at given position\n\n  pp$2.finishNodeAt = function(node, type, pos, loc) {\n    return finishNodeAt.call(this, node, type, pos, loc)\n  };\n\n  pp$2.copyNode = function(node) {\n    var newNode = new Node(this, node.start, this.startLoc);\n    for (var prop in node) { newNode[prop] = node[prop]; }\n    return newNode\n  };\n\n  // This file contains Unicode properties extracted from the ECMAScript specification.\n  // The lists are extracted like so:\n  // $$('#table-binary-unicode-properties > figure > table > tbody > tr > td:nth-child(1) code').map(el => el.innerText)\n\n  // #table-binary-unicode-properties\n  var ecma9BinaryProperties = \"ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS\";\n  var ecma10BinaryProperties = ecma9BinaryProperties + \" Extended_Pictographic\";\n  var ecma11BinaryProperties = ecma10BinaryProperties;\n  var ecma12BinaryProperties = ecma11BinaryProperties + \" EBase EComp EMod EPres ExtPict\";\n  var ecma13BinaryProperties = ecma12BinaryProperties;\n  var ecma14BinaryProperties = ecma13BinaryProperties;\n\n  var unicodeBinaryProperties = {\n    9: ecma9BinaryProperties,\n    10: ecma10BinaryProperties,\n    11: ecma11BinaryProperties,\n    12: ecma12BinaryProperties,\n    13: ecma13BinaryProperties,\n    14: ecma14BinaryProperties\n  };\n\n  // #table-binary-unicode-properties-of-strings\n  var ecma14BinaryPropertiesOfStrings = \"Basic_Emoji Emoji_Keycap_Sequence RGI_Emoji_Modifier_Sequence RGI_Emoji_Flag_Sequence RGI_Emoji_Tag_Sequence RGI_Emoji_ZWJ_Sequence RGI_Emoji\";\n\n  var unicodeBinaryPropertiesOfStrings = {\n    9: \"\",\n    10: \"\",\n    11: \"\",\n    12: \"\",\n    13: \"\",\n    14: ecma14BinaryPropertiesOfStrings\n  };\n\n  // #table-unicode-general-category-values\n  var unicodeGeneralCategoryValues = \"Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu\";\n\n  // #table-unicode-script-values\n  var ecma9ScriptValues = \"Adlam Adlm Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb\";\n  var ecma10ScriptValues = ecma9ScriptValues + \" Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd\";\n  var ecma11ScriptValues = ecma10ScriptValues + \" Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho\";\n  var ecma12ScriptValues = ecma11ScriptValues + \" Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi\";\n  var ecma13ScriptValues = ecma12ScriptValues + \" Cypro_Minoan Cpmn Old_Uyghur Ougr Tangsa Tnsa Toto Vithkuqi Vith\";\n  var ecma14ScriptValues = ecma13ScriptValues + \" Hrkt Katakana_Or_Hiragana Kawi Nag_Mundari Nagm Unknown Zzzz\";\n\n  var unicodeScriptValues = {\n    9: ecma9ScriptValues,\n    10: ecma10ScriptValues,\n    11: ecma11ScriptValues,\n    12: ecma12ScriptValues,\n    13: ecma13ScriptValues,\n    14: ecma14ScriptValues\n  };\n\n  var data = {};\n  function buildUnicodeData(ecmaVersion) {\n    var d = data[ecmaVersion] = {\n      binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + \" \" + unicodeGeneralCategoryValues),\n      binaryOfStrings: wordsRegexp(unicodeBinaryPropertiesOfStrings[ecmaVersion]),\n      nonBinary: {\n        General_Category: wordsRegexp(unicodeGeneralCategoryValues),\n        Script: wordsRegexp(unicodeScriptValues[ecmaVersion])\n      }\n    };\n    d.nonBinary.Script_Extensions = d.nonBinary.Script;\n\n    d.nonBinary.gc = d.nonBinary.General_Category;\n    d.nonBinary.sc = d.nonBinary.Script;\n    d.nonBinary.scx = d.nonBinary.Script_Extensions;\n  }\n\n  for (var i = 0, list = [9, 10, 11, 12, 13, 14]; i < list.length; i += 1) {\n    var ecmaVersion = list[i];\n\n    buildUnicodeData(ecmaVersion);\n  }\n\n  var pp$1 = Parser.prototype;\n\n  var RegExpValidationState = function RegExpValidationState(parser) {\n    this.parser = parser;\n    this.validFlags = \"gim\" + (parser.options.ecmaVersion >= 6 ? \"uy\" : \"\") + (parser.options.ecmaVersion >= 9 ? \"s\" : \"\") + (parser.options.ecmaVersion >= 13 ? \"d\" : \"\") + (parser.options.ecmaVersion >= 15 ? \"v\" : \"\");\n    this.unicodeProperties = data[parser.options.ecmaVersion >= 14 ? 14 : parser.options.ecmaVersion];\n    this.source = \"\";\n    this.flags = \"\";\n    this.start = 0;\n    this.switchU = false;\n    this.switchV = false;\n    this.switchN = false;\n    this.pos = 0;\n    this.lastIntValue = 0;\n    this.lastStringValue = \"\";\n    this.lastAssertionIsQuantifiable = false;\n    this.numCapturingParens = 0;\n    this.maxBackReference = 0;\n    this.groupNames = [];\n    this.backReferenceNames = [];\n  };\n\n  RegExpValidationState.prototype.reset = function reset (start, pattern, flags) {\n    var unicodeSets = flags.indexOf(\"v\") !== -1;\n    var unicode = flags.indexOf(\"u\") !== -1;\n    this.start = start | 0;\n    this.source = pattern + \"\";\n    this.flags = flags;\n    if (unicodeSets && this.parser.options.ecmaVersion >= 15) {\n      this.switchU = true;\n      this.switchV = true;\n      this.switchN = true;\n    } else {\n      this.switchU = unicode && this.parser.options.ecmaVersion >= 6;\n      this.switchV = false;\n      this.switchN = unicode && this.parser.options.ecmaVersion >= 9;\n    }\n  };\n\n  RegExpValidationState.prototype.raise = function raise (message) {\n    this.parser.raiseRecoverable(this.start, (\"Invalid regular expression: /\" + (this.source) + \"/: \" + message));\n  };\n\n  // If u flag is given, this returns the code point at the index (it combines a surrogate pair).\n  // Otherwise, this returns the code unit of the index (can be a part of a surrogate pair).\n  RegExpValidationState.prototype.at = function at (i, forceU) {\n      if ( forceU === void 0 ) forceU = false;\n\n    var s = this.source;\n    var l = s.length;\n    if (i >= l) {\n      return -1\n    }\n    var c = s.charCodeAt(i);\n    if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {\n      return c\n    }\n    var next = s.charCodeAt(i + 1);\n    return next >= 0xDC00 && next <= 0xDFFF ? (c << 10) + next - 0x35FDC00 : c\n  };\n\n  RegExpValidationState.prototype.nextIndex = function nextIndex (i, forceU) {\n      if ( forceU === void 0 ) forceU = false;\n\n    var s = this.source;\n    var l = s.length;\n    if (i >= l) {\n      return l\n    }\n    var c = s.charCodeAt(i), next;\n    if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l ||\n        (next = s.charCodeAt(i + 1)) < 0xDC00 || next > 0xDFFF) {\n      return i + 1\n    }\n    return i + 2\n  };\n\n  RegExpValidationState.prototype.current = function current (forceU) {\n      if ( forceU === void 0 ) forceU = false;\n\n    return this.at(this.pos, forceU)\n  };\n\n  RegExpValidationState.prototype.lookahead = function lookahead (forceU) {\n      if ( forceU === void 0 ) forceU = false;\n\n    return this.at(this.nextIndex(this.pos, forceU), forceU)\n  };\n\n  RegExpValidationState.prototype.advance = function advance (forceU) {\n      if ( forceU === void 0 ) forceU = false;\n\n    this.pos = this.nextIndex(this.pos, forceU);\n  };\n\n  RegExpValidationState.prototype.eat = function eat (ch, forceU) {\n      if ( forceU === void 0 ) forceU = false;\n\n    if (this.current(forceU) === ch) {\n      this.advance(forceU);\n      return true\n    }\n    return false\n  };\n\n  RegExpValidationState.prototype.eatChars = function eatChars (chs, forceU) {\n      if ( forceU === void 0 ) forceU = false;\n\n    var pos = this.pos;\n    for (var i = 0, list = chs; i < list.length; i += 1) {\n      var ch = list[i];\n\n        var current = this.at(pos, forceU);\n      if (current === -1 || current !== ch) {\n        return false\n      }\n      pos = this.nextIndex(pos, forceU);\n    }\n    this.pos = pos;\n    return true\n  };\n\n  /**\n   * Validate the flags part of a given RegExpLiteral.\n   *\n   * @param {RegExpValidationState} state The state to validate RegExp.\n   * @returns {void}\n   */\n  pp$1.validateRegExpFlags = function(state) {\n    var validFlags = state.validFlags;\n    var flags = state.flags;\n\n    var u = false;\n    var v = false;\n\n    for (var i = 0; i < flags.length; i++) {\n      var flag = flags.charAt(i);\n      if (validFlags.indexOf(flag) === -1) {\n        this.raise(state.start, \"Invalid regular expression flag\");\n      }\n      if (flags.indexOf(flag, i + 1) > -1) {\n        this.raise(state.start, \"Duplicate regular expression flag\");\n      }\n      if (flag === \"u\") { u = true; }\n      if (flag === \"v\") { v = true; }\n    }\n    if (this.options.ecmaVersion >= 15 && u && v) {\n      this.raise(state.start, \"Invalid regular expression flag\");\n    }\n  };\n\n  /**\n   * Validate the pattern part of a given RegExpLiteral.\n   *\n   * @param {RegExpValidationState} state The state to validate RegExp.\n   * @returns {void}\n   */\n  pp$1.validateRegExpPattern = function(state) {\n    this.regexp_pattern(state);\n\n    // The goal symbol for the parse is |Pattern[~U, ~N]|. If the result of\n    // parsing contains a |GroupName|, reparse with the goal symbol\n    // |Pattern[~U, +N]| and use this result instead. Throw a *SyntaxError*\n    // exception if _P_ did not conform to the grammar, if any elements of _P_\n    // were not matched by the parse, or if any Early Error conditions exist.\n    if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {\n      state.switchN = true;\n      this.regexp_pattern(state);\n    }\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-Pattern\n  pp$1.regexp_pattern = function(state) {\n    state.pos = 0;\n    state.lastIntValue = 0;\n    state.lastStringValue = \"\";\n    state.lastAssertionIsQuantifiable = false;\n    state.numCapturingParens = 0;\n    state.maxBackReference = 0;\n    state.groupNames.length = 0;\n    state.backReferenceNames.length = 0;\n\n    this.regexp_disjunction(state);\n\n    if (state.pos !== state.source.length) {\n      // Make the same messages as V8.\n      if (state.eat(0x29 /* ) */)) {\n        state.raise(\"Unmatched ')'\");\n      }\n      if (state.eat(0x5D /* ] */) || state.eat(0x7D /* } */)) {\n        state.raise(\"Lone quantifier brackets\");\n      }\n    }\n    if (state.maxBackReference > state.numCapturingParens) {\n      state.raise(\"Invalid escape\");\n    }\n    for (var i = 0, list = state.backReferenceNames; i < list.length; i += 1) {\n      var name = list[i];\n\n      if (state.groupNames.indexOf(name) === -1) {\n        state.raise(\"Invalid named capture referenced\");\n      }\n    }\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-Disjunction\n  pp$1.regexp_disjunction = function(state) {\n    this.regexp_alternative(state);\n    while (state.eat(0x7C /* | */)) {\n      this.regexp_alternative(state);\n    }\n\n    // Make the same message as V8.\n    if (this.regexp_eatQuantifier(state, true)) {\n      state.raise(\"Nothing to repeat\");\n    }\n    if (state.eat(0x7B /* { */)) {\n      state.raise(\"Lone quantifier brackets\");\n    }\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-Alternative\n  pp$1.regexp_alternative = function(state) {\n    while (state.pos < state.source.length && this.regexp_eatTerm(state))\n      { }\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Term\n  pp$1.regexp_eatTerm = function(state) {\n    if (this.regexp_eatAssertion(state)) {\n      // Handle `QuantifiableAssertion Quantifier` alternative.\n      // `state.lastAssertionIsQuantifiable` is true if the last eaten Assertion\n      // is a QuantifiableAssertion.\n      if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {\n        // Make the same message as V8.\n        if (state.switchU) {\n          state.raise(\"Invalid quantifier\");\n        }\n      }\n      return true\n    }\n\n    if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {\n      this.regexp_eatQuantifier(state);\n      return true\n    }\n\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Assertion\n  pp$1.regexp_eatAssertion = function(state) {\n    var start = state.pos;\n    state.lastAssertionIsQuantifiable = false;\n\n    // ^, $\n    if (state.eat(0x5E /* ^ */) || state.eat(0x24 /* $ */)) {\n      return true\n    }\n\n    // \\b \\B\n    if (state.eat(0x5C /* \\ */)) {\n      if (state.eat(0x42 /* B */) || state.eat(0x62 /* b */)) {\n        return true\n      }\n      state.pos = start;\n    }\n\n    // Lookahead / Lookbehind\n    if (state.eat(0x28 /* ( */) && state.eat(0x3F /* ? */)) {\n      var lookbehind = false;\n      if (this.options.ecmaVersion >= 9) {\n        lookbehind = state.eat(0x3C /* < */);\n      }\n      if (state.eat(0x3D /* = */) || state.eat(0x21 /* ! */)) {\n        this.regexp_disjunction(state);\n        if (!state.eat(0x29 /* ) */)) {\n          state.raise(\"Unterminated group\");\n        }\n        state.lastAssertionIsQuantifiable = !lookbehind;\n        return true\n      }\n    }\n\n    state.pos = start;\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-Quantifier\n  pp$1.regexp_eatQuantifier = function(state, noError) {\n    if ( noError === void 0 ) noError = false;\n\n    if (this.regexp_eatQuantifierPrefix(state, noError)) {\n      state.eat(0x3F /* ? */);\n      return true\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefix\n  pp$1.regexp_eatQuantifierPrefix = function(state, noError) {\n    return (\n      state.eat(0x2A /* * */) ||\n      state.eat(0x2B /* + */) ||\n      state.eat(0x3F /* ? */) ||\n      this.regexp_eatBracedQuantifier(state, noError)\n    )\n  };\n  pp$1.regexp_eatBracedQuantifier = function(state, noError) {\n    var start = state.pos;\n    if (state.eat(0x7B /* { */)) {\n      var min = 0, max = -1;\n      if (this.regexp_eatDecimalDigits(state)) {\n        min = state.lastIntValue;\n        if (state.eat(0x2C /* , */) && this.regexp_eatDecimalDigits(state)) {\n          max = state.lastIntValue;\n        }\n        if (state.eat(0x7D /* } */)) {\n          // SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-term\n          if (max !== -1 && max < min && !noError) {\n            state.raise(\"numbers out of order in {} quantifier\");\n          }\n          return true\n        }\n      }\n      if (state.switchU && !noError) {\n        state.raise(\"Incomplete quantifier\");\n      }\n      state.pos = start;\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-Atom\n  pp$1.regexp_eatAtom = function(state) {\n    return (\n      this.regexp_eatPatternCharacters(state) ||\n      state.eat(0x2E /* . */) ||\n      this.regexp_eatReverseSolidusAtomEscape(state) ||\n      this.regexp_eatCharacterClass(state) ||\n      this.regexp_eatUncapturingGroup(state) ||\n      this.regexp_eatCapturingGroup(state)\n    )\n  };\n  pp$1.regexp_eatReverseSolidusAtomEscape = function(state) {\n    var start = state.pos;\n    if (state.eat(0x5C /* \\ */)) {\n      if (this.regexp_eatAtomEscape(state)) {\n        return true\n      }\n      state.pos = start;\n    }\n    return false\n  };\n  pp$1.regexp_eatUncapturingGroup = function(state) {\n    var start = state.pos;\n    if (state.eat(0x28 /* ( */)) {\n      if (state.eat(0x3F /* ? */) && state.eat(0x3A /* : */)) {\n        this.regexp_disjunction(state);\n        if (state.eat(0x29 /* ) */)) {\n          return true\n        }\n        state.raise(\"Unterminated group\");\n      }\n      state.pos = start;\n    }\n    return false\n  };\n  pp$1.regexp_eatCapturingGroup = function(state) {\n    if (state.eat(0x28 /* ( */)) {\n      if (this.options.ecmaVersion >= 9) {\n        this.regexp_groupSpecifier(state);\n      } else if (state.current() === 0x3F /* ? */) {\n        state.raise(\"Invalid group\");\n      }\n      this.regexp_disjunction(state);\n      if (state.eat(0x29 /* ) */)) {\n        state.numCapturingParens += 1;\n        return true\n      }\n      state.raise(\"Unterminated group\");\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedAtom\n  pp$1.regexp_eatExtendedAtom = function(state) {\n    return (\n      state.eat(0x2E /* . */) ||\n      this.regexp_eatReverseSolidusAtomEscape(state) ||\n      this.regexp_eatCharacterClass(state) ||\n      this.regexp_eatUncapturingGroup(state) ||\n      this.regexp_eatCapturingGroup(state) ||\n      this.regexp_eatInvalidBracedQuantifier(state) ||\n      this.regexp_eatExtendedPatternCharacter(state)\n    )\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-InvalidBracedQuantifier\n  pp$1.regexp_eatInvalidBracedQuantifier = function(state) {\n    if (this.regexp_eatBracedQuantifier(state, true)) {\n      state.raise(\"Nothing to repeat\");\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacter\n  pp$1.regexp_eatSyntaxCharacter = function(state) {\n    var ch = state.current();\n    if (isSyntaxCharacter(ch)) {\n      state.lastIntValue = ch;\n      state.advance();\n      return true\n    }\n    return false\n  };\n  function isSyntaxCharacter(ch) {\n    return (\n      ch === 0x24 /* $ */ ||\n      ch >= 0x28 /* ( */ && ch <= 0x2B /* + */ ||\n      ch === 0x2E /* . */ ||\n      ch === 0x3F /* ? */ ||\n      ch >= 0x5B /* [ */ && ch <= 0x5E /* ^ */ ||\n      ch >= 0x7B /* { */ && ch <= 0x7D /* } */\n    )\n  }\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter\n  // But eat eager.\n  pp$1.regexp_eatPatternCharacters = function(state) {\n    var start = state.pos;\n    var ch = 0;\n    while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {\n      state.advance();\n    }\n    return state.pos !== start\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedPatternCharacter\n  pp$1.regexp_eatExtendedPatternCharacter = function(state) {\n    var ch = state.current();\n    if (\n      ch !== -1 &&\n      ch !== 0x24 /* $ */ &&\n      !(ch >= 0x28 /* ( */ && ch <= 0x2B /* + */) &&\n      ch !== 0x2E /* . */ &&\n      ch !== 0x3F /* ? */ &&\n      ch !== 0x5B /* [ */ &&\n      ch !== 0x5E /* ^ */ &&\n      ch !== 0x7C /* | */\n    ) {\n      state.advance();\n      return true\n    }\n    return false\n  };\n\n  // GroupSpecifier ::\n  //   [empty]\n  //   `?` GroupName\n  pp$1.regexp_groupSpecifier = function(state) {\n    if (state.eat(0x3F /* ? */)) {\n      if (this.regexp_eatGroupName(state)) {\n        if (state.groupNames.indexOf(state.lastStringValue) !== -1) {\n          state.raise(\"Duplicate capture group name\");\n        }\n        state.groupNames.push(state.lastStringValue);\n        return\n      }\n      state.raise(\"Invalid group\");\n    }\n  };\n\n  // GroupName ::\n  //   `<` RegExpIdentifierName `>`\n  // Note: this updates `state.lastStringValue` property with the eaten name.\n  pp$1.regexp_eatGroupName = function(state) {\n    state.lastStringValue = \"\";\n    if (state.eat(0x3C /* < */)) {\n      if (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3E /* > */)) {\n        return true\n      }\n      state.raise(\"Invalid capture group name\");\n    }\n    return false\n  };\n\n  // RegExpIdentifierName ::\n  //   RegExpIdentifierStart\n  //   RegExpIdentifierName RegExpIdentifierPart\n  // Note: this updates `state.lastStringValue` property with the eaten name.\n  pp$1.regexp_eatRegExpIdentifierName = function(state) {\n    state.lastStringValue = \"\";\n    if (this.regexp_eatRegExpIdentifierStart(state)) {\n      state.lastStringValue += codePointToString(state.lastIntValue);\n      while (this.regexp_eatRegExpIdentifierPart(state)) {\n        state.lastStringValue += codePointToString(state.lastIntValue);\n      }\n      return true\n    }\n    return false\n  };\n\n  // RegExpIdentifierStart ::\n  //   UnicodeIDStart\n  //   `$`\n  //   `_`\n  //   `\\` RegExpUnicodeEscapeSequence[+U]\n  pp$1.regexp_eatRegExpIdentifierStart = function(state) {\n    var start = state.pos;\n    var forceU = this.options.ecmaVersion >= 11;\n    var ch = state.current(forceU);\n    state.advance(forceU);\n\n    if (ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {\n      ch = state.lastIntValue;\n    }\n    if (isRegExpIdentifierStart(ch)) {\n      state.lastIntValue = ch;\n      return true\n    }\n\n    state.pos = start;\n    return false\n  };\n  function isRegExpIdentifierStart(ch) {\n    return isIdentifierStart(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */\n  }\n\n  // RegExpIdentifierPart ::\n  //   UnicodeIDContinue\n  //   `$`\n  //   `_`\n  //   `\\` RegExpUnicodeEscapeSequence[+U]\n  //   <ZWNJ>\n  //   <ZWJ>\n  pp$1.regexp_eatRegExpIdentifierPart = function(state) {\n    var start = state.pos;\n    var forceU = this.options.ecmaVersion >= 11;\n    var ch = state.current(forceU);\n    state.advance(forceU);\n\n    if (ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {\n      ch = state.lastIntValue;\n    }\n    if (isRegExpIdentifierPart(ch)) {\n      state.lastIntValue = ch;\n      return true\n    }\n\n    state.pos = start;\n    return false\n  };\n  function isRegExpIdentifierPart(ch) {\n    return isIdentifierChar(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */ || ch === 0x200C /* <ZWNJ> */ || ch === 0x200D /* <ZWJ> */\n  }\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-AtomEscape\n  pp$1.regexp_eatAtomEscape = function(state) {\n    if (\n      this.regexp_eatBackReference(state) ||\n      this.regexp_eatCharacterClassEscape(state) ||\n      this.regexp_eatCharacterEscape(state) ||\n      (state.switchN && this.regexp_eatKGroupName(state))\n    ) {\n      return true\n    }\n    if (state.switchU) {\n      // Make the same message as V8.\n      if (state.current() === 0x63 /* c */) {\n        state.raise(\"Invalid unicode escape\");\n      }\n      state.raise(\"Invalid escape\");\n    }\n    return false\n  };\n  pp$1.regexp_eatBackReference = function(state) {\n    var start = state.pos;\n    if (this.regexp_eatDecimalEscape(state)) {\n      var n = state.lastIntValue;\n      if (state.switchU) {\n        // For SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-atomescape\n        if (n > state.maxBackReference) {\n          state.maxBackReference = n;\n        }\n        return true\n      }\n      if (n <= state.numCapturingParens) {\n        return true\n      }\n      state.pos = start;\n    }\n    return false\n  };\n  pp$1.regexp_eatKGroupName = function(state) {\n    if (state.eat(0x6B /* k */)) {\n      if (this.regexp_eatGroupName(state)) {\n        state.backReferenceNames.push(state.lastStringValue);\n        return true\n      }\n      state.raise(\"Invalid named reference\");\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-CharacterEscape\n  pp$1.regexp_eatCharacterEscape = function(state) {\n    return (\n      this.regexp_eatControlEscape(state) ||\n      this.regexp_eatCControlLetter(state) ||\n      this.regexp_eatZero(state) ||\n      this.regexp_eatHexEscapeSequence(state) ||\n      this.regexp_eatRegExpUnicodeEscapeSequence(state, false) ||\n      (!state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state)) ||\n      this.regexp_eatIdentityEscape(state)\n    )\n  };\n  pp$1.regexp_eatCControlLetter = function(state) {\n    var start = state.pos;\n    if (state.eat(0x63 /* c */)) {\n      if (this.regexp_eatControlLetter(state)) {\n        return true\n      }\n      state.pos = start;\n    }\n    return false\n  };\n  pp$1.regexp_eatZero = function(state) {\n    if (state.current() === 0x30 /* 0 */ && !isDecimalDigit(state.lookahead())) {\n      state.lastIntValue = 0;\n      state.advance();\n      return true\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscape\n  pp$1.regexp_eatControlEscape = function(state) {\n    var ch = state.current();\n    if (ch === 0x74 /* t */) {\n      state.lastIntValue = 0x09; /* \\t */\n      state.advance();\n      return true\n    }\n    if (ch === 0x6E /* n */) {\n      state.lastIntValue = 0x0A; /* \\n */\n      state.advance();\n      return true\n    }\n    if (ch === 0x76 /* v */) {\n      state.lastIntValue = 0x0B; /* \\v */\n      state.advance();\n      return true\n    }\n    if (ch === 0x66 /* f */) {\n      state.lastIntValue = 0x0C; /* \\f */\n      state.advance();\n      return true\n    }\n    if (ch === 0x72 /* r */) {\n      state.lastIntValue = 0x0D; /* \\r */\n      state.advance();\n      return true\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetter\n  pp$1.regexp_eatControlLetter = function(state) {\n    var ch = state.current();\n    if (isControlLetter(ch)) {\n      state.lastIntValue = ch % 0x20;\n      state.advance();\n      return true\n    }\n    return false\n  };\n  function isControlLetter(ch) {\n    return (\n      (ch >= 0x41 /* A */ && ch <= 0x5A /* Z */) ||\n      (ch >= 0x61 /* a */ && ch <= 0x7A /* z */)\n    )\n  }\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequence\n  pp$1.regexp_eatRegExpUnicodeEscapeSequence = function(state, forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n    var start = state.pos;\n    var switchU = forceU || state.switchU;\n\n    if (state.eat(0x75 /* u */)) {\n      if (this.regexp_eatFixedHexDigits(state, 4)) {\n        var lead = state.lastIntValue;\n        if (switchU && lead >= 0xD800 && lead <= 0xDBFF) {\n          var leadSurrogateEnd = state.pos;\n          if (state.eat(0x5C /* \\ */) && state.eat(0x75 /* u */) && this.regexp_eatFixedHexDigits(state, 4)) {\n            var trail = state.lastIntValue;\n            if (trail >= 0xDC00 && trail <= 0xDFFF) {\n              state.lastIntValue = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;\n              return true\n            }\n          }\n          state.pos = leadSurrogateEnd;\n          state.lastIntValue = lead;\n        }\n        return true\n      }\n      if (\n        switchU &&\n        state.eat(0x7B /* { */) &&\n        this.regexp_eatHexDigits(state) &&\n        state.eat(0x7D /* } */) &&\n        isValidUnicode(state.lastIntValue)\n      ) {\n        return true\n      }\n      if (switchU) {\n        state.raise(\"Invalid unicode escape\");\n      }\n      state.pos = start;\n    }\n\n    return false\n  };\n  function isValidUnicode(ch) {\n    return ch >= 0 && ch <= 0x10FFFF\n  }\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-IdentityEscape\n  pp$1.regexp_eatIdentityEscape = function(state) {\n    if (state.switchU) {\n      if (this.regexp_eatSyntaxCharacter(state)) {\n        return true\n      }\n      if (state.eat(0x2F /* / */)) {\n        state.lastIntValue = 0x2F; /* / */\n        return true\n      }\n      return false\n    }\n\n    var ch = state.current();\n    if (ch !== 0x63 /* c */ && (!state.switchN || ch !== 0x6B /* k */)) {\n      state.lastIntValue = ch;\n      state.advance();\n      return true\n    }\n\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscape\n  pp$1.regexp_eatDecimalEscape = function(state) {\n    state.lastIntValue = 0;\n    var ch = state.current();\n    if (ch >= 0x31 /* 1 */ && ch <= 0x39 /* 9 */) {\n      do {\n        state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);\n        state.advance();\n      } while ((ch = state.current()) >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */)\n      return true\n    }\n    return false\n  };\n\n  // Return values used by character set parsing methods, needed to\n  // forbid negation of sets that can match strings.\n  var CharSetNone = 0; // Nothing parsed\n  var CharSetOk = 1; // Construct parsed, cannot contain strings\n  var CharSetString = 2; // Construct parsed, can contain strings\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscape\n  pp$1.regexp_eatCharacterClassEscape = function(state) {\n    var ch = state.current();\n\n    if (isCharacterClassEscape(ch)) {\n      state.lastIntValue = -1;\n      state.advance();\n      return CharSetOk\n    }\n\n    var negate = false;\n    if (\n      state.switchU &&\n      this.options.ecmaVersion >= 9 &&\n      ((negate = ch === 0x50 /* P */) || ch === 0x70 /* p */)\n    ) {\n      state.lastIntValue = -1;\n      state.advance();\n      var result;\n      if (\n        state.eat(0x7B /* { */) &&\n        (result = this.regexp_eatUnicodePropertyValueExpression(state)) &&\n        state.eat(0x7D /* } */)\n      ) {\n        if (negate && result === CharSetString) { state.raise(\"Invalid property name\"); }\n        return result\n      }\n      state.raise(\"Invalid property name\");\n    }\n\n    return CharSetNone\n  };\n\n  function isCharacterClassEscape(ch) {\n    return (\n      ch === 0x64 /* d */ ||\n      ch === 0x44 /* D */ ||\n      ch === 0x73 /* s */ ||\n      ch === 0x53 /* S */ ||\n      ch === 0x77 /* w */ ||\n      ch === 0x57 /* W */\n    )\n  }\n\n  // UnicodePropertyValueExpression ::\n  //   UnicodePropertyName `=` UnicodePropertyValue\n  //   LoneUnicodePropertyNameOrValue\n  pp$1.regexp_eatUnicodePropertyValueExpression = function(state) {\n    var start = state.pos;\n\n    // UnicodePropertyName `=` UnicodePropertyValue\n    if (this.regexp_eatUnicodePropertyName(state) && state.eat(0x3D /* = */)) {\n      var name = state.lastStringValue;\n      if (this.regexp_eatUnicodePropertyValue(state)) {\n        var value = state.lastStringValue;\n        this.regexp_validateUnicodePropertyNameAndValue(state, name, value);\n        return CharSetOk\n      }\n    }\n    state.pos = start;\n\n    // LoneUnicodePropertyNameOrValue\n    if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {\n      var nameOrValue = state.lastStringValue;\n      return this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue)\n    }\n    return CharSetNone\n  };\n\n  pp$1.regexp_validateUnicodePropertyNameAndValue = function(state, name, value) {\n    if (!hasOwn(state.unicodeProperties.nonBinary, name))\n      { state.raise(\"Invalid property name\"); }\n    if (!state.unicodeProperties.nonBinary[name].test(value))\n      { state.raise(\"Invalid property value\"); }\n  };\n\n  pp$1.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {\n    if (state.unicodeProperties.binary.test(nameOrValue)) { return CharSetOk }\n    if (state.switchV && state.unicodeProperties.binaryOfStrings.test(nameOrValue)) { return CharSetString }\n    state.raise(\"Invalid property name\");\n  };\n\n  // UnicodePropertyName ::\n  //   UnicodePropertyNameCharacters\n  pp$1.regexp_eatUnicodePropertyName = function(state) {\n    var ch = 0;\n    state.lastStringValue = \"\";\n    while (isUnicodePropertyNameCharacter(ch = state.current())) {\n      state.lastStringValue += codePointToString(ch);\n      state.advance();\n    }\n    return state.lastStringValue !== \"\"\n  };\n\n  function isUnicodePropertyNameCharacter(ch) {\n    return isControlLetter(ch) || ch === 0x5F /* _ */\n  }\n\n  // UnicodePropertyValue ::\n  //   UnicodePropertyValueCharacters\n  pp$1.regexp_eatUnicodePropertyValue = function(state) {\n    var ch = 0;\n    state.lastStringValue = \"\";\n    while (isUnicodePropertyValueCharacter(ch = state.current())) {\n      state.lastStringValue += codePointToString(ch);\n      state.advance();\n    }\n    return state.lastStringValue !== \"\"\n  };\n  function isUnicodePropertyValueCharacter(ch) {\n    return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch)\n  }\n\n  // LoneUnicodePropertyNameOrValue ::\n  //   UnicodePropertyValueCharacters\n  pp$1.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {\n    return this.regexp_eatUnicodePropertyValue(state)\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClass\n  pp$1.regexp_eatCharacterClass = function(state) {\n    if (state.eat(0x5B /* [ */)) {\n      var negate = state.eat(0x5E /* ^ */);\n      var result = this.regexp_classContents(state);\n      if (!state.eat(0x5D /* ] */))\n        { state.raise(\"Unterminated character class\"); }\n      if (negate && result === CharSetString)\n        { state.raise(\"Negated character class may contain strings\"); }\n      return true\n    }\n    return false\n  };\n\n  // https://tc39.es/ecma262/#prod-ClassContents\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassRanges\n  pp$1.regexp_classContents = function(state) {\n    if (state.current() === 0x5D /* ] */) { return CharSetOk }\n    if (state.switchV) { return this.regexp_classSetExpression(state) }\n    this.regexp_nonEmptyClassRanges(state);\n    return CharSetOk\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRanges\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDash\n  pp$1.regexp_nonEmptyClassRanges = function(state) {\n    while (this.regexp_eatClassAtom(state)) {\n      var left = state.lastIntValue;\n      if (state.eat(0x2D /* - */) && this.regexp_eatClassAtom(state)) {\n        var right = state.lastIntValue;\n        if (state.switchU && (left === -1 || right === -1)) {\n          state.raise(\"Invalid character class\");\n        }\n        if (left !== -1 && right !== -1 && left > right) {\n          state.raise(\"Range out of order in character class\");\n        }\n      }\n    }\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtom\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDash\n  pp$1.regexp_eatClassAtom = function(state) {\n    var start = state.pos;\n\n    if (state.eat(0x5C /* \\ */)) {\n      if (this.regexp_eatClassEscape(state)) {\n        return true\n      }\n      if (state.switchU) {\n        // Make the same message as V8.\n        var ch$1 = state.current();\n        if (ch$1 === 0x63 /* c */ || isOctalDigit(ch$1)) {\n          state.raise(\"Invalid class escape\");\n        }\n        state.raise(\"Invalid escape\");\n      }\n      state.pos = start;\n    }\n\n    var ch = state.current();\n    if (ch !== 0x5D /* ] */) {\n      state.lastIntValue = ch;\n      state.advance();\n      return true\n    }\n\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassEscape\n  pp$1.regexp_eatClassEscape = function(state) {\n    var start = state.pos;\n\n    if (state.eat(0x62 /* b */)) {\n      state.lastIntValue = 0x08; /* <BS> */\n      return true\n    }\n\n    if (state.switchU && state.eat(0x2D /* - */)) {\n      state.lastIntValue = 0x2D; /* - */\n      return true\n    }\n\n    if (!state.switchU && state.eat(0x63 /* c */)) {\n      if (this.regexp_eatClassControlLetter(state)) {\n        return true\n      }\n      state.pos = start;\n    }\n\n    return (\n      this.regexp_eatCharacterClassEscape(state) ||\n      this.regexp_eatCharacterEscape(state)\n    )\n  };\n\n  // https://tc39.es/ecma262/#prod-ClassSetExpression\n  // https://tc39.es/ecma262/#prod-ClassUnion\n  // https://tc39.es/ecma262/#prod-ClassIntersection\n  // https://tc39.es/ecma262/#prod-ClassSubtraction\n  pp$1.regexp_classSetExpression = function(state) {\n    var result = CharSetOk, subResult;\n    if (this.regexp_eatClassSetRange(state)) ; else if (subResult = this.regexp_eatClassSetOperand(state)) {\n      if (subResult === CharSetString) { result = CharSetString; }\n      // https://tc39.es/ecma262/#prod-ClassIntersection\n      var start = state.pos;\n      while (state.eatChars([0x26, 0x26] /* && */)) {\n        if (\n          state.current() !== 0x26 /* & */ &&\n          (subResult = this.regexp_eatClassSetOperand(state))\n        ) {\n          if (subResult !== CharSetString) { result = CharSetOk; }\n          continue\n        }\n        state.raise(\"Invalid character in character class\");\n      }\n      if (start !== state.pos) { return result }\n      // https://tc39.es/ecma262/#prod-ClassSubtraction\n      while (state.eatChars([0x2D, 0x2D] /* -- */)) {\n        if (this.regexp_eatClassSetOperand(state)) { continue }\n        state.raise(\"Invalid character in character class\");\n      }\n      if (start !== state.pos) { return result }\n    } else {\n      state.raise(\"Invalid character in character class\");\n    }\n    // https://tc39.es/ecma262/#prod-ClassUnion\n    for (;;) {\n      if (this.regexp_eatClassSetRange(state)) { continue }\n      subResult = this.regexp_eatClassSetOperand(state);\n      if (!subResult) { return result }\n      if (subResult === CharSetString) { result = CharSetString; }\n    }\n  };\n\n  // https://tc39.es/ecma262/#prod-ClassSetRange\n  pp$1.regexp_eatClassSetRange = function(state) {\n    var start = state.pos;\n    if (this.regexp_eatClassSetCharacter(state)) {\n      var left = state.lastIntValue;\n      if (state.eat(0x2D /* - */) && this.regexp_eatClassSetCharacter(state)) {\n        var right = state.lastIntValue;\n        if (left !== -1 && right !== -1 && left > right) {\n          state.raise(\"Range out of order in character class\");\n        }\n        return true\n      }\n      state.pos = start;\n    }\n    return false\n  };\n\n  // https://tc39.es/ecma262/#prod-ClassSetOperand\n  pp$1.regexp_eatClassSetOperand = function(state) {\n    if (this.regexp_eatClassSetCharacter(state)) { return CharSetOk }\n    return this.regexp_eatClassStringDisjunction(state) || this.regexp_eatNestedClass(state)\n  };\n\n  // https://tc39.es/ecma262/#prod-NestedClass\n  pp$1.regexp_eatNestedClass = function(state) {\n    var start = state.pos;\n    if (state.eat(0x5B /* [ */)) {\n      var negate = state.eat(0x5E /* ^ */);\n      var result = this.regexp_classContents(state);\n      if (state.eat(0x5D /* ] */)) {\n        if (negate && result === CharSetString) {\n          state.raise(\"Negated character class may contain strings\");\n        }\n        return result\n      }\n      state.pos = start;\n    }\n    if (state.eat(0x5C /* \\ */)) {\n      var result$1 = this.regexp_eatCharacterClassEscape(state);\n      if (result$1) {\n        return result$1\n      }\n      state.pos = start;\n    }\n    return null\n  };\n\n  // https://tc39.es/ecma262/#prod-ClassStringDisjunction\n  pp$1.regexp_eatClassStringDisjunction = function(state) {\n    var start = state.pos;\n    if (state.eatChars([0x5C, 0x71] /* \\q */)) {\n      if (state.eat(0x7B /* { */)) {\n        var result = this.regexp_classStringDisjunctionContents(state);\n        if (state.eat(0x7D /* } */)) {\n          return result\n        }\n      } else {\n        // Make the same message as V8.\n        state.raise(\"Invalid escape\");\n      }\n      state.pos = start;\n    }\n    return null\n  };\n\n  // https://tc39.es/ecma262/#prod-ClassStringDisjunctionContents\n  pp$1.regexp_classStringDisjunctionContents = function(state) {\n    var result = this.regexp_classString(state);\n    while (state.eat(0x7C /* | */)) {\n      if (this.regexp_classString(state) === CharSetString) { result = CharSetString; }\n    }\n    return result\n  };\n\n  // https://tc39.es/ecma262/#prod-ClassString\n  // https://tc39.es/ecma262/#prod-NonEmptyClassString\n  pp$1.regexp_classString = function(state) {\n    var count = 0;\n    while (this.regexp_eatClassSetCharacter(state)) { count++; }\n    return count === 1 ? CharSetOk : CharSetString\n  };\n\n  // https://tc39.es/ecma262/#prod-ClassSetCharacter\n  pp$1.regexp_eatClassSetCharacter = function(state) {\n    var start = state.pos;\n    if (state.eat(0x5C /* \\ */)) {\n      if (\n        this.regexp_eatCharacterEscape(state) ||\n        this.regexp_eatClassSetReservedPunctuator(state)\n      ) {\n        return true\n      }\n      if (state.eat(0x62 /* b */)) {\n        state.lastIntValue = 0x08; /* <BS> */\n        return true\n      }\n      state.pos = start;\n      return false\n    }\n    var ch = state.current();\n    if (ch < 0 || ch === state.lookahead() && isClassSetReservedDoublePunctuatorCharacter(ch)) { return false }\n    if (isClassSetSyntaxCharacter(ch)) { return false }\n    state.advance();\n    state.lastIntValue = ch;\n    return true\n  };\n\n  // https://tc39.es/ecma262/#prod-ClassSetReservedDoublePunctuator\n  function isClassSetReservedDoublePunctuatorCharacter(ch) {\n    return (\n      ch === 0x21 /* ! */ ||\n      ch >= 0x23 /* # */ && ch <= 0x26 /* & */ ||\n      ch >= 0x2A /* * */ && ch <= 0x2C /* , */ ||\n      ch === 0x2E /* . */ ||\n      ch >= 0x3A /* : */ && ch <= 0x40 /* @ */ ||\n      ch === 0x5E /* ^ */ ||\n      ch === 0x60 /* ` */ ||\n      ch === 0x7E /* ~ */\n    )\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassSetSyntaxCharacter\n  function isClassSetSyntaxCharacter(ch) {\n    return (\n      ch === 0x28 /* ( */ ||\n      ch === 0x29 /* ) */ ||\n      ch === 0x2D /* - */ ||\n      ch === 0x2F /* / */ ||\n      ch >= 0x5B /* [ */ && ch <= 0x5D /* ] */ ||\n      ch >= 0x7B /* { */ && ch <= 0x7D /* } */\n    )\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassSetReservedPunctuator\n  pp$1.regexp_eatClassSetReservedPunctuator = function(state) {\n    var ch = state.current();\n    if (isClassSetReservedPunctuator(ch)) {\n      state.lastIntValue = ch;\n      state.advance();\n      return true\n    }\n    return false\n  };\n\n  // https://tc39.es/ecma262/#prod-ClassSetReservedPunctuator\n  function isClassSetReservedPunctuator(ch) {\n    return (\n      ch === 0x21 /* ! */ ||\n      ch === 0x23 /* # */ ||\n      ch === 0x25 /* % */ ||\n      ch === 0x26 /* & */ ||\n      ch === 0x2C /* , */ ||\n      ch === 0x2D /* - */ ||\n      ch >= 0x3A /* : */ && ch <= 0x3E /* > */ ||\n      ch === 0x40 /* @ */ ||\n      ch === 0x60 /* ` */ ||\n      ch === 0x7E /* ~ */\n    )\n  }\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassControlLetter\n  pp$1.regexp_eatClassControlLetter = function(state) {\n    var ch = state.current();\n    if (isDecimalDigit(ch) || ch === 0x5F /* _ */) {\n      state.lastIntValue = ch % 0x20;\n      state.advance();\n      return true\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\n  pp$1.regexp_eatHexEscapeSequence = function(state) {\n    var start = state.pos;\n    if (state.eat(0x78 /* x */)) {\n      if (this.regexp_eatFixedHexDigits(state, 2)) {\n        return true\n      }\n      if (state.switchU) {\n        state.raise(\"Invalid escape\");\n      }\n      state.pos = start;\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigits\n  pp$1.regexp_eatDecimalDigits = function(state) {\n    var start = state.pos;\n    var ch = 0;\n    state.lastIntValue = 0;\n    while (isDecimalDigit(ch = state.current())) {\n      state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);\n      state.advance();\n    }\n    return state.pos !== start\n  };\n  function isDecimalDigit(ch) {\n    return ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */\n  }\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigits\n  pp$1.regexp_eatHexDigits = function(state) {\n    var start = state.pos;\n    var ch = 0;\n    state.lastIntValue = 0;\n    while (isHexDigit(ch = state.current())) {\n      state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n      state.advance();\n    }\n    return state.pos !== start\n  };\n  function isHexDigit(ch) {\n    return (\n      (ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */) ||\n      (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) ||\n      (ch >= 0x61 /* a */ && ch <= 0x66 /* f */)\n    )\n  }\n  function hexToInt(ch) {\n    if (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) {\n      return 10 + (ch - 0x41 /* A */)\n    }\n    if (ch >= 0x61 /* a */ && ch <= 0x66 /* f */) {\n      return 10 + (ch - 0x61 /* a */)\n    }\n    return ch - 0x30 /* 0 */\n  }\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-LegacyOctalEscapeSequence\n  // Allows only 0-377(octal) i.e. 0-255(decimal).\n  pp$1.regexp_eatLegacyOctalEscapeSequence = function(state) {\n    if (this.regexp_eatOctalDigit(state)) {\n      var n1 = state.lastIntValue;\n      if (this.regexp_eatOctalDigit(state)) {\n        var n2 = state.lastIntValue;\n        if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {\n          state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;\n        } else {\n          state.lastIntValue = n1 * 8 + n2;\n        }\n      } else {\n        state.lastIntValue = n1;\n      }\n      return true\n    }\n    return false\n  };\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigit\n  pp$1.regexp_eatOctalDigit = function(state) {\n    var ch = state.current();\n    if (isOctalDigit(ch)) {\n      state.lastIntValue = ch - 0x30; /* 0 */\n      state.advance();\n      return true\n    }\n    state.lastIntValue = 0;\n    return false\n  };\n  function isOctalDigit(ch) {\n    return ch >= 0x30 /* 0 */ && ch <= 0x37 /* 7 */\n  }\n\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digits\n  // https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit\n  // And HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\n  pp$1.regexp_eatFixedHexDigits = function(state, length) {\n    var start = state.pos;\n    state.lastIntValue = 0;\n    for (var i = 0; i < length; ++i) {\n      var ch = state.current();\n      if (!isHexDigit(ch)) {\n        state.pos = start;\n        return false\n      }\n      state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n      state.advance();\n    }\n    return true\n  };\n\n  // Object type used to represent tokens. Note that normally, tokens\n  // simply exist as properties on the parser object. This is only\n  // used for the onToken callback and the external tokenizer.\n\n  var Token = function Token(p) {\n    this.type = p.type;\n    this.value = p.value;\n    this.start = p.start;\n    this.end = p.end;\n    if (p.options.locations)\n      { this.loc = new SourceLocation(p, p.startLoc, p.endLoc); }\n    if (p.options.ranges)\n      { this.range = [p.start, p.end]; }\n  };\n\n  // ## Tokenizer\n\n  var pp = Parser.prototype;\n\n  // Move to the next token\n\n  pp.next = function(ignoreEscapeSequenceInKeyword) {\n    if (!ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc)\n      { this.raiseRecoverable(this.start, \"Escape sequence in keyword \" + this.type.keyword); }\n    if (this.options.onToken)\n      { this.options.onToken(new Token(this)); }\n\n    this.lastTokEnd = this.end;\n    this.lastTokStart = this.start;\n    this.lastTokEndLoc = this.endLoc;\n    this.lastTokStartLoc = this.startLoc;\n    this.nextToken();\n  };\n\n  pp.getToken = function() {\n    this.next();\n    return new Token(this)\n  };\n\n  // If we're in an ES6 environment, make parsers iterable\n  if (typeof Symbol !== \"undefined\")\n    { pp[Symbol.iterator] = function() {\n      var this$1$1 = this;\n\n      return {\n        next: function () {\n          var token = this$1$1.getToken();\n          return {\n            done: token.type === types$1.eof,\n            value: token\n          }\n        }\n      }\n    }; }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  pp.nextToken = function() {\n    var curContext = this.curContext();\n    if (!curContext || !curContext.preserveSpace) { this.skipSpace(); }\n\n    this.start = this.pos;\n    if (this.options.locations) { this.startLoc = this.curPosition(); }\n    if (this.pos >= this.input.length) { return this.finishToken(types$1.eof) }\n\n    if (curContext.override) { return curContext.override(this) }\n    else { this.readToken(this.fullCharCodeAtPos()); }\n  };\n\n  pp.readToken = function(code) {\n    // Identifier or keyword. '\\uXXXX' sequences are allowed in\n    // identifiers, so '\\' also dispatches to that.\n    if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */)\n      { return this.readWord() }\n\n    return this.getTokenFromCode(code)\n  };\n\n  pp.fullCharCodeAtPos = function() {\n    var code = this.input.charCodeAt(this.pos);\n    if (code <= 0xd7ff || code >= 0xdc00) { return code }\n    var next = this.input.charCodeAt(this.pos + 1);\n    return next <= 0xdbff || next >= 0xe000 ? code : (code << 10) + next - 0x35fdc00\n  };\n\n  pp.skipBlockComment = function() {\n    var startLoc = this.options.onComment && this.curPosition();\n    var start = this.pos, end = this.input.indexOf(\"*/\", this.pos += 2);\n    if (end === -1) { this.raise(this.pos - 2, \"Unterminated comment\"); }\n    this.pos = end + 2;\n    if (this.options.locations) {\n      for (var nextBreak = (void 0), pos = start; (nextBreak = nextLineBreak(this.input, pos, this.pos)) > -1;) {\n        ++this.curLine;\n        pos = this.lineStart = nextBreak;\n      }\n    }\n    if (this.options.onComment)\n      { this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,\n                             startLoc, this.curPosition()); }\n  };\n\n  pp.skipLineComment = function(startSkip) {\n    var start = this.pos;\n    var startLoc = this.options.onComment && this.curPosition();\n    var ch = this.input.charCodeAt(this.pos += startSkip);\n    while (this.pos < this.input.length && !isNewLine(ch)) {\n      ch = this.input.charCodeAt(++this.pos);\n    }\n    if (this.options.onComment)\n      { this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,\n                             startLoc, this.curPosition()); }\n  };\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  pp.skipSpace = function() {\n    loop: while (this.pos < this.input.length) {\n      var ch = this.input.charCodeAt(this.pos);\n      switch (ch) {\n      case 32: case 160: // ' '\n        ++this.pos;\n        break\n      case 13:\n        if (this.input.charCodeAt(this.pos + 1) === 10) {\n          ++this.pos;\n        }\n      case 10: case 8232: case 8233:\n        ++this.pos;\n        if (this.options.locations) {\n          ++this.curLine;\n          this.lineStart = this.pos;\n        }\n        break\n      case 47: // '/'\n        switch (this.input.charCodeAt(this.pos + 1)) {\n        case 42: // '*'\n          this.skipBlockComment();\n          break\n        case 47:\n          this.skipLineComment(2);\n          break\n        default:\n          break loop\n        }\n        break\n      default:\n        if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n          ++this.pos;\n        } else {\n          break loop\n        }\n      }\n    }\n  };\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `exprAllowed`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  pp.finishToken = function(type, val) {\n    this.end = this.pos;\n    if (this.options.locations) { this.endLoc = this.curPosition(); }\n    var prevType = this.type;\n    this.type = type;\n    this.value = val;\n\n    this.updateContext(prevType);\n  };\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n  //\n  pp.readToken_dot = function() {\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next >= 48 && next <= 57) { return this.readNumber(true) }\n    var next2 = this.input.charCodeAt(this.pos + 2);\n    if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'\n      this.pos += 3;\n      return this.finishToken(types$1.ellipsis)\n    } else {\n      ++this.pos;\n      return this.finishToken(types$1.dot)\n    }\n  };\n\n  pp.readToken_slash = function() { // '/'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (this.exprAllowed) { ++this.pos; return this.readRegexp() }\n    if (next === 61) { return this.finishOp(types$1.assign, 2) }\n    return this.finishOp(types$1.slash, 1)\n  };\n\n  pp.readToken_mult_modulo_exp = function(code) { // '%*'\n    var next = this.input.charCodeAt(this.pos + 1);\n    var size = 1;\n    var tokentype = code === 42 ? types$1.star : types$1.modulo;\n\n    // exponentiation operator ** and **=\n    if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {\n      ++size;\n      tokentype = types$1.starstar;\n      next = this.input.charCodeAt(this.pos + 2);\n    }\n\n    if (next === 61) { return this.finishOp(types$1.assign, size + 1) }\n    return this.finishOp(tokentype, size)\n  };\n\n  pp.readToken_pipe_amp = function(code) { // '|&'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === code) {\n      if (this.options.ecmaVersion >= 12) {\n        var next2 = this.input.charCodeAt(this.pos + 2);\n        if (next2 === 61) { return this.finishOp(types$1.assign, 3) }\n      }\n      return this.finishOp(code === 124 ? types$1.logicalOR : types$1.logicalAND, 2)\n    }\n    if (next === 61) { return this.finishOp(types$1.assign, 2) }\n    return this.finishOp(code === 124 ? types$1.bitwiseOR : types$1.bitwiseAND, 1)\n  };\n\n  pp.readToken_caret = function() { // '^'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === 61) { return this.finishOp(types$1.assign, 2) }\n    return this.finishOp(types$1.bitwiseXOR, 1)\n  };\n\n  pp.readToken_plus_min = function(code) { // '+-'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === code) {\n      if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 &&\n          (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {\n        // A `-->` line comment\n        this.skipLineComment(3);\n        this.skipSpace();\n        return this.nextToken()\n      }\n      return this.finishOp(types$1.incDec, 2)\n    }\n    if (next === 61) { return this.finishOp(types$1.assign, 2) }\n    return this.finishOp(types$1.plusMin, 1)\n  };\n\n  pp.readToken_lt_gt = function(code) { // '<>'\n    var next = this.input.charCodeAt(this.pos + 1);\n    var size = 1;\n    if (next === code) {\n      size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;\n      if (this.input.charCodeAt(this.pos + size) === 61) { return this.finishOp(types$1.assign, size + 1) }\n      return this.finishOp(types$1.bitShift, size)\n    }\n    if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 &&\n        this.input.charCodeAt(this.pos + 3) === 45) {\n      // `<!--`, an XML-style comment that should be interpreted as a line comment\n      this.skipLineComment(4);\n      this.skipSpace();\n      return this.nextToken()\n    }\n    if (next === 61) { size = 2; }\n    return this.finishOp(types$1.relational, size)\n  };\n\n  pp.readToken_eq_excl = function(code) { // '=!'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === 61) { return this.finishOp(types$1.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2) }\n    if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'\n      this.pos += 2;\n      return this.finishToken(types$1.arrow)\n    }\n    return this.finishOp(code === 61 ? types$1.eq : types$1.prefix, 1)\n  };\n\n  pp.readToken_question = function() { // '?'\n    var ecmaVersion = this.options.ecmaVersion;\n    if (ecmaVersion >= 11) {\n      var next = this.input.charCodeAt(this.pos + 1);\n      if (next === 46) {\n        var next2 = this.input.charCodeAt(this.pos + 2);\n        if (next2 < 48 || next2 > 57) { return this.finishOp(types$1.questionDot, 2) }\n      }\n      if (next === 63) {\n        if (ecmaVersion >= 12) {\n          var next2$1 = this.input.charCodeAt(this.pos + 2);\n          if (next2$1 === 61) { return this.finishOp(types$1.assign, 3) }\n        }\n        return this.finishOp(types$1.coalesce, 2)\n      }\n    }\n    return this.finishOp(types$1.question, 1)\n  };\n\n  pp.readToken_numberSign = function() { // '#'\n    var ecmaVersion = this.options.ecmaVersion;\n    var code = 35; // '#'\n    if (ecmaVersion >= 13) {\n      ++this.pos;\n      code = this.fullCharCodeAtPos();\n      if (isIdentifierStart(code, true) || code === 92 /* '\\' */) {\n        return this.finishToken(types$1.privateId, this.readWord1())\n      }\n    }\n\n    this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\");\n  };\n\n  pp.getTokenFromCode = function(code) {\n    switch (code) {\n    // The interpretation of a dot depends on whether it is followed\n    // by a digit or another two dots.\n    case 46: // '.'\n      return this.readToken_dot()\n\n    // Punctuation tokens.\n    case 40: ++this.pos; return this.finishToken(types$1.parenL)\n    case 41: ++this.pos; return this.finishToken(types$1.parenR)\n    case 59: ++this.pos; return this.finishToken(types$1.semi)\n    case 44: ++this.pos; return this.finishToken(types$1.comma)\n    case 91: ++this.pos; return this.finishToken(types$1.bracketL)\n    case 93: ++this.pos; return this.finishToken(types$1.bracketR)\n    case 123: ++this.pos; return this.finishToken(types$1.braceL)\n    case 125: ++this.pos; return this.finishToken(types$1.braceR)\n    case 58: ++this.pos; return this.finishToken(types$1.colon)\n\n    case 96: // '`'\n      if (this.options.ecmaVersion < 6) { break }\n      ++this.pos;\n      return this.finishToken(types$1.backQuote)\n\n    case 48: // '0'\n      var next = this.input.charCodeAt(this.pos + 1);\n      if (next === 120 || next === 88) { return this.readRadixNumber(16) } // '0x', '0X' - hex number\n      if (this.options.ecmaVersion >= 6) {\n        if (next === 111 || next === 79) { return this.readRadixNumber(8) } // '0o', '0O' - octal number\n        if (next === 98 || next === 66) { return this.readRadixNumber(2) } // '0b', '0B' - binary number\n      }\n\n    // Anything else beginning with a digit is an integer, octal\n    // number, or float.\n    case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9\n      return this.readNumber(false)\n\n    // Quotes produce strings.\n    case 34: case 39: // '\"', \"'\"\n      return this.readString(code)\n\n    // Operators are parsed inline in tiny state machines. '=' (61) is\n    // often referred to. `finishOp` simply skips the amount of\n    // characters it is given as second argument, and returns a token\n    // of the type given by its first argument.\n    case 47: // '/'\n      return this.readToken_slash()\n\n    case 37: case 42: // '%*'\n      return this.readToken_mult_modulo_exp(code)\n\n    case 124: case 38: // '|&'\n      return this.readToken_pipe_amp(code)\n\n    case 94: // '^'\n      return this.readToken_caret()\n\n    case 43: case 45: // '+-'\n      return this.readToken_plus_min(code)\n\n    case 60: case 62: // '<>'\n      return this.readToken_lt_gt(code)\n\n    case 61: case 33: // '=!'\n      return this.readToken_eq_excl(code)\n\n    case 63: // '?'\n      return this.readToken_question()\n\n    case 126: // '~'\n      return this.finishOp(types$1.prefix, 1)\n\n    case 35: // '#'\n      return this.readToken_numberSign()\n    }\n\n    this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\");\n  };\n\n  pp.finishOp = function(type, size) {\n    var str = this.input.slice(this.pos, this.pos + size);\n    this.pos += size;\n    return this.finishToken(type, str)\n  };\n\n  pp.readRegexp = function() {\n    var escaped, inClass, start = this.pos;\n    for (;;) {\n      if (this.pos >= this.input.length) { this.raise(start, \"Unterminated regular expression\"); }\n      var ch = this.input.charAt(this.pos);\n      if (lineBreak.test(ch)) { this.raise(start, \"Unterminated regular expression\"); }\n      if (!escaped) {\n        if (ch === \"[\") { inClass = true; }\n        else if (ch === \"]\" && inClass) { inClass = false; }\n        else if (ch === \"/\" && !inClass) { break }\n        escaped = ch === \"\\\\\";\n      } else { escaped = false; }\n      ++this.pos;\n    }\n    var pattern = this.input.slice(start, this.pos);\n    ++this.pos;\n    var flagsStart = this.pos;\n    var flags = this.readWord1();\n    if (this.containsEsc) { this.unexpected(flagsStart); }\n\n    // Validate pattern\n    var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));\n    state.reset(start, pattern, flags);\n    this.validateRegExpFlags(state);\n    this.validateRegExpPattern(state);\n\n    // Create Literal#value property value.\n    var value = null;\n    try {\n      value = new RegExp(pattern, flags);\n    } catch (e) {\n      // ESTree requires null if it failed to instantiate RegExp object.\n      // https://github.com/estree/estree/blob/a27003adf4fd7bfad44de9cef372a2eacd527b1c/es5.md#regexpliteral\n    }\n\n    return this.finishToken(types$1.regexp, {pattern: pattern, flags: flags, value: value})\n  };\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n\n  pp.readInt = function(radix, len, maybeLegacyOctalNumericLiteral) {\n    // `len` is used for character escape sequences. In that case, disallow separators.\n    var allowSeparators = this.options.ecmaVersion >= 12 && len === undefined;\n\n    // `maybeLegacyOctalNumericLiteral` is true if it doesn't have prefix (0x,0o,0b)\n    // and isn't fraction part nor exponent part. In that case, if the first digit\n    // is zero then disallow separators.\n    var isLegacyOctalNumericLiteral = maybeLegacyOctalNumericLiteral && this.input.charCodeAt(this.pos) === 48;\n\n    var start = this.pos, total = 0, lastCode = 0;\n    for (var i = 0, e = len == null ? Infinity : len; i < e; ++i, ++this.pos) {\n      var code = this.input.charCodeAt(this.pos), val = (void 0);\n\n      if (allowSeparators && code === 95) {\n        if (isLegacyOctalNumericLiteral) { this.raiseRecoverable(this.pos, \"Numeric separator is not allowed in legacy octal numeric literals\"); }\n        if (lastCode === 95) { this.raiseRecoverable(this.pos, \"Numeric separator must be exactly one underscore\"); }\n        if (i === 0) { this.raiseRecoverable(this.pos, \"Numeric separator is not allowed at the first of digits\"); }\n        lastCode = code;\n        continue\n      }\n\n      if (code >= 97) { val = code - 97 + 10; } // a\n      else if (code >= 65) { val = code - 65 + 10; } // A\n      else if (code >= 48 && code <= 57) { val = code - 48; } // 0-9\n      else { val = Infinity; }\n      if (val >= radix) { break }\n      lastCode = code;\n      total = total * radix + val;\n    }\n\n    if (allowSeparators && lastCode === 95) { this.raiseRecoverable(this.pos - 1, \"Numeric separator is not allowed at the last of digits\"); }\n    if (this.pos === start || len != null && this.pos - start !== len) { return null }\n\n    return total\n  };\n\n  function stringToNumber(str, isLegacyOctalNumericLiteral) {\n    if (isLegacyOctalNumericLiteral) {\n      return parseInt(str, 8)\n    }\n\n    // `parseFloat(value)` stops parsing at the first numeric separator then returns a wrong value.\n    return parseFloat(str.replace(/_/g, \"\"))\n  }\n\n  function stringToBigInt(str) {\n    if (typeof BigInt !== \"function\") {\n      return null\n    }\n\n    // `BigInt(value)` throws syntax error if the string contains numeric separators.\n    return BigInt(str.replace(/_/g, \"\"))\n  }\n\n  pp.readRadixNumber = function(radix) {\n    var start = this.pos;\n    this.pos += 2; // 0x\n    var val = this.readInt(radix);\n    if (val == null) { this.raise(this.start + 2, \"Expected number in radix \" + radix); }\n    if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {\n      val = stringToBigInt(this.input.slice(start, this.pos));\n      ++this.pos;\n    } else if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n    return this.finishToken(types$1.num, val)\n  };\n\n  // Read an integer, octal integer, or floating-point number.\n\n  pp.readNumber = function(startsWithDot) {\n    var start = this.pos;\n    if (!startsWithDot && this.readInt(10, undefined, true) === null) { this.raise(start, \"Invalid number\"); }\n    var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n    if (octal && this.strict) { this.raise(start, \"Invalid number\"); }\n    var next = this.input.charCodeAt(this.pos);\n    if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {\n      var val$1 = stringToBigInt(this.input.slice(start, this.pos));\n      ++this.pos;\n      if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n      return this.finishToken(types$1.num, val$1)\n    }\n    if (octal && /[89]/.test(this.input.slice(start, this.pos))) { octal = false; }\n    if (next === 46 && !octal) { // '.'\n      ++this.pos;\n      this.readInt(10);\n      next = this.input.charCodeAt(this.pos);\n    }\n    if ((next === 69 || next === 101) && !octal) { // 'eE'\n      next = this.input.charCodeAt(++this.pos);\n      if (next === 43 || next === 45) { ++this.pos; } // '+-'\n      if (this.readInt(10) === null) { this.raise(start, \"Invalid number\"); }\n    }\n    if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n\n    var val = stringToNumber(this.input.slice(start, this.pos), octal);\n    return this.finishToken(types$1.num, val)\n  };\n\n  // Read a string value, interpreting backslash-escapes.\n\n  pp.readCodePoint = function() {\n    var ch = this.input.charCodeAt(this.pos), code;\n\n    if (ch === 123) { // '{'\n      if (this.options.ecmaVersion < 6) { this.unexpected(); }\n      var codePos = ++this.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.pos) - this.pos);\n      ++this.pos;\n      if (code > 0x10FFFF) { this.invalidStringToken(codePos, \"Code point out of bounds\"); }\n    } else {\n      code = this.readHexChar(4);\n    }\n    return code\n  };\n\n  pp.readString = function(quote) {\n    var out = \"\", chunkStart = ++this.pos;\n    for (;;) {\n      if (this.pos >= this.input.length) { this.raise(this.start, \"Unterminated string constant\"); }\n      var ch = this.input.charCodeAt(this.pos);\n      if (ch === quote) { break }\n      if (ch === 92) { // '\\'\n        out += this.input.slice(chunkStart, this.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.pos;\n      } else if (ch === 0x2028 || ch === 0x2029) {\n        if (this.options.ecmaVersion < 10) { this.raise(this.start, \"Unterminated string constant\"); }\n        ++this.pos;\n        if (this.options.locations) {\n          this.curLine++;\n          this.lineStart = this.pos;\n        }\n      } else {\n        if (isNewLine(ch)) { this.raise(this.start, \"Unterminated string constant\"); }\n        ++this.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.pos++);\n    return this.finishToken(types$1.string, out)\n  };\n\n  // Reads template string tokens.\n\n  var INVALID_TEMPLATE_ESCAPE_ERROR = {};\n\n  pp.tryReadTemplateToken = function() {\n    this.inTemplateElement = true;\n    try {\n      this.readTmplToken();\n    } catch (err) {\n      if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {\n        this.readInvalidTemplateToken();\n      } else {\n        throw err\n      }\n    }\n\n    this.inTemplateElement = false;\n  };\n\n  pp.invalidStringToken = function(position, message) {\n    if (this.inTemplateElement && this.options.ecmaVersion >= 9) {\n      throw INVALID_TEMPLATE_ESCAPE_ERROR\n    } else {\n      this.raise(position, message);\n    }\n  };\n\n  pp.readTmplToken = function() {\n    var out = \"\", chunkStart = this.pos;\n    for (;;) {\n      if (this.pos >= this.input.length) { this.raise(this.start, \"Unterminated template\"); }\n      var ch = this.input.charCodeAt(this.pos);\n      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) { // '`', '${'\n        if (this.pos === this.start && (this.type === types$1.template || this.type === types$1.invalidTemplate)) {\n          if (ch === 36) {\n            this.pos += 2;\n            return this.finishToken(types$1.dollarBraceL)\n          } else {\n            ++this.pos;\n            return this.finishToken(types$1.backQuote)\n          }\n        }\n        out += this.input.slice(chunkStart, this.pos);\n        return this.finishToken(types$1.template, out)\n      }\n      if (ch === 92) { // '\\'\n        out += this.input.slice(chunkStart, this.pos);\n        out += this.readEscapedChar(true);\n        chunkStart = this.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.pos);\n        ++this.pos;\n        switch (ch) {\n        case 13:\n          if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; }\n        case 10:\n          out += \"\\n\";\n          break\n        default:\n          out += String.fromCharCode(ch);\n          break\n        }\n        if (this.options.locations) {\n          ++this.curLine;\n          this.lineStart = this.pos;\n        }\n        chunkStart = this.pos;\n      } else {\n        ++this.pos;\n      }\n    }\n  };\n\n  // Reads a template token to search for the end, without validating any escape sequences\n  pp.readInvalidTemplateToken = function() {\n    for (; this.pos < this.input.length; this.pos++) {\n      switch (this.input[this.pos]) {\n      case \"\\\\\":\n        ++this.pos;\n        break\n\n      case \"$\":\n        if (this.input[this.pos + 1] !== \"{\") {\n          break\n        }\n\n      // falls through\n      case \"`\":\n        return this.finishToken(types$1.invalidTemplate, this.input.slice(this.start, this.pos))\n\n      // no default\n      }\n    }\n    this.raise(this.start, \"Unterminated template\");\n  };\n\n  // Used to read escaped characters\n\n  pp.readEscapedChar = function(inTemplate) {\n    var ch = this.input.charCodeAt(++this.pos);\n    ++this.pos;\n    switch (ch) {\n    case 110: return \"\\n\" // 'n' -> '\\n'\n    case 114: return \"\\r\" // 'r' -> '\\r'\n    case 120: return String.fromCharCode(this.readHexChar(2)) // 'x'\n    case 117: return codePointToString(this.readCodePoint()) // 'u'\n    case 116: return \"\\t\" // 't' -> '\\t'\n    case 98: return \"\\b\" // 'b' -> '\\b'\n    case 118: return \"\\u000b\" // 'v' -> '\\u000b'\n    case 102: return \"\\f\" // 'f' -> '\\f'\n    case 13: if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; } // '\\r\\n'\n    case 10: // ' \\n'\n      if (this.options.locations) { this.lineStart = this.pos; ++this.curLine; }\n      return \"\"\n    case 56:\n    case 57:\n      if (this.strict) {\n        this.invalidStringToken(\n          this.pos - 1,\n          \"Invalid escape sequence\"\n        );\n      }\n      if (inTemplate) {\n        var codePos = this.pos - 1;\n\n        this.invalidStringToken(\n          codePos,\n          \"Invalid escape sequence in template string\"\n        );\n      }\n    default:\n      if (ch >= 48 && ch <= 55) {\n        var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];\n        var octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        this.pos += octalStr.length - 1;\n        ch = this.input.charCodeAt(this.pos);\n        if ((octalStr !== \"0\" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {\n          this.invalidStringToken(\n            this.pos - 1 - octalStr.length,\n            inTemplate\n              ? \"Octal literal in template string\"\n              : \"Octal literal in strict mode\"\n          );\n        }\n        return String.fromCharCode(octal)\n      }\n      if (isNewLine(ch)) {\n        // Unicode new line characters after \\ get removed from output in both\n        // template literals and strings\n        return \"\"\n      }\n      return String.fromCharCode(ch)\n    }\n  };\n\n  // Used to read character escape sequences ('\\x', '\\u', '\\U').\n\n  pp.readHexChar = function(len) {\n    var codePos = this.pos;\n    var n = this.readInt(16, len);\n    if (n === null) { this.invalidStringToken(codePos, \"Bad character escape sequence\"); }\n    return n\n  };\n\n  // Read an identifier, and return it as a string. Sets `this.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n\n  pp.readWord1 = function() {\n    this.containsEsc = false;\n    var word = \"\", first = true, chunkStart = this.pos;\n    var astral = this.options.ecmaVersion >= 6;\n    while (this.pos < this.input.length) {\n      var ch = this.fullCharCodeAtPos();\n      if (isIdentifierChar(ch, astral)) {\n        this.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === 92) { // \"\\\"\n        this.containsEsc = true;\n        word += this.input.slice(chunkStart, this.pos);\n        var escStart = this.pos;\n        if (this.input.charCodeAt(++this.pos) !== 117) // \"u\"\n          { this.invalidStringToken(this.pos, \"Expecting Unicode escape sequence \\\\uXXXX\"); }\n        ++this.pos;\n        var esc = this.readCodePoint();\n        if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))\n          { this.invalidStringToken(escStart, \"Invalid Unicode escape\"); }\n        word += codePointToString(esc);\n        chunkStart = this.pos;\n      } else {\n        break\n      }\n      first = false;\n    }\n    return word + this.input.slice(chunkStart, this.pos)\n  };\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  pp.readWord = function() {\n    var word = this.readWord1();\n    var type = types$1.name;\n    if (this.keywords.test(word)) {\n      type = keywords[word];\n    }\n    return this.finishToken(type, word)\n  };\n\n  // Acorn is a tiny, fast JavaScript parser written in JavaScript.\n  //\n  // Acorn was written by Marijn Haverbeke, Ingvar Stepanyan, and\n  // various contributors and released under an MIT license.\n  //\n  // Git repositories for Acorn are available at\n  //\n  //     http://marijnhaverbeke.nl/git/acorn\n  //     https://github.com/acornjs/acorn.git\n  //\n  // Please use the [github bug tracker][ghbt] to report issues.\n  //\n  // [ghbt]: https://github.com/acornjs/acorn/issues\n  //\n  // [walk]: util/walk.js\n\n\n  var version = \"8.11.3\";\n\n  Parser.acorn = {\n    Parser: Parser,\n    version: version,\n    defaultOptions: defaultOptions,\n    Position: Position,\n    SourceLocation: SourceLocation,\n    getLineInfo: getLineInfo,\n    Node: Node,\n    TokenType: TokenType,\n    tokTypes: types$1,\n    keywordTypes: keywords,\n    TokContext: TokContext,\n    tokContexts: types,\n    isIdentifierChar: isIdentifierChar,\n    isIdentifierStart: isIdentifierStart,\n    Token: Token,\n    isNewLine: isNewLine,\n    lineBreak: lineBreak,\n    lineBreakG: lineBreakG,\n    nonASCIIwhitespace: nonASCIIwhitespace\n  };\n\n  // The main exported interface (under `self.acorn` when in the\n  // browser) is a `parse` function that takes a code string and returns\n  // an abstract syntax tree as specified by the [ESTree spec][estree].\n  //\n  // [estree]: https://github.com/estree/estree\n\n  function parse(input, options) {\n    return Parser.parse(input, options)\n  }\n\n  // This function tries to parse a single expression at a given\n  // offset in a string. Useful for parsing mixed-language formats\n  // that embed JavaScript expressions.\n\n  function parseExpressionAt(input, pos, options) {\n    return Parser.parseExpressionAt(input, pos, options)\n  }\n\n  // Acorn is organized as a tokenizer and a recursive-descent parser.\n  // The `tokenizer` export provides an interface to the tokenizer.\n\n  function tokenizer(input, options) {\n    return Parser.tokenizer(input, options)\n  }\n\n  exports.Node = Node;\n  exports.Parser = Parser;\n  exports.Position = Position;\n  exports.SourceLocation = SourceLocation;\n  exports.TokContext = TokContext;\n  exports.Token = Token;\n  exports.TokenType = TokenType;\n  exports.defaultOptions = defaultOptions;\n  exports.getLineInfo = getLineInfo;\n  exports.isIdentifierChar = isIdentifierChar;\n  exports.isIdentifierStart = isIdentifierStart;\n  exports.isNewLine = isNewLine;\n  exports.keywordTypes = keywords;\n  exports.lineBreak = lineBreak;\n  exports.lineBreakG = lineBreakG;\n  exports.nonASCIIwhitespace = nonASCIIwhitespace;\n  exports.parse = parse;\n  exports.parseExpressionAt = parseExpressionAt;\n  exports.tokContexts = types;\n  exports.tokTypes = types$1;\n  exports.tokenizer = tokenizer;\n  exports.version = version;\n\n}));\n\n\n//# sourceURL=webpack://src/./node_modules/acorn/dist/acorn.js?");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./js/SRW Core/main.js");
/******/ 	
/******/ })()
;